// Code generated by protoc-gen-go.
// source: biometric_service.proto
// DO NOT EDIT!

/*
Package Bioskynet is a generated protocol buffer package.

It is generated from these files:
	biometric_service.proto

It has these top-level messages:
	HeartbeatMessage
	GetResponse
	GetRequest
	CommitRequest
	CommitResponse
	MutationResult
	Mutation
	Entity
	Entities
	GetPersonRequest
	GetLocationRequest
	GetVisitRecordRequest
	Page
	GetCardRequest
	PopulationCreationResponse
	VerificationData
	IdentificationData
	FaceSearchResponse
	FrameBytes
	Faces
	FaceCharacteristic
	Match
	Matches
	Card
	Cards
	MessageBytes
	Key
	AccessDevice
	DeviceUpdate
	ConnectedDevices
	Device
	DeviceStateMessage
	GenericDeviceStateMsg
	AccessDeviceStateMsg
	Position
	Box
	Location
	Locations
	Person
	Persons
	Photo
	Photos
	Unit
	ConnectedUnit
	UpdatedUnit
	UpdatedUnits
	Units
	UnitConfiguration
	UnitLocationState
	VisitRecord
	VisitRecords
*/
package Bioskynet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceType int32

const (
	ServiceType_None_Type    ServiceType = 0
	ServiceType_Facial_Type  ServiceType = 1
	ServiceType_AppUnit_Type ServiceType = 2
	ServiceType_Unit_Type    ServiceType = 3
)

var ServiceType_name = map[int32]string{
	0: "None_Type",
	1: "Facial_Type",
	2: "AppUnit_Type",
	3: "Unit_Type",
}
var ServiceType_value = map[string]int32{
	"None_Type":    0,
	"Facial_Type":  1,
	"AppUnit_Type": 2,
	"Unit_Type":    3,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}
func (ServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BiometricType int32

const (
	BiometricType_UnspecifiedBio BiometricType = 0
	BiometricType_Facial         BiometricType = 1
	BiometricType_Fingerprint    BiometricType = 2
	BiometricType_Iris           BiometricType = 3
	BiometricType_All            BiometricType = 4
)

var BiometricType_name = map[int32]string{
	0: "UnspecifiedBio",
	1: "Facial",
	2: "Fingerprint",
	3: "Iris",
	4: "All",
}
var BiometricType_value = map[string]int32{
	"UnspecifiedBio": 0,
	"Facial":         1,
	"Fingerprint":    2,
	"Iris":           3,
	"All":            4,
}

func (x BiometricType) String() string {
	return proto.EnumName(BiometricType_name, int32(x))
}
func (BiometricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EyeType int32

const (
	EyeType_Unspecified_Eye EyeType = 0
	EyeType_Left            EyeType = 1
	EyeType_Right           EyeType = 2
	EyeType_Both            EyeType = 3
)

var EyeType_name = map[int32]string{
	0: "Unspecified_Eye",
	1: "Left",
	2: "Right",
	3: "Both",
}
var EyeType_value = map[string]int32{
	"Unspecified_Eye": 0,
	"Left":            1,
	"Right":           2,
	"Both":            3,
}

func (x EyeType) String() string {
	return proto.EnumName(EyeType_name, int32(x))
}
func (EyeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Finger int32

const (
	Finger_Unspecified_Finger Finger = 0
	Finger_RightThumb         Finger = 1
	Finger_LeftThumb          Finger = 2
	Finger_RightIndex         Finger = 3
	Finger_LeftIndex          Finger = 4
	Finger_RightMiddle        Finger = 5
	Finger_LeftMiddle         Finger = 6
	Finger_RightRing          Finger = 7
	Finger_LeftRing           Finger = 8
	Finger_RightLittle        Finger = 9
	Finger_LeftLittle         Finger = 10
)

var Finger_name = map[int32]string{
	0:  "Unspecified_Finger",
	1:  "RightThumb",
	2:  "LeftThumb",
	3:  "RightIndex",
	4:  "LeftIndex",
	5:  "RightMiddle",
	6:  "LeftMiddle",
	7:  "RightRing",
	8:  "LeftRing",
	9:  "RightLittle",
	10: "LeftLittle",
}
var Finger_value = map[string]int32{
	"Unspecified_Finger": 0,
	"RightThumb":         1,
	"LeftThumb":          2,
	"RightIndex":         3,
	"LeftIndex":          4,
	"RightMiddle":        5,
	"LeftMiddle":         6,
	"RightRing":          7,
	"LeftRing":           8,
	"RightLittle":        9,
	"LeftLittle":         10,
}

func (x Finger) String() string {
	return proto.EnumName(Finger_name, int32(x))
}
func (Finger) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FacialIsoComplianceTemplate int32

const (
	FacialIsoComplianceTemplate_Unspecified_IsoTemplate         FacialIsoComplianceTemplate = 0
	FacialIsoComplianceTemplate_OnlyOneFaceVisible              FacialIsoComplianceTemplate = 1
	FacialIsoComplianceTemplate_goodVerticalFacePosition        FacialIsoComplianceTemplate = 2
	FacialIsoComplianceTemplate_horizontallyCenteredFace        FacialIsoComplianceTemplate = 3
	FacialIsoComplianceTemplate_widthOfHead                     FacialIsoComplianceTemplate = 4
	FacialIsoComplianceTemplate_lengthOfHead                    FacialIsoComplianceTemplate = 5
	FacialIsoComplianceTemplate_widthOfHeadBestPractice         FacialIsoComplianceTemplate = 6
	FacialIsoComplianceTemplate_lengthOfHeadBestPractice        FacialIsoComplianceTemplate = 7
	FacialIsoComplianceTemplate_resolution                      FacialIsoComplianceTemplate = 8
	FacialIsoComplianceTemplate_resolutionBestPractice          FacialIsoComplianceTemplate = 9
	FacialIsoComplianceTemplate_imageWidthToHeightBestPractice  FacialIsoComplianceTemplate = 10
	FacialIsoComplianceTemplate_goodExposure                    FacialIsoComplianceTemplate = 11
	FacialIsoComplianceTemplate_goodGrayScaleProfile            FacialIsoComplianceTemplate = 12
	FacialIsoComplianceTemplate_hasNaturalSkinColour            FacialIsoComplianceTemplate = 13
	FacialIsoComplianceTemplate_noHotSpots                      FacialIsoComplianceTemplate = 14
	FacialIsoComplianceTemplate_isBackgroundUniformBestPractice FacialIsoComplianceTemplate = 15
	FacialIsoComplianceTemplate_isFrontal                       FacialIsoComplianceTemplate = 16
	FacialIsoComplianceTemplate_isFrontalBestPractice           FacialIsoComplianceTemplate = 17
	FacialIsoComplianceTemplate_isLightingUniform               FacialIsoComplianceTemplate = 18
	FacialIsoComplianceTemplate_eyesOpenBestPractice            FacialIsoComplianceTemplate = 19
	FacialIsoComplianceTemplate_eyesGazeFrontalBestPractice     FacialIsoComplianceTemplate = 20
	FacialIsoComplianceTemplate_eyesNotRedBestPractice          FacialIsoComplianceTemplate = 21
	FacialIsoComplianceTemplate_noTintedGlasses                 FacialIsoComplianceTemplate = 22
	FacialIsoComplianceTemplate_isSharp                         FacialIsoComplianceTemplate = 23
	FacialIsoComplianceTemplate_mouthClosedBestPractice         FacialIsoComplianceTemplate = 24
)

var FacialIsoComplianceTemplate_name = map[int32]string{
	0:  "Unspecified_IsoTemplate",
	1:  "OnlyOneFaceVisible",
	2:  "goodVerticalFacePosition",
	3:  "horizontallyCenteredFace",
	4:  "widthOfHead",
	5:  "lengthOfHead",
	6:  "widthOfHeadBestPractice",
	7:  "lengthOfHeadBestPractice",
	8:  "resolution",
	9:  "resolutionBestPractice",
	10: "imageWidthToHeightBestPractice",
	11: "goodExposure",
	12: "goodGrayScaleProfile",
	13: "hasNaturalSkinColour",
	14: "noHotSpots",
	15: "isBackgroundUniformBestPractice",
	16: "isFrontal",
	17: "isFrontalBestPractice",
	18: "isLightingUniform",
	19: "eyesOpenBestPractice",
	20: "eyesGazeFrontalBestPractice",
	21: "eyesNotRedBestPractice",
	22: "noTintedGlasses",
	23: "isSharp",
	24: "mouthClosedBestPractice",
}
var FacialIsoComplianceTemplate_value = map[string]int32{
	"Unspecified_IsoTemplate":         0,
	"OnlyOneFaceVisible":              1,
	"goodVerticalFacePosition":        2,
	"horizontallyCenteredFace":        3,
	"widthOfHead":                     4,
	"lengthOfHead":                    5,
	"widthOfHeadBestPractice":         6,
	"lengthOfHeadBestPractice":        7,
	"resolution":                      8,
	"resolutionBestPractice":          9,
	"imageWidthToHeightBestPractice":  10,
	"goodExposure":                    11,
	"goodGrayScaleProfile":            12,
	"hasNaturalSkinColour":            13,
	"noHotSpots":                      14,
	"isBackgroundUniformBestPractice": 15,
	"isFrontal":                       16,
	"isFrontalBestPractice":           17,
	"isLightingUniform":               18,
	"eyesOpenBestPractice":            19,
	"eyesGazeFrontalBestPractice":     20,
	"eyesNotRedBestPractice":          21,
	"noTintedGlasses":                 22,
	"isSharp":                         23,
	"mouthClosedBestPractice":         24,
}

func (x FacialIsoComplianceTemplate) String() string {
	return proto.EnumName(FacialIsoComplianceTemplate_name, int32(x))
}
func (FacialIsoComplianceTemplate) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DataType int32

const (
	DataType_None_DataType      DataType = 0
	DataType_GetRequestType     DataType = 1
	DataType_GetResponseType    DataType = 2
	DataType_CommitRequestType  DataType = 3
	DataType_CommitResponseType DataType = 4
)

var DataType_name = map[int32]string{
	0: "None_DataType",
	1: "GetRequestType",
	2: "GetResponseType",
	3: "CommitRequestType",
	4: "CommitResponseType",
}
var DataType_value = map[string]int32{
	"None_DataType":      0,
	"GetRequestType":     1,
	"GetResponseType":    2,
	"CommitRequestType":  3,
	"CommitResponseType": 4,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeviceType int32

const (
	DeviceType_None_DType DeviceType = 0
	DeviceType_CardReader DeviceType = 1
	DeviceType_Capture    DeviceType = 2
)

var DeviceType_name = map[int32]string{
	0: "None_DType",
	1: "CardReader",
	2: "Capture",
}
var DeviceType_value = map[string]int32{
	"None_DType": 0,
	"CardReader": 1,
	"Capture":    2,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeviceState int32

const (
	DeviceState_None_State    DeviceState = 0
	DeviceState_Active        DeviceState = 1
	DeviceState_StoppedByUser DeviceState = 2
	DeviceState_Paused        DeviceState = 3
	DeviceState_Stopped       DeviceState = 4
	DeviceState_Error         DeviceState = 5
)

var DeviceState_name = map[int32]string{
	0: "None_State",
	1: "Active",
	2: "StoppedByUser",
	3: "Paused",
	4: "Stopped",
	5: "Error",
}
var DeviceState_value = map[string]int32{
	"None_State":    0,
	"Active":        1,
	"StoppedByUser": 2,
	"Paused":        3,
	"Stopped":       4,
	"Error":         5,
}

func (x DeviceState) String() string {
	return proto.EnumName(DeviceState_name, int32(x))
}
func (DeviceState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type LocationState int32

const (
	LocationState_Unspecified_State LocationState = 0
	LocationState_Opened            LocationState = 1
	LocationState_Closed            LocationState = 2
	LocationState_Failure           LocationState = 3
)

var LocationState_name = map[int32]string{
	0: "Unspecified_State",
	1: "Opened",
	2: "Closed",
	3: "Failure",
}
var LocationState_value = map[string]int32{
	"Unspecified_State": 0,
	"Opened":            1,
	"Closed":            2,
	"Failure":           3,
}

func (x LocationState) String() string {
	return proto.EnumName(LocationState_name, int32(x))
}
func (LocationState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Gender int32

const (
	Gender_Gender_Unspecified Gender = 0
	Gender_Male               Gender = 1
	Gender_Female             Gender = 2
)

var Gender_name = map[int32]string{
	0: "Gender_Unspecified",
	1: "Male",
	2: "Female",
}
var Gender_value = map[string]int32{
	"Gender_Unspecified": 0,
	"Male":               1,
	"Female":             2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Rights int32

const (
	Rights_Rights_Unspecified Rights = 0
	Rights_Custom             Rights = 1
	Rights_Operator           Rights = 2
	Rights_Manager            Rights = 3
	Rights_Supervisor         Rights = 4
)

var Rights_name = map[int32]string{
	0: "Rights_Unspecified",
	1: "Custom",
	2: "Operator",
	3: "Manager",
	4: "Supervisor",
}
var Rights_value = map[string]int32{
	"Rights_Unspecified": 0,
	"Custom":             1,
	"Operator":           2,
	"Manager":            3,
	"Supervisor":         4,
}

func (x Rights) String() string {
	return proto.EnumName(Rights_name, int32(x))
}
func (Rights) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Purpose int32

const (
	Purpose_NonePurpose Purpose = 0
	Purpose_Thumbnail   Purpose = 1
	Purpose_Population  Purpose = 2
)

var Purpose_name = map[int32]string{
	0: "NonePurpose",
	1: "Thumbnail",
	2: "Population",
}
var Purpose_value = map[string]int32{
	"NonePurpose": 0,
	"Thumbnail":   1,
	"Population":  2,
}

func (x Purpose) String() string {
	return proto.EnumName(Purpose_name, int32(x))
}
func (Purpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type UnitState int32

const (
	UnitState_None_    UnitState = 0
	UnitState_Inserted UnitState = 1
	UnitState_Deleted  UnitState = 2
	UnitState_Updated  UnitState = 3
)

var UnitState_name = map[int32]string{
	0: "None_",
	1: "Inserted",
	2: "Deleted",
	3: "Updated",
}
var UnitState_value = map[string]int32{
	"None_":    0,
	"Inserted": 1,
	"Deleted":  2,
	"Updated":  3,
}

func (x UnitState) String() string {
	return proto.EnumName(UnitState_name, int32(x))
}
func (UnitState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type AccessState int32

const (
	AccessState_NoneState AccessState = 0
	AccessState_Granted   AccessState = 1
	AccessState_Denied    AccessState = 2
)

var AccessState_name = map[int32]string{
	0: "NoneState",
	1: "Granted",
	2: "Denied",
}
var AccessState_value = map[string]int32{
	"NoneState": 0,
	"Granted":   1,
	"Denied":    2,
}

func (x AccessState) String() string {
	return proto.EnumName(AccessState_name, int32(x))
}
func (AccessState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type HeartbeatMessage struct {
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
}

func (m *HeartbeatMessage) Reset()                    { *m = HeartbeatMessage{} }
func (m *HeartbeatMessage) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatMessage) ProtoMessage()               {}
func (*HeartbeatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetResponse struct {
	Items *Entities `protobuf:"bytes,1,opt,name=items" json:"items,omitempty"`
	Count int64     `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetItems() *Entities {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetRequest struct {
	// Types that are valid to be assigned to RequestType:
	//	*GetRequest_PersonRequest
	//	*GetRequest_CardRequest
	//	*GetRequest_LocationRequest
	//	*GetRequest_VisitRecordRequest
	RequestType isGetRequest_RequestType `protobuf_oneof:"request_type"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isGetRequest_RequestType interface {
	isGetRequest_RequestType()
}

type GetRequest_PersonRequest struct {
	PersonRequest *GetPersonRequest `protobuf:"bytes,1,opt,name=person_request,json=personRequest,oneof"`
}
type GetRequest_CardRequest struct {
	CardRequest *GetCardRequest `protobuf:"bytes,2,opt,name=card_request,json=cardRequest,oneof"`
}
type GetRequest_LocationRequest struct {
	LocationRequest *GetLocationRequest `protobuf:"bytes,3,opt,name=location_request,json=locationRequest,oneof"`
}
type GetRequest_VisitRecordRequest struct {
	VisitRecordRequest *GetVisitRecordRequest `protobuf:"bytes,4,opt,name=visit_record_request,json=visitRecordRequest,oneof"`
}

func (*GetRequest_PersonRequest) isGetRequest_RequestType()      {}
func (*GetRequest_CardRequest) isGetRequest_RequestType()        {}
func (*GetRequest_LocationRequest) isGetRequest_RequestType()    {}
func (*GetRequest_VisitRecordRequest) isGetRequest_RequestType() {}

func (m *GetRequest) GetRequestType() isGetRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (m *GetRequest) GetPersonRequest() *GetPersonRequest {
	if x, ok := m.GetRequestType().(*GetRequest_PersonRequest); ok {
		return x.PersonRequest
	}
	return nil
}

func (m *GetRequest) GetCardRequest() *GetCardRequest {
	if x, ok := m.GetRequestType().(*GetRequest_CardRequest); ok {
		return x.CardRequest
	}
	return nil
}

func (m *GetRequest) GetLocationRequest() *GetLocationRequest {
	if x, ok := m.GetRequestType().(*GetRequest_LocationRequest); ok {
		return x.LocationRequest
	}
	return nil
}

func (m *GetRequest) GetVisitRecordRequest() *GetVisitRecordRequest {
	if x, ok := m.GetRequestType().(*GetRequest_VisitRecordRequest); ok {
		return x.VisitRecordRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetRequest_OneofMarshaler, _GetRequest_OneofUnmarshaler, _GetRequest_OneofSizer, []interface{}{
		(*GetRequest_PersonRequest)(nil),
		(*GetRequest_CardRequest)(nil),
		(*GetRequest_LocationRequest)(nil),
		(*GetRequest_VisitRecordRequest)(nil),
	}
}

func _GetRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetRequest)
	// request_type
	switch x := m.RequestType.(type) {
	case *GetRequest_PersonRequest:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersonRequest); err != nil {
			return err
		}
	case *GetRequest_CardRequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CardRequest); err != nil {
			return err
		}
	case *GetRequest_LocationRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocationRequest); err != nil {
			return err
		}
	case *GetRequest_VisitRecordRequest:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VisitRecordRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetRequest.RequestType has unexpected type %T", x)
	}
	return nil
}

func _GetRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetRequest)
	switch tag {
	case 1: // request_type.person_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetPersonRequest)
		err := b.DecodeMessage(msg)
		m.RequestType = &GetRequest_PersonRequest{msg}
		return true, err
	case 2: // request_type.card_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetCardRequest)
		err := b.DecodeMessage(msg)
		m.RequestType = &GetRequest_CardRequest{msg}
		return true, err
	case 3: // request_type.location_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetLocationRequest)
		err := b.DecodeMessage(msg)
		m.RequestType = &GetRequest_LocationRequest{msg}
		return true, err
	case 4: // request_type.visit_record_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetVisitRecordRequest)
		err := b.DecodeMessage(msg)
		m.RequestType = &GetRequest_VisitRecordRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetRequest)
	// request_type
	switch x := m.RequestType.(type) {
	case *GetRequest_PersonRequest:
		s := proto.Size(x.PersonRequest)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetRequest_CardRequest:
		s := proto.Size(x.CardRequest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetRequest_LocationRequest:
		s := proto.Size(x.LocationRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetRequest_VisitRecordRequest:
		s := proto.Size(x.VisitRecordRequest)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CommitRequest struct {
	Mutations []*Mutation `protobuf:"bytes,1,rep,name=mutations" json:"mutations,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommitRequest) GetMutations() []*Mutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

type CommitResponse struct {
	MutationResults []*MutationResult `protobuf:"bytes,1,rep,name=mutation_results,json=mutationResults" json:"mutation_results,omitempty"`
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommitResponse) GetMutationResults() []*MutationResult {
	if m != nil {
		return m.MutationResults
	}
	return nil
}

type MutationResult struct {
	Key   *Key   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MutationResult) Reset()                    { *m = MutationResult{} }
func (m *MutationResult) String() string            { return proto.CompactTextString(m) }
func (*MutationResult) ProtoMessage()               {}
func (*MutationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MutationResult) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type Mutation struct {
	// Types that are valid to be assigned to Operation:
	//	*Mutation_Insert
	//	*Mutation_Update
	//	*Mutation_Delete
	Operation isMutation_Operation `protobuf_oneof:"operation"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isMutation_Operation interface {
	isMutation_Operation()
}

type Mutation_Insert struct {
	Insert *Entity `protobuf:"bytes,1,opt,name=insert,oneof"`
}
type Mutation_Update struct {
	Update *Entity `protobuf:"bytes,2,opt,name=update,oneof"`
}
type Mutation_Delete struct {
	Delete *Key `protobuf:"bytes,3,opt,name=delete,oneof"`
}

func (*Mutation_Insert) isMutation_Operation() {}
func (*Mutation_Update) isMutation_Operation() {}
func (*Mutation_Delete) isMutation_Operation() {}

func (m *Mutation) GetOperation() isMutation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *Mutation) GetInsert() *Entity {
	if x, ok := m.GetOperation().(*Mutation_Insert); ok {
		return x.Insert
	}
	return nil
}

func (m *Mutation) GetUpdate() *Entity {
	if x, ok := m.GetOperation().(*Mutation_Update); ok {
		return x.Update
	}
	return nil
}

func (m *Mutation) GetDelete() *Key {
	if x, ok := m.GetOperation().(*Mutation_Delete); ok {
		return x.Delete
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Mutation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Mutation_OneofMarshaler, _Mutation_OneofUnmarshaler, _Mutation_OneofSizer, []interface{}{
		(*Mutation_Insert)(nil),
		(*Mutation_Update)(nil),
		(*Mutation_Delete)(nil),
	}
}

func _Mutation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Mutation)
	// operation
	switch x := m.Operation.(type) {
	case *Mutation_Insert:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Insert); err != nil {
			return err
		}
	case *Mutation_Update:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *Mutation_Delete:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Delete); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Mutation.Operation has unexpected type %T", x)
	}
	return nil
}

func _Mutation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Mutation)
	switch tag {
	case 1: // operation.insert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Entity)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Insert{msg}
		return true, err
	case 2: // operation.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Entity)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Update{msg}
		return true, err
	case 3: // operation.delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Key)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Delete{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Mutation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Mutation)
	// operation
	switch x := m.Operation.(type) {
	case *Mutation_Insert:
		s := proto.Size(x.Insert)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Delete:
		s := proto.Size(x.Delete)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Entity struct {
	// Types that are valid to be assigned to ValueType:
	//	*Entity_Card
	//	*Entity_Person
	//	*Entity_VisitRecord
	//	*Entity_Location
	//	*Entity_Photo
	ValueType isEntity_ValueType `protobuf_oneof:"value_type"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isEntity_ValueType interface {
	isEntity_ValueType()
}

type Entity_Card struct {
	Card *Card `protobuf:"bytes,1,opt,name=card,oneof"`
}
type Entity_Person struct {
	Person *Person `protobuf:"bytes,2,opt,name=person,oneof"`
}
type Entity_VisitRecord struct {
	VisitRecord *VisitRecord `protobuf:"bytes,3,opt,name=visit_record,json=visitRecord,oneof"`
}
type Entity_Location struct {
	Location *Location `protobuf:"bytes,4,opt,name=location,oneof"`
}
type Entity_Photo struct {
	Photo *Photo `protobuf:"bytes,5,opt,name=Photo,json=photo,oneof"`
}

func (*Entity_Card) isEntity_ValueType()        {}
func (*Entity_Person) isEntity_ValueType()      {}
func (*Entity_VisitRecord) isEntity_ValueType() {}
func (*Entity_Location) isEntity_ValueType()    {}
func (*Entity_Photo) isEntity_ValueType()       {}

func (m *Entity) GetValueType() isEntity_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *Entity) GetCard() *Card {
	if x, ok := m.GetValueType().(*Entity_Card); ok {
		return x.Card
	}
	return nil
}

func (m *Entity) GetPerson() *Person {
	if x, ok := m.GetValueType().(*Entity_Person); ok {
		return x.Person
	}
	return nil
}

func (m *Entity) GetVisitRecord() *VisitRecord {
	if x, ok := m.GetValueType().(*Entity_VisitRecord); ok {
		return x.VisitRecord
	}
	return nil
}

func (m *Entity) GetLocation() *Location {
	if x, ok := m.GetValueType().(*Entity_Location); ok {
		return x.Location
	}
	return nil
}

func (m *Entity) GetPhoto() *Photo {
	if x, ok := m.GetValueType().(*Entity_Photo); ok {
		return x.Photo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Entity) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Entity_OneofMarshaler, _Entity_OneofUnmarshaler, _Entity_OneofSizer, []interface{}{
		(*Entity_Card)(nil),
		(*Entity_Person)(nil),
		(*Entity_VisitRecord)(nil),
		(*Entity_Location)(nil),
		(*Entity_Photo)(nil),
	}
}

func _Entity_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Entity)
	// value_type
	switch x := m.ValueType.(type) {
	case *Entity_Card:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Card); err != nil {
			return err
		}
	case *Entity_Person:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Person); err != nil {
			return err
		}
	case *Entity_VisitRecord:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VisitRecord); err != nil {
			return err
		}
	case *Entity_Location:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Location); err != nil {
			return err
		}
	case *Entity_Photo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Photo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Entity.ValueType has unexpected type %T", x)
	}
	return nil
}

func _Entity_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Entity)
	switch tag {
	case 1: // value_type.card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Card)
		err := b.DecodeMessage(msg)
		m.ValueType = &Entity_Card{msg}
		return true, err
	case 2: // value_type.person
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Person)
		err := b.DecodeMessage(msg)
		m.ValueType = &Entity_Person{msg}
		return true, err
	case 3: // value_type.visit_record
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VisitRecord)
		err := b.DecodeMessage(msg)
		m.ValueType = &Entity_VisitRecord{msg}
		return true, err
	case 4: // value_type.location
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Location)
		err := b.DecodeMessage(msg)
		m.ValueType = &Entity_Location{msg}
		return true, err
	case 5: // value_type.Photo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Photo)
		err := b.DecodeMessage(msg)
		m.ValueType = &Entity_Photo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Entity_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Entity)
	// value_type
	switch x := m.ValueType.(type) {
	case *Entity_Card:
		s := proto.Size(x.Card)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_Person:
		s := proto.Size(x.Person)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_VisitRecord:
		s := proto.Size(x.VisitRecord)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_Location:
		s := proto.Size(x.Location)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_Photo:
		s := proto.Size(x.Photo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Entities struct {
	Items []*Entity `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Entities) Reset()                    { *m = Entities{} }
func (m *Entities) String() string            { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()               {}
func (*Entities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Entities) GetItems() []*Entity {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetPersonRequest struct {
	SearchText string `protobuf:"bytes,1,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	FirstName  string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName   string `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Card       string `protobuf:"bytes,4,opt,name=card" json:"card,omitempty"`
	// TODO Photo    photo
	// TODO Rights   rights
	Locations []string `protobuf:"bytes,5,rep,name=locations" json:"locations,omitempty"`
	Page      *Page    `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *GetPersonRequest) Reset()                    { *m = GetPersonRequest{} }
func (m *GetPersonRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPersonRequest) ProtoMessage()               {}
func (*GetPersonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetPersonRequest) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type GetLocationRequest struct {
	SearchText string `protobuf:"bytes,1,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	DeviceName string `protobuf:"bytes,4,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	Page       *Page  `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *GetLocationRequest) Reset()                    { *m = GetLocationRequest{} }
func (m *GetLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLocationRequest) ProtoMessage()               {}
func (*GetLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetLocationRequest) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type GetVisitRecordRequest struct {
	SearchText   string      `protobuf:"bytes,1,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	State        AccessState `protobuf:"varint,2,opt,name=state,enum=Bioskynet.AccessState" json:"state,omitempty"`
	Locations    []string    `protobuf:"bytes,3,rep,name=locations" json:"locations,omitempty"`
	Persons      []string    `protobuf:"bytes,4,rep,name=persons" json:"persons,omitempty"`
	DatetimeFrom int64       `protobuf:"varint,5,opt,name=datetime_from,json=datetimeFrom" json:"datetime_from,omitempty"`
	DatetimeTo   int64       `protobuf:"varint,6,opt,name=datetime_to,json=datetimeTo" json:"datetime_to,omitempty"`
	Card         string      `protobuf:"bytes,7,opt,name=card" json:"card,omitempty"`
	Page         *Page       `protobuf:"bytes,8,opt,name=page" json:"page,omitempty"`
}

func (m *GetVisitRecordRequest) Reset()                    { *m = GetVisitRecordRequest{} }
func (m *GetVisitRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVisitRecordRequest) ProtoMessage()               {}
func (*GetVisitRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetVisitRecordRequest) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type Page struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Size  int32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetCardRequest struct {
	SearchText       string   `protobuf:"bytes,1,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	UniqueIdentifier string   `protobuf:"bytes,2,opt,name=unique_identifier,json=uniqueIdentifier" json:"unique_identifier,omitempty"`
	Owners           []string `protobuf:"bytes,3,rep,name=owners" json:"owners,omitempty"`
	Page             *Page    `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *GetCardRequest) Reset()                    { *m = GetCardRequest{} }
func (m *GetCardRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCardRequest) ProtoMessage()               {}
func (*GetCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetCardRequest) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type PopulationCreationResponse struct {
	Id    int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Faces []*Faces `protobuf:"bytes,2,rep,name=faces" json:"faces,omitempty"`
}

func (m *PopulationCreationResponse) Reset()                    { *m = PopulationCreationResponse{} }
func (m *PopulationCreationResponse) String() string            { return proto.CompactTextString(m) }
func (*PopulationCreationResponse) ProtoMessage()               {}
func (*PopulationCreationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PopulationCreationResponse) GetFaces() []*Faces {
	if m != nil {
		return m.Faces
	}
	return nil
}

type VerificationData struct {
	TargetImage        *Photo `protobuf:"bytes,1,opt,name=target_image,json=targetImage" json:"target_image,omitempty"`
	ComparisonImage    *Photo `protobuf:"bytes,2,opt,name=comparison_image,json=comparisonImage" json:"comparison_image,omitempty"`
	ComparisonPersonId int64  `protobuf:"varint,3,opt,name=comparison_person_id,json=comparisonPersonId" json:"comparison_person_id,omitempty"`
}

func (m *VerificationData) Reset()                    { *m = VerificationData{} }
func (m *VerificationData) String() string            { return proto.CompactTextString(m) }
func (*VerificationData) ProtoMessage()               {}
func (*VerificationData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VerificationData) GetTargetImage() *Photo {
	if m != nil {
		return m.TargetImage
	}
	return nil
}

func (m *VerificationData) GetComparisonImage() *Photo {
	if m != nil {
		return m.ComparisonImage
	}
	return nil
}

type IdentificationData struct {
	TargetImage  *Photo `protobuf:"bytes,1,opt,name=target_image,json=targetImage" json:"target_image,omitempty"`
	PopulationId int64  `protobuf:"varint,2,opt,name=population_id,json=populationId" json:"population_id,omitempty"`
}

func (m *IdentificationData) Reset()                    { *m = IdentificationData{} }
func (m *IdentificationData) String() string            { return proto.CompactTextString(m) }
func (*IdentificationData) ProtoMessage()               {}
func (*IdentificationData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IdentificationData) GetTargetImage() *Photo {
	if m != nil {
		return m.TargetImage
	}
	return nil
}

type FaceSearchResponse struct {
	Faces   []*Faces   `protobuf:"bytes,1,rep,name=faces" json:"faces,omitempty"`
	Matches []*Matches `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
}

func (m *FaceSearchResponse) Reset()                    { *m = FaceSearchResponse{} }
func (m *FaceSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*FaceSearchResponse) ProtoMessage()               {}
func (*FaceSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FaceSearchResponse) GetFaces() []*Faces {
	if m != nil {
		return m.Faces
	}
	return nil
}

func (m *FaceSearchResponse) GetMatches() []*Matches {
	if m != nil {
		return m.Matches
	}
	return nil
}

type FrameBytes struct {
	FrameData []byte `protobuf:"bytes,1,opt,name=frameData,proto3" json:"frameData,omitempty"`
}

func (m *FrameBytes) Reset()                    { *m = FrameBytes{} }
func (m *FrameBytes) String() string            { return proto.CompactTextString(m) }
func (*FrameBytes) ProtoMessage()               {}
func (*FrameBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type Faces struct {
	Faces []*FaceCharacteristic `protobuf:"bytes,1,rep,name=Faces,json=faces" json:"Faces,omitempty"`
}

func (m *Faces) Reset()                    { *m = Faces{} }
func (m *Faces) String() string            { return proto.CompactTextString(m) }
func (*Faces) ProtoMessage()               {}
func (*Faces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Faces) GetFaces() []*FaceCharacteristic {
	if m != nil {
		return m.Faces
	}
	return nil
}

type FaceCharacteristic struct {
	Id         *Key    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Box        *Box    `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	Confidence float32 `protobuf:"fixed32,3,opt,name=confidence" json:"confidence,omitempty"`
	PersonId   int64   `protobuf:"varint,4,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PhotoId    int64   `protobuf:"varint,5,opt,name=photo_id,json=photoId" json:"photo_id,omitempty"`
}

func (m *FaceCharacteristic) Reset()                    { *m = FaceCharacteristic{} }
func (m *FaceCharacteristic) String() string            { return proto.CompactTextString(m) }
func (*FaceCharacteristic) ProtoMessage()               {}
func (*FaceCharacteristic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FaceCharacteristic) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FaceCharacteristic) GetBox() *Box {
	if m != nil {
		return m.Box
	}
	return nil
}

type Match struct {
	FaceId *Key    `protobuf:"bytes,2,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	Match  float32 `protobuf:"fixed32,3,opt,name=match" json:"match,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Match) GetFaceId() *Key {
	if m != nil {
		return m.FaceId
	}
	return nil
}

type Matches struct {
	FaceId  *Key     `protobuf:"bytes,1,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	Matches []*Match `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
}

func (m *Matches) Reset()                    { *m = Matches{} }
func (m *Matches) String() string            { return proto.CompactTextString(m) }
func (*Matches) ProtoMessage()               {}
func (*Matches) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Matches) GetFaceId() *Key {
	if m != nil {
		return m.FaceId
	}
	return nil
}

func (m *Matches) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Card struct {
	UniqueIdentifier *Key `protobuf:"bytes,1,opt,name=unique_identifier,json=uniqueIdentifier" json:"unique_identifier,omitempty"`
	OwnerId          *Key `protobuf:"bytes,2,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Card) GetUniqueIdentifier() *Key {
	if m != nil {
		return m.UniqueIdentifier
	}
	return nil
}

func (m *Card) GetOwnerId() *Key {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

type Cards struct {
	Items []*Card `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Count int64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Cards) Reset()                    { *m = Cards{} }
func (m *Cards) String() string            { return proto.CompactTextString(m) }
func (*Cards) ProtoMessage()               {}
func (*Cards) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Cards) GetItems() []*Card {
	if m != nil {
		return m.Items
	}
	return nil
}

type MessageBytes struct {
	Data []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type DataType `protobuf:"varint,2,opt,name=type,enum=Bioskynet.DataType" json:"type,omitempty"`
}

func (m *MessageBytes) Reset()                    { *m = MessageBytes{} }
func (m *MessageBytes) String() string            { return proto.CompactTextString(m) }
func (*MessageBytes) ProtoMessage()               {}
func (*MessageBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type Key struct {
	// Types that are valid to be assigned to IdType:
	//	*Key_Id
	//	*Key_Guid
	IdType isKey_IdType `protobuf_oneof:"id_type"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type isKey_IdType interface {
	isKey_IdType()
}

type Key_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,oneof"`
}
type Key_Guid struct {
	Guid string `protobuf:"bytes,2,opt,name=guid,oneof"`
}

func (*Key_Id) isKey_IdType()   {}
func (*Key_Guid) isKey_IdType() {}

func (m *Key) GetIdType() isKey_IdType {
	if m != nil {
		return m.IdType
	}
	return nil
}

func (m *Key) GetId() int64 {
	if x, ok := m.GetIdType().(*Key_Id); ok {
		return x.Id
	}
	return 0
}

func (m *Key) GetGuid() string {
	if x, ok := m.GetIdType().(*Key_Guid); ok {
		return x.Guid
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Key) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Key_OneofMarshaler, _Key_OneofUnmarshaler, _Key_OneofSizer, []interface{}{
		(*Key_Id)(nil),
		(*Key_Guid)(nil),
	}
}

func _Key_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Key)
	// id_type
	switch x := m.IdType.(type) {
	case *Key_Id:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *Key_Guid:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Guid)
	case nil:
	default:
		return fmt.Errorf("Key.IdType has unexpected type %T", x)
	}
	return nil
}

func _Key_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Key)
	switch tag {
	case 1: // id_type.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.IdType = &Key_Id{int64(x)}
		return true, err
	case 2: // id_type.guid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IdType = &Key_Guid{x}
		return true, err
	default:
		return false, nil
	}
}

func _Key_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Key)
	// id_type
	switch x := m.IdType.(type) {
	case *Key_Id:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *Key_Guid:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Guid)))
		n += len(x.Guid)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AccessDevice struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SerialNumber uint64 `protobuf:"fixed64,2,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
}

func (m *AccessDevice) Reset()                    { *m = AccessDevice{} }
func (m *AccessDevice) String() string            { return proto.CompactTextString(m) }
func (*AccessDevice) ProtoMessage()               {}
func (*AccessDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type DeviceUpdate struct {
	// Types that are valid to be assigned to Update:
	//	*DeviceUpdate_ConnectedDevices
	//	*DeviceUpdate_DeviceStateMsg
	Update isDeviceUpdate_Update `protobuf_oneof:"update"`
}

func (m *DeviceUpdate) Reset()                    { *m = DeviceUpdate{} }
func (m *DeviceUpdate) String() string            { return proto.CompactTextString(m) }
func (*DeviceUpdate) ProtoMessage()               {}
func (*DeviceUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type isDeviceUpdate_Update interface {
	isDeviceUpdate_Update()
}

type DeviceUpdate_ConnectedDevices struct {
	ConnectedDevices *ConnectedDevices `protobuf:"bytes,1,opt,name=connected_devices,json=connectedDevices,oneof"`
}
type DeviceUpdate_DeviceStateMsg struct {
	DeviceStateMsg *DeviceStateMessage `protobuf:"bytes,2,opt,name=device_state_msg,json=deviceStateMsg,oneof"`
}

func (*DeviceUpdate_ConnectedDevices) isDeviceUpdate_Update() {}
func (*DeviceUpdate_DeviceStateMsg) isDeviceUpdate_Update()   {}

func (m *DeviceUpdate) GetUpdate() isDeviceUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *DeviceUpdate) GetConnectedDevices() *ConnectedDevices {
	if x, ok := m.GetUpdate().(*DeviceUpdate_ConnectedDevices); ok {
		return x.ConnectedDevices
	}
	return nil
}

func (m *DeviceUpdate) GetDeviceStateMsg() *DeviceStateMessage {
	if x, ok := m.GetUpdate().(*DeviceUpdate_DeviceStateMsg); ok {
		return x.DeviceStateMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeviceUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeviceUpdate_OneofMarshaler, _DeviceUpdate_OneofUnmarshaler, _DeviceUpdate_OneofSizer, []interface{}{
		(*DeviceUpdate_ConnectedDevices)(nil),
		(*DeviceUpdate_DeviceStateMsg)(nil),
	}
}

func _DeviceUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeviceUpdate)
	// update
	switch x := m.Update.(type) {
	case *DeviceUpdate_ConnectedDevices:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnectedDevices); err != nil {
			return err
		}
	case *DeviceUpdate_DeviceStateMsg:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceStateMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeviceUpdate.Update has unexpected type %T", x)
	}
	return nil
}

func _DeviceUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeviceUpdate)
	switch tag {
	case 1: // update.connected_devices
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnectedDevices)
		err := b.DecodeMessage(msg)
		m.Update = &DeviceUpdate_ConnectedDevices{msg}
		return true, err
	case 2: // update.device_state_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceStateMessage)
		err := b.DecodeMessage(msg)
		m.Update = &DeviceUpdate_DeviceStateMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeviceUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeviceUpdate)
	// update
	switch x := m.Update.(type) {
	case *DeviceUpdate_ConnectedDevices:
		s := proto.Size(x.ConnectedDevices)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeviceUpdate_DeviceStateMsg:
		s := proto.Size(x.DeviceStateMsg)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConnectedDevices struct {
	LocationId *Key      `protobuf:"bytes,1,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Devices    []*Device `protobuf:"bytes,2,rep,name=devices" json:"devices,omitempty"`
}

func (m *ConnectedDevices) Reset()                    { *m = ConnectedDevices{} }
func (m *ConnectedDevices) String() string            { return proto.CompactTextString(m) }
func (*ConnectedDevices) ProtoMessage()               {}
func (*ConnectedDevices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ConnectedDevices) GetLocationId() *Key {
	if m != nil {
		return m.LocationId
	}
	return nil
}

func (m *ConnectedDevices) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type Device struct {
	DeviceType  DeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,enum=Bioskynet.DeviceType" json:"device_type,omitempty"`
	DeviceNames string     `protobuf:"bytes,2,opt,name=device_names,json=deviceNames" json:"device_names,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

// To notify about device update
type DeviceStateMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*DeviceStateMessage_GenericDeviceStateMsg
	//	*DeviceStateMessage_AccessDeviceStateMsg
	Msg isDeviceStateMessage_Msg `protobuf_oneof:"msg"`
}

func (m *DeviceStateMessage) Reset()                    { *m = DeviceStateMessage{} }
func (m *DeviceStateMessage) String() string            { return proto.CompactTextString(m) }
func (*DeviceStateMessage) ProtoMessage()               {}
func (*DeviceStateMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type isDeviceStateMessage_Msg interface {
	isDeviceStateMessage_Msg()
}

type DeviceStateMessage_GenericDeviceStateMsg struct {
	GenericDeviceStateMsg *GenericDeviceStateMsg `protobuf:"bytes,1,opt,name=generic_device_state_msg,json=genericDeviceStateMsg,oneof"`
}
type DeviceStateMessage_AccessDeviceStateMsg struct {
	AccessDeviceStateMsg *AccessDeviceStateMsg `protobuf:"bytes,2,opt,name=access_device_state_msg,json=accessDeviceStateMsg,oneof"`
}

func (*DeviceStateMessage_GenericDeviceStateMsg) isDeviceStateMessage_Msg() {}
func (*DeviceStateMessage_AccessDeviceStateMsg) isDeviceStateMessage_Msg()  {}

func (m *DeviceStateMessage) GetMsg() isDeviceStateMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *DeviceStateMessage) GetGenericDeviceStateMsg() *GenericDeviceStateMsg {
	if x, ok := m.GetMsg().(*DeviceStateMessage_GenericDeviceStateMsg); ok {
		return x.GenericDeviceStateMsg
	}
	return nil
}

func (m *DeviceStateMessage) GetAccessDeviceStateMsg() *AccessDeviceStateMsg {
	if x, ok := m.GetMsg().(*DeviceStateMessage_AccessDeviceStateMsg); ok {
		return x.AccessDeviceStateMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeviceStateMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeviceStateMessage_OneofMarshaler, _DeviceStateMessage_OneofUnmarshaler, _DeviceStateMessage_OneofSizer, []interface{}{
		(*DeviceStateMessage_GenericDeviceStateMsg)(nil),
		(*DeviceStateMessage_AccessDeviceStateMsg)(nil),
	}
}

func _DeviceStateMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeviceStateMessage)
	// msg
	switch x := m.Msg.(type) {
	case *DeviceStateMessage_GenericDeviceStateMsg:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericDeviceStateMsg); err != nil {
			return err
		}
	case *DeviceStateMessage_AccessDeviceStateMsg:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccessDeviceStateMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeviceStateMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _DeviceStateMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeviceStateMessage)
	switch tag {
	case 1: // msg.generic_device_state_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericDeviceStateMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &DeviceStateMessage_GenericDeviceStateMsg{msg}
		return true, err
	case 2: // msg.access_device_state_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccessDeviceStateMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &DeviceStateMessage_AccessDeviceStateMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeviceStateMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeviceStateMessage)
	// msg
	switch x := m.Msg.(type) {
	case *DeviceStateMessage_GenericDeviceStateMsg:
		s := proto.Size(x.GenericDeviceStateMsg)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeviceStateMessage_AccessDeviceStateMsg:
		s := proto.Size(x.AccessDeviceStateMsg)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GenericDeviceStateMsg struct {
	LocationId *Key        `protobuf:"bytes,1,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Type       DeviceType  `protobuf:"varint,2,opt,name=type,enum=Bioskynet.DeviceType" json:"type,omitempty"`
	State      DeviceState `protobuf:"varint,3,opt,name=state,enum=Bioskynet.DeviceState" json:"state,omitempty"`
	Message    string      `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *GenericDeviceStateMsg) Reset()                    { *m = GenericDeviceStateMsg{} }
func (m *GenericDeviceStateMsg) String() string            { return proto.CompactTextString(m) }
func (*GenericDeviceStateMsg) ProtoMessage()               {}
func (*GenericDeviceStateMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GenericDeviceStateMsg) GetLocationId() *Key {
	if m != nil {
		return m.LocationId
	}
	return nil
}

// Notify on door state
type AccessDeviceStateMsg struct {
	LocationId *Key `protobuf:"bytes,1,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Opened     bool `protobuf:"varint,2,opt,name=opened" json:"opened,omitempty"`
}

func (m *AccessDeviceStateMsg) Reset()                    { *m = AccessDeviceStateMsg{} }
func (m *AccessDeviceStateMsg) String() string            { return proto.CompactTextString(m) }
func (*AccessDeviceStateMsg) ProtoMessage()               {}
func (*AccessDeviceStateMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AccessDeviceStateMsg) GetLocationId() *Key {
	if m != nil {
		return m.LocationId
	}
	return nil
}

type Position struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type Box struct {
	Begin  *Position `protobuf:"bytes,1,opt,name=begin" json:"begin,omitempty"`
	Width  int32     `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height int32     `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *Box) Reset()                    { *m = Box{} }
func (m *Box) String() string            { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()               {}
func (*Box) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Box) GetBegin() *Position {
	if m != nil {
		return m.Begin
	}
	return nil
}

type Location struct {
	Id             *Key          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description    string        `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	UnitMacAddress string        `protobuf:"bytes,4,opt,name=unit_mac_address,json=unitMacAddress" json:"unit_mac_address,omitempty"`
	AccessDevice   *AccessDevice `protobuf:"bytes,5,opt,name=access_device,json=accessDevice" json:"access_device,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Location) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Location) GetAccessDevice() *AccessDevice {
	if m != nil {
		return m.AccessDevice
	}
	return nil
}

type Locations struct {
	Items []*Location `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Count int64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Locations) Reset()                    { *m = Locations{} }
func (m *Locations) String() string            { return proto.CompactTextString(m) }
func (*Locations) ProtoMessage()               {}
func (*Locations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Locations) GetItems() []*Location {
	if m != nil {
		return m.Items
	}
	return nil
}

type Person struct {
	Id        *Key     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FirstName string   `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string   `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Photos    []*Photo `protobuf:"bytes,4,rep,name=photos" json:"photos,omitempty"`
	Cards     []*Card  `protobuf:"bytes,5,rep,name=cards" json:"cards,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Person) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Person) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *Person) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

type Persons struct {
	Items []*Person `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Count int64     `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Persons) Reset()                    { *m = Persons{} }
func (m *Persons) String() string            { return proto.CompactTextString(m) }
func (*Persons) ProtoMessage()               {}
func (*Persons) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Persons) GetItems() []*Person {
	if m != nil {
		return m.Items
	}
	return nil
}

type Photo struct {
	Id            *Key          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url           string        `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Width         int32         `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height        int32         `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Purpose       Purpose       `protobuf:"varint,5,opt,name=purpose,enum=Bioskynet.Purpose" json:"purpose,omitempty"`
	BiometricType BiometricType `protobuf:"varint,6,opt,name=biometric_type,json=biometricType,enum=Bioskynet.BiometricType" json:"biometric_type,omitempty"`
	OwnerId       *Key          `protobuf:"bytes,7,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Photo) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Photo) GetOwnerId() *Key {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

type Photos struct {
	Photos []*Photo `protobuf:"bytes,1,rep,name=photos" json:"photos,omitempty"`
	Count  int64    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Photos) Reset()                    { *m = Photos{} }
func (m *Photos) String() string            { return proto.CompactTextString(m) }
func (*Photos) ProtoMessage()               {}
func (*Photos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Photos) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

type Unit struct {
	ConnectedUnit *ConnectedUnit `protobuf:"bytes,1,opt,name=connected_unit,json=connectedUnit" json:"connected_unit,omitempty"`
	HeartbeatTime int64          `protobuf:"varint,2,opt,name=heartbeat_time,json=heartbeatTime" json:"heartbeat_time,omitempty"`
	Locations     *Locations     `protobuf:"bytes,3,opt,name=locations" json:"locations,omitempty"`
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Unit) GetConnectedUnit() *ConnectedUnit {
	if m != nil {
		return m.ConnectedUnit
	}
	return nil
}

func (m *Unit) GetLocations() *Locations {
	if m != nil {
		return m.Locations
	}
	return nil
}

type ConnectedUnit struct {
	IpAddress  string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *ConnectedUnit) Reset()                    { *m = ConnectedUnit{} }
func (m *ConnectedUnit) String() string            { return proto.CompactTextString(m) }
func (*ConnectedUnit) ProtoMessage()               {}
func (*ConnectedUnit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type UpdatedUnit struct {
	CurrentUnit *Unit     `protobuf:"bytes,1,opt,name=current_unit,json=currentUnit" json:"current_unit,omitempty"`
	State       UnitState `protobuf:"varint,2,opt,name=state,enum=Bioskynet.UnitState" json:"state,omitempty"`
}

func (m *UpdatedUnit) Reset()                    { *m = UpdatedUnit{} }
func (m *UpdatedUnit) String() string            { return proto.CompactTextString(m) }
func (*UpdatedUnit) ProtoMessage()               {}
func (*UpdatedUnit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *UpdatedUnit) GetCurrentUnit() *Unit {
	if m != nil {
		return m.CurrentUnit
	}
	return nil
}

type UpdatedUnits struct {
	Items []*UpdatedUnit `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *UpdatedUnits) Reset()                    { *m = UpdatedUnits{} }
func (m *UpdatedUnits) String() string            { return proto.CompactTextString(m) }
func (*UpdatedUnits) ProtoMessage()               {}
func (*UpdatedUnits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *UpdatedUnits) GetItems() []*UpdatedUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

type Units struct {
	Items []*Unit `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Units) Reset()                    { *m = Units{} }
func (m *Units) String() string            { return proto.CompactTextString(m) }
func (*Units) ProtoMessage()               {}
func (*Units) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *Units) GetItems() []*Unit {
	if m != nil {
		return m.Items
	}
	return nil
}

type UnitConfiguration struct {
	MasterIpAddress string `protobuf:"bytes,1,opt,name=master_ip_address,json=masterIpAddress" json:"master_ip_address,omitempty"`
}

func (m *UnitConfiguration) Reset()                    { *m = UnitConfiguration{} }
func (m *UnitConfiguration) String() string            { return proto.CompactTextString(m) }
func (*UnitConfiguration) ProtoMessage()               {}
func (*UnitConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type UnitLocationState struct {
	State LocationState `protobuf:"varint,1,opt,name=state,enum=Bioskynet.LocationState" json:"state,omitempty"`
}

func (m *UnitLocationState) Reset()                    { *m = UnitLocationState{} }
func (m *UnitLocationState) String() string            { return proto.CompactTextString(m) }
func (*UnitLocationState) ProtoMessage()               {}
func (*UnitLocationState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

type VisitRecord struct {
	Id         *Key        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PersonId   *Key        `protobuf:"bytes,2,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	LocationId *Key        `protobuf:"bytes,3,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Time       int64       `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Card       *Card       `protobuf:"bytes,5,opt,name=card" json:"card,omitempty"`
	State      AccessState `protobuf:"varint,6,opt,name=state,enum=Bioskynet.AccessState" json:"state,omitempty"`
}

func (m *VisitRecord) Reset()                    { *m = VisitRecord{} }
func (m *VisitRecord) String() string            { return proto.CompactTextString(m) }
func (*VisitRecord) ProtoMessage()               {}
func (*VisitRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *VisitRecord) GetId() *Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VisitRecord) GetPersonId() *Key {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *VisitRecord) GetLocationId() *Key {
	if m != nil {
		return m.LocationId
	}
	return nil
}

func (m *VisitRecord) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

type VisitRecords struct {
	Items []*VisitRecord `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Count int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *VisitRecords) Reset()                    { *m = VisitRecords{} }
func (m *VisitRecords) String() string            { return proto.CompactTextString(m) }
func (*VisitRecords) ProtoMessage()               {}
func (*VisitRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *VisitRecords) GetItems() []*VisitRecord {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*HeartbeatMessage)(nil), "Bioskynet.HeartbeatMessage")
	proto.RegisterType((*GetResponse)(nil), "Bioskynet.GetResponse")
	proto.RegisterType((*GetRequest)(nil), "Bioskynet.GetRequest")
	proto.RegisterType((*CommitRequest)(nil), "Bioskynet.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "Bioskynet.CommitResponse")
	proto.RegisterType((*MutationResult)(nil), "Bioskynet.MutationResult")
	proto.RegisterType((*Mutation)(nil), "Bioskynet.Mutation")
	proto.RegisterType((*Entity)(nil), "Bioskynet.Entity")
	proto.RegisterType((*Entities)(nil), "Bioskynet.Entities")
	proto.RegisterType((*GetPersonRequest)(nil), "Bioskynet.GetPersonRequest")
	proto.RegisterType((*GetLocationRequest)(nil), "Bioskynet.GetLocationRequest")
	proto.RegisterType((*GetVisitRecordRequest)(nil), "Bioskynet.GetVisitRecordRequest")
	proto.RegisterType((*Page)(nil), "Bioskynet.Page")
	proto.RegisterType((*GetCardRequest)(nil), "Bioskynet.GetCardRequest")
	proto.RegisterType((*PopulationCreationResponse)(nil), "Bioskynet.PopulationCreationResponse")
	proto.RegisterType((*VerificationData)(nil), "Bioskynet.VerificationData")
	proto.RegisterType((*IdentificationData)(nil), "Bioskynet.IdentificationData")
	proto.RegisterType((*FaceSearchResponse)(nil), "Bioskynet.FaceSearchResponse")
	proto.RegisterType((*FrameBytes)(nil), "Bioskynet.FrameBytes")
	proto.RegisterType((*Faces)(nil), "Bioskynet.Faces")
	proto.RegisterType((*FaceCharacteristic)(nil), "Bioskynet.FaceCharacteristic")
	proto.RegisterType((*Match)(nil), "Bioskynet.Match")
	proto.RegisterType((*Matches)(nil), "Bioskynet.Matches")
	proto.RegisterType((*Card)(nil), "Bioskynet.Card")
	proto.RegisterType((*Cards)(nil), "Bioskynet.Cards")
	proto.RegisterType((*MessageBytes)(nil), "Bioskynet.MessageBytes")
	proto.RegisterType((*Key)(nil), "Bioskynet.Key")
	proto.RegisterType((*AccessDevice)(nil), "Bioskynet.AccessDevice")
	proto.RegisterType((*DeviceUpdate)(nil), "Bioskynet.DeviceUpdate")
	proto.RegisterType((*ConnectedDevices)(nil), "Bioskynet.ConnectedDevices")
	proto.RegisterType((*Device)(nil), "Bioskynet.Device")
	proto.RegisterType((*DeviceStateMessage)(nil), "Bioskynet.DeviceStateMessage")
	proto.RegisterType((*GenericDeviceStateMsg)(nil), "Bioskynet.GenericDeviceStateMsg")
	proto.RegisterType((*AccessDeviceStateMsg)(nil), "Bioskynet.AccessDeviceStateMsg")
	proto.RegisterType((*Position)(nil), "Bioskynet.Position")
	proto.RegisterType((*Box)(nil), "Bioskynet.Box")
	proto.RegisterType((*Location)(nil), "Bioskynet.Location")
	proto.RegisterType((*Locations)(nil), "Bioskynet.Locations")
	proto.RegisterType((*Person)(nil), "Bioskynet.Person")
	proto.RegisterType((*Persons)(nil), "Bioskynet.Persons")
	proto.RegisterType((*Photo)(nil), "Bioskynet.Photo")
	proto.RegisterType((*Photos)(nil), "Bioskynet.Photos")
	proto.RegisterType((*Unit)(nil), "Bioskynet.Unit")
	proto.RegisterType((*ConnectedUnit)(nil), "Bioskynet.ConnectedUnit")
	proto.RegisterType((*UpdatedUnit)(nil), "Bioskynet.UpdatedUnit")
	proto.RegisterType((*UpdatedUnits)(nil), "Bioskynet.UpdatedUnits")
	proto.RegisterType((*Units)(nil), "Bioskynet.Units")
	proto.RegisterType((*UnitConfiguration)(nil), "Bioskynet.UnitConfiguration")
	proto.RegisterType((*UnitLocationState)(nil), "Bioskynet.UnitLocationState")
	proto.RegisterType((*VisitRecord)(nil), "Bioskynet.VisitRecord")
	proto.RegisterType((*VisitRecords)(nil), "Bioskynet.VisitRecords")
	proto.RegisterEnum("Bioskynet.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("Bioskynet.BiometricType", BiometricType_name, BiometricType_value)
	proto.RegisterEnum("Bioskynet.EyeType", EyeType_name, EyeType_value)
	proto.RegisterEnum("Bioskynet.Finger", Finger_name, Finger_value)
	proto.RegisterEnum("Bioskynet.FacialIsoComplianceTemplate", FacialIsoComplianceTemplate_name, FacialIsoComplianceTemplate_value)
	proto.RegisterEnum("Bioskynet.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("Bioskynet.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("Bioskynet.DeviceState", DeviceState_name, DeviceState_value)
	proto.RegisterEnum("Bioskynet.LocationState", LocationState_name, LocationState_value)
	proto.RegisterEnum("Bioskynet.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("Bioskynet.Rights", Rights_name, Rights_value)
	proto.RegisterEnum("Bioskynet.Purpose", Purpose_name, Purpose_value)
	proto.RegisterEnum("Bioskynet.UnitState", UnitState_name, UnitState_value)
	proto.RegisterEnum("Bioskynet.AccessState", AccessState_name, AccessState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ClientService service

type ClientServiceClient interface {
	UpdateVisitRecords(ctx context.Context, in *VisitRecords, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateUnits(ctx context.Context, in *UpdatedUnits, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	PushUpdates(ctx context.Context, in *DeviceUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type clientServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) UpdateVisitRecords(ctx context.Context, in *VisitRecords, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.ClientService/UpdateVisitRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UpdateUnits(ctx context.Context, in *UpdatedUnits, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.ClientService/UpdateUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.ClientService/UpdateLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) PushUpdates(ctx context.Context, in *DeviceUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.ClientService/PushUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientService service

type ClientServiceServer interface {
	UpdateVisitRecords(context.Context, *VisitRecords) (*google_protobuf.Empty, error)
	UpdateUnits(context.Context, *UpdatedUnits) (*google_protobuf.Empty, error)
	UpdateLocation(context.Context, *Location) (*google_protobuf.Empty, error)
	PushUpdates(context.Context, *DeviceUpdate) (*google_protobuf.Empty, error)
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_UpdateVisitRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateVisitRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.ClientService/UpdateVisitRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateVisitRecords(ctx, req.(*VisitRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UpdateUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedUnits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.ClientService/UpdateUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateUnits(ctx, req.(*UpdatedUnits))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.ClientService/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_PushUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).PushUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.ClientService/PushUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).PushUpdates(ctx, req.(*DeviceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bioskynet.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateVisitRecords",
			Handler:    _ClientService_UpdateVisitRecords_Handler,
		},
		{
			MethodName: "UpdateUnits",
			Handler:    _ClientService_UpdateUnits_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _ClientService_UpdateLocation_Handler,
		},
		{
			MethodName: "PushUpdates",
			Handler:    _ClientService_PushUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for CoordinatorService service

type CoordinatorServiceClient interface {
	Connect(ctx context.Context, in *ConnectedUnit, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Heartbeat(ctx context.Context, in *HeartbeatMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetUnits(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Units, error)
	Subscribe(ctx context.Context, in *ConnectedUnit, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Unsubscribe(ctx context.Context, in *ConnectedUnit, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Get(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error)
	Commit(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error)
	PushUpdates(ctx context.Context, in *DeviceUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type coordinatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorServiceClient(cc *grpc.ClientConn) CoordinatorServiceClient {
	return &coordinatorServiceClient{cc}
}

func (c *coordinatorServiceClient) Connect(ctx context.Context, in *ConnectedUnit, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Heartbeat(ctx context.Context, in *HeartbeatMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) GetUnits(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Units, error) {
	out := new(Units)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/GetUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Subscribe(ctx context.Context, in *ConnectedUnit, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Unsubscribe(ctx context.Context, in *ConnectedUnit, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Get(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error) {
	out := new(MessageBytes)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Commit(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error) {
	out := new(MessageBytes)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) PushUpdates(ctx context.Context, in *DeviceUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.CoordinatorService/PushUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoordinatorService service

type CoordinatorServiceServer interface {
	Connect(context.Context, *ConnectedUnit) (*google_protobuf.Empty, error)
	Heartbeat(context.Context, *HeartbeatMessage) (*google_protobuf.Empty, error)
	GetUnits(context.Context, *google_protobuf.Empty) (*Units, error)
	Subscribe(context.Context, *ConnectedUnit) (*google_protobuf.Empty, error)
	Unsubscribe(context.Context, *ConnectedUnit) (*google_protobuf.Empty, error)
	Get(context.Context, *MessageBytes) (*MessageBytes, error)
	Commit(context.Context, *MessageBytes) (*MessageBytes, error)
	PushUpdates(context.Context, *DeviceUpdate) (*google_protobuf.Empty, error)
}

func RegisterCoordinatorServiceServer(s *grpc.Server, srv CoordinatorServiceServer) {
	s.RegisterService(&_CoordinatorService_serviceDesc, srv)
}

func _CoordinatorService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectedUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Connect(ctx, req.(*ConnectedUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Heartbeat(ctx, req.(*HeartbeatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_GetUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).GetUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/GetUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).GetUnits(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectedUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Subscribe(ctx, req.(*ConnectedUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectedUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Unsubscribe(ctx, req.(*ConnectedUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Get(ctx, req.(*MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Commit(ctx, req.(*MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_PushUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).PushUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.CoordinatorService/PushUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).PushUpdates(ctx, req.(*DeviceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoordinatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bioskynet.CoordinatorService",
	HandlerType: (*CoordinatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _CoordinatorService_Connect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _CoordinatorService_Heartbeat_Handler,
		},
		{
			MethodName: "GetUnits",
			Handler:    _CoordinatorService_GetUnits_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _CoordinatorService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _CoordinatorService_Unsubscribe_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CoordinatorService_Get_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _CoordinatorService_Commit_Handler,
		},
		{
			MethodName: "PushUpdates",
			Handler:    _CoordinatorService_PushUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for DatabaseService service

type DatabaseServiceClient interface {
	Get(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error)
	Commit(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error)
}

type databaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseServiceClient(cc *grpc.ClientConn) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) Get(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error) {
	out := new(MessageBytes)
	err := grpc.Invoke(ctx, "/Bioskynet.DatabaseService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Commit(ctx context.Context, in *MessageBytes, opts ...grpc.CallOption) (*MessageBytes, error) {
	out := new(MessageBytes)
	err := grpc.Invoke(ctx, "/Bioskynet.DatabaseService/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatabaseService service

type DatabaseServiceServer interface {
	Get(context.Context, *MessageBytes) (*MessageBytes, error)
	Commit(context.Context, *MessageBytes) (*MessageBytes, error)
}

func RegisterDatabaseServiceServer(s *grpc.Server, srv DatabaseServiceServer) {
	s.RegisterService(&_DatabaseService_serviceDesc, srv)
}

func _DatabaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.DatabaseService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Get(ctx, req.(*MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.DatabaseService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Commit(ctx, req.(*MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bioskynet.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DatabaseService_Get_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _DatabaseService_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for BiometricFacialService service

type BiometricFacialServiceClient interface {
	Acquire(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Faces, error)
	CreatePopulation(ctx context.Context, in *Photos, opts ...grpc.CallOption) (*PopulationCreationResponse, error)
	Verify(ctx context.Context, in *VerificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error)
	Identify(ctx context.Context, in *IdentificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error)
}

type biometricFacialServiceClient struct {
	cc *grpc.ClientConn
}

func NewBiometricFacialServiceClient(cc *grpc.ClientConn) BiometricFacialServiceClient {
	return &biometricFacialServiceClient{cc}
}

func (c *biometricFacialServiceClient) Acquire(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Faces, error) {
	out := new(Faces)
	err := grpc.Invoke(ctx, "/Bioskynet.BiometricFacialService/Acquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) CreatePopulation(ctx context.Context, in *Photos, opts ...grpc.CallOption) (*PopulationCreationResponse, error) {
	out := new(PopulationCreationResponse)
	err := grpc.Invoke(ctx, "/Bioskynet.BiometricFacialService/CreatePopulation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) Verify(ctx context.Context, in *VerificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error) {
	out := new(FaceSearchResponse)
	err := grpc.Invoke(ctx, "/Bioskynet.BiometricFacialService/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) Identify(ctx context.Context, in *IdentificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error) {
	out := new(FaceSearchResponse)
	err := grpc.Invoke(ctx, "/Bioskynet.BiometricFacialService/Identify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BiometricFacialService service

type BiometricFacialServiceServer interface {
	Acquire(context.Context, *Photo) (*Faces, error)
	CreatePopulation(context.Context, *Photos) (*PopulationCreationResponse, error)
	Verify(context.Context, *VerificationData) (*FaceSearchResponse, error)
	Identify(context.Context, *IdentificationData) (*FaceSearchResponse, error)
}

func RegisterBiometricFacialServiceServer(s *grpc.Server, srv BiometricFacialServiceServer) {
	s.RegisterService(&_BiometricFacialService_serviceDesc, srv)
}

func _BiometricFacialService_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.BiometricFacialService/Acquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Acquire(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_CreatePopulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).CreatePopulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.BiometricFacialService/CreatePopulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).CreatePopulation(ctx, req.(*Photos))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.BiometricFacialService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Verify(ctx, req.(*VerificationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentificationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.BiometricFacialService/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Identify(ctx, req.(*IdentificationData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiometricFacialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bioskynet.BiometricFacialService",
	HandlerType: (*BiometricFacialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _BiometricFacialService_Acquire_Handler,
		},
		{
			MethodName: "CreatePopulation",
			Handler:    _BiometricFacialService_CreatePopulation_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _BiometricFacialService_Verify_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _BiometricFacialService_Identify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for UnitService service

type UnitServiceClient interface {
	OpenDoor(ctx context.Context, in *Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetVideoStream(ctx context.Context, in *Location, opts ...grpc.CallOption) (UnitService_GetVideoStreamClient, error)
	UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type unitServiceClient struct {
	cc *grpc.ClientConn
}

func NewUnitServiceClient(cc *grpc.ClientConn) UnitServiceClient {
	return &unitServiceClient{cc}
}

func (c *unitServiceClient) OpenDoor(ctx context.Context, in *Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.UnitService/OpenDoor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetVideoStream(ctx context.Context, in *Location, opts ...grpc.CallOption) (UnitService_GetVideoStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UnitService_serviceDesc.Streams[0], c.cc, "/Bioskynet.UnitService/GetVideoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &unitServiceGetVideoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnitService_GetVideoStreamClient interface {
	Recv() (*FrameBytes, error)
	grpc.ClientStream
}

type unitServiceGetVideoStreamClient struct {
	grpc.ClientStream
}

func (x *unitServiceGetVideoStreamClient) Recv() (*FrameBytes, error) {
	m := new(FrameBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unitServiceClient) UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Bioskynet.UnitService/UpdateLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnitService service

type UnitServiceServer interface {
	OpenDoor(context.Context, *Location) (*google_protobuf.Empty, error)
	GetVideoStream(*Location, UnitService_GetVideoStreamServer) error
	UpdateLocation(context.Context, *Location) (*google_protobuf.Empty, error)
}

func RegisterUnitServiceServer(s *grpc.Server, srv UnitServiceServer) {
	s.RegisterService(&_UnitService_serviceDesc, srv)
}

func _UnitService_OpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).OpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.UnitService/OpenDoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).OpenDoor(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnitServiceServer).GetVideoStream(m, &unitServiceGetVideoStreamServer{stream})
}

type UnitService_GetVideoStreamServer interface {
	Send(*FrameBytes) error
	grpc.ServerStream
}

type unitServiceGetVideoStreamServer struct {
	grpc.ServerStream
}

func (x *unitServiceGetVideoStreamServer) Send(m *FrameBytes) error {
	return x.ServerStream.SendMsg(m)
}

func _UnitService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bioskynet.UnitService/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).UpdateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bioskynet.UnitService",
	HandlerType: (*UnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenDoor",
			Handler:    _UnitService_OpenDoor_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _UnitService_UpdateLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideoStream",
			Handler:       _UnitService_GetVideoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("biometric_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x3a, 0x4d, 0x8f, 0x1b, 0x47,
	0x76, 0x6c, 0x36, 0x3f, 0x1f, 0x3f, 0xa6, 0xa7, 0x3c, 0x92, 0xe8, 0x91, 0x3f, 0x94, 0x16, 0xbc,
	0x96, 0xe8, 0x85, 0xd6, 0x96, 0x11, 0x23, 0x0b, 0x7b, 0xd7, 0x11, 0x67, 0xa4, 0x21, 0x6d, 0x69,
	0x34, 0xe8, 0x19, 0x79, 0x03, 0x04, 0x58, 0xa6, 0xa7, 0xbb, 0x86, 0x53, 0x11, 0xfb, 0xc3, 0x55,
	0x45, 0xed, 0xd0, 0xb7, 0x00, 0x39, 0xe5, 0xb0, 0x7f, 0x20, 0xd8, 0xcb, 0xde, 0xf3, 0x71, 0x49,
	0x2e, 0x41, 0x6e, 0x41, 0x10, 0x20, 0xb7, 0xfc, 0x94, 0xfc, 0x82, 0xe0, 0x55, 0x55, 0x93, 0xdd,
	0x24, 0x87, 0x13, 0xaf, 0x0e, 0x7b, 0x63, 0xbd, 0xf7, 0xea, 0xd5, 0xfb, 0xaa, 0xf7, 0x51, 0x4d,
	0xb8, 0x73, 0xce, 0x92, 0x88, 0x4a, 0xce, 0x82, 0xb1, 0xa0, 0xfc, 0x0d, 0x0b, 0xe8, 0xa3, 0x94,
	0x27, 0x32, 0x21, 0xcd, 0x01, 0x4b, 0xc4, 0xeb, 0x79, 0x4c, 0xe5, 0x7e, 0x8b, 0x46, 0xa9, 0x9c,
	0x6b, 0xb8, 0xfb, 0x19, 0x38, 0x43, 0xea, 0x73, 0x79, 0x4e, 0x7d, 0xf9, 0x82, 0x0a, 0xe1, 0x4f,
	0x28, 0x79, 0x1f, 0xc0, 0x6c, 0x1e, 0xb3, 0xb0, 0x67, 0xdd, 0xb3, 0x1e, 0x34, 0xbd, 0xa6, 0x81,
	0x8c, 0x42, 0xf7, 0x18, 0x5a, 0x47, 0x54, 0x7a, 0x54, 0xa4, 0x49, 0x2c, 0x28, 0x79, 0x08, 0x55,
	0x26, 0x69, 0x24, 0x14, 0x61, 0xeb, 0xf1, 0x3b, 0x8f, 0x16, 0x27, 0x3d, 0x7a, 0x1a, 0x4b, 0x26,
	0x19, 0x15, 0x9e, 0xa6, 0x20, 0x7b, 0x50, 0x0d, 0x92, 0x59, 0x2c, 0x7b, 0xe5, 0x7b, 0xd6, 0x03,
	0xdb, 0xd3, 0x0b, 0xf7, 0x3f, 0xca, 0x00, 0x8a, 0xe1, 0xf7, 0x33, 0x2a, 0x24, 0x39, 0x84, 0x6e,
	0x4a, 0xb9, 0x48, 0xe2, 0x31, 0xd7, 0x10, 0xc3, 0xf8, 0x6e, 0x8e, 0xf1, 0x11, 0x95, 0x27, 0x8a,
	0xc6, 0x6c, 0x1a, 0x96, 0xbc, 0x4e, 0x9a, 0x07, 0x90, 0x5f, 0x42, 0x3b, 0xf0, 0x79, 0xb8, 0xe0,
	0x51, 0x56, 0x3c, 0xde, 0x2d, 0xf2, 0x38, 0xf0, 0x79, 0xb8, 0xe4, 0xd0, 0x0a, 0x96, 0x4b, 0xf2,
	0x0d, 0x38, 0xd3, 0x24, 0xf0, 0x25, 0xcb, 0xc9, 0x61, 0x2b, 0x1e, 0xef, 0x17, 0x79, 0x3c, 0x37,
	0x54, 0x4b, 0x3e, 0x3b, 0xd3, 0x22, 0x88, 0x9c, 0xc1, 0xde, 0x1b, 0x26, 0x98, 0x1c, 0x73, 0x1a,
	0x24, 0x39, 0x99, 0x2a, 0x8a, 0xdf, 0xbd, 0x22, 0xbf, 0xef, 0x90, 0xd2, 0x53, 0x84, 0x4b, 0x96,
	0xe4, 0xcd, 0x1a, 0x74, 0xd0, 0x85, 0xb6, 0x61, 0x34, 0x96, 0xf3, 0x94, 0xba, 0x03, 0xe8, 0x1c,
	0x24, 0x51, 0xc4, 0x16, 0x86, 0xfc, 0x0c, 0x9a, 0xd1, 0x4c, 0x2a, 0x49, 0xd0, 0x39, 0xf6, 0x8a,
	0x73, 0x5e, 0x18, 0x9c, 0xb7, 0xa4, 0x72, 0xbf, 0x83, 0x6e, 0xc6, 0xc3, 0x78, 0xf7, 0x10, 0x9c,
	0x0c, 0x3d, 0xe6, 0x54, 0xcc, 0xa6, 0x32, 0xe3, 0xf5, 0xee, 0x26, 0x5e, 0x8a, 0xc2, 0xdb, 0x89,
	0x0a, 0x6b, 0xe1, 0x0e, 0xa1, 0x5b, 0x24, 0x21, 0xf7, 0xc0, 0x7e, 0x4d, 0xe7, 0xc6, 0xb5, 0xdd,
	0x1c, 0xab, 0x6f, 0xe9, 0xdc, 0x43, 0x14, 0x06, 0x0b, 0xe5, 0x3c, 0xe1, 0xca, 0x75, 0x4d, 0x4f,
	0x2f, 0xdc, 0xbf, 0xb7, 0xa0, 0x91, 0xb1, 0x22, 0x9f, 0x40, 0x8d, 0xc5, 0x82, 0xf2, 0x2c, 0x44,
	0x76, 0x57, 0x63, 0x6f, 0x3e, 0x2c, 0x79, 0x86, 0x04, 0x89, 0x67, 0x69, 0xe8, 0x4b, 0x6a, 0x62,
	0x61, 0x33, 0xb1, 0x26, 0x21, 0x0f, 0xa0, 0x16, 0xd2, 0x29, 0x95, 0xd4, 0x38, 0x7d, 0x45, 0x42,
	0xa4, 0xd4, 0xf8, 0x41, 0x0b, 0x9a, 0x49, 0x4a, 0xb9, 0x12, 0xc8, 0xfd, 0xdb, 0x32, 0xd4, 0x34,
	0x2f, 0xf2, 0x11, 0x54, 0x30, 0x9e, 0x8c, 0x64, 0x3b, 0xb9, 0xfd, 0x18, 0x75, 0xc3, 0x92, 0xa7,
	0xd0, 0x28, 0x95, 0x0e, 0xdc, 0x0d, 0x52, 0xe9, 0x10, 0xc7, 0xb3, 0x34, 0x09, 0xf9, 0x12, 0xda,
	0xf9, 0x40, 0x32, 0xb2, 0xdd, 0xce, 0x6d, 0xc9, 0x45, 0x0f, 0x46, 0x74, 0x2e, 0x6c, 0xc8, 0x67,
	0xd0, 0xc8, 0x02, 0xd3, 0x44, 0x5e, 0x3e, 0x1a, 0xb2, 0x30, 0x1e, 0x96, 0xbc, 0x05, 0x19, 0x79,
	0x00, 0xd5, 0x93, 0xcb, 0x44, 0x26, 0xbd, 0xaa, 0xa2, 0x77, 0xf2, 0xb2, 0x21, 0x7c, 0x58, 0xf2,
	0xaa, 0x29, 0xfe, 0x18, 0xb4, 0x01, 0xde, 0xf8, 0xd3, 0x19, 0xd5, 0xa1, 0xf8, 0x39, 0x34, 0xb2,
	0xab, 0x4f, 0x3e, 0x5e, 0xa6, 0x07, 0x7b, 0xa3, 0xd5, 0x4d, 0x72, 0x70, 0xff, 0xd3, 0x02, 0x67,
	0xf5, 0x5e, 0x93, 0x0f, 0xa1, 0x25, 0xa8, 0xcf, 0x83, 0xcb, 0xb1, 0xa4, 0x57, 0xd2, 0xe4, 0x22,
	0xd0, 0xa0, 0x33, 0x7a, 0x25, 0x31, 0x57, 0x5d, 0x30, 0x2e, 0xe4, 0x38, 0xf6, 0x23, 0x6a, 0x42,
	0xa5, 0xa9, 0x20, 0xc7, 0x7e, 0x44, 0xc9, 0x5d, 0x68, 0x4e, 0xfd, 0x0c, 0x6b, 0x2b, 0x6c, 0x03,
	0x01, 0x0a, 0x49, 0x8c, 0x8b, 0x2a, 0x0a, 0xae, 0xfd, 0xf1, 0x1e, 0x34, 0x33, 0xf5, 0x45, 0xaf,
	0x7a, 0xcf, 0x46, 0x76, 0x0b, 0x00, 0xb9, 0x0f, 0x95, 0xd4, 0x9f, 0xd0, 0x5e, 0x6d, 0xcd, 0xa9,
	0x27, 0xfe, 0x84, 0x7a, 0x0a, 0xe9, 0xfe, 0xb3, 0x05, 0x64, 0x3d, 0x31, 0xdc, 0xac, 0x0a, 0x81,
	0x4a, 0x4e, 0x09, 0xf5, 0x1b, 0x37, 0x45, 0x7e, 0x30, 0xf6, 0xc3, 0x90, 0x53, 0x21, 0x8c, 0x06,
	0x10, 0xf9, 0xc1, 0x13, 0x0d, 0x41, 0x82, 0x90, 0xaa, 0x54, 0xad, 0xf6, 0x6a, 0x55, 0x40, 0x83,
	0x94, 0x92, 0x99, 0xc8, 0xd5, 0x6d, 0x22, 0xff, 0xae, 0x0c, 0xb7, 0x36, 0xe6, 0x9e, 0x9b, 0xa5,
	0xfe, 0x29, 0x54, 0x85, 0xcc, 0x6e, 0x55, 0xb7, 0x10, 0x8c, 0x4f, 0x82, 0x80, 0x0a, 0x71, 0x8a,
	0x58, 0x4f, 0x13, 0x15, 0xcd, 0x6b, 0xaf, 0x9a, 0xb7, 0x07, 0x75, 0x1d, 0xe9, 0xa2, 0x57, 0x51,
	0xb8, 0x6c, 0x49, 0xee, 0x43, 0x07, 0xef, 0xa5, 0x64, 0x11, 0x1d, 0x5f, 0xf0, 0x24, 0x52, 0xea,
	0xd8, 0x5e, 0x3b, 0x03, 0x3e, 0xe3, 0x49, 0xa4, 0x6c, 0x91, 0x11, 0xc9, 0x44, 0x39, 0xc9, 0xf6,
	0x20, 0x03, 0x9d, 0x25, 0x0b, 0x87, 0xd7, 0x73, 0x0e, 0xcf, 0xec, 0xd3, 0xd8, 0x66, 0x9f, 0x4f,
	0xa1, 0x82, 0x2b, 0xcc, 0x49, 0x2c, 0x0e, 0xe9, 0x95, 0xb2, 0x43, 0xd5, 0xd3, 0x0b, 0x64, 0x2b,
	0xd8, 0x0f, 0xda, 0x02, 0x55, 0x4f, 0xfd, 0xc6, 0x3c, 0xd5, 0x2d, 0x56, 0x98, 0x9b, 0x4d, 0xf9,
	0x09, 0xec, 0xce, 0x62, 0xf6, 0xfd, 0x0c, 0xcb, 0x2e, 0x8d, 0x25, 0xbb, 0x60, 0x34, 0xcb, 0x7e,
	0x8e, 0x46, 0x8c, 0x16, 0x70, 0x72, 0x1b, 0x6a, 0xc9, 0x6f, 0x62, 0xca, 0x33, 0x33, 0x9a, 0xd5,
	0x42, 0x9f, 0xca, 0x36, 0x7d, 0xce, 0x60, 0xff, 0x24, 0x49, 0x67, 0x53, 0x65, 0xf7, 0x03, 0x4e,
	0xb3, 0xcc, 0xac, 0x73, 0x7e, 0x17, 0xca, 0xa6, 0xee, 0xdb, 0x5e, 0x99, 0x85, 0xe4, 0x27, 0x50,
	0xbd, 0xf0, 0x03, 0x2a, 0x7a, 0x65, 0x75, 0x85, 0xf3, 0x69, 0xe0, 0x19, 0xc2, 0x3d, 0x8d, 0x76,
	0xff, 0xd5, 0x02, 0xe7, 0x3b, 0xca, 0xd9, 0x05, 0xd3, 0x0e, 0x3d, 0xf4, 0xa5, 0x4f, 0x3e, 0x87,
	0xb6, 0xf4, 0xf9, 0x84, 0xca, 0x31, 0x8b, 0x50, 0x2e, 0x6b, 0x73, 0x2a, 0xf1, 0x5a, 0x9a, 0x6a,
	0x84, 0x44, 0xe4, 0x4b, 0x70, 0x82, 0x24, 0x4a, 0x7d, 0xce, 0xb0, 0x0f, 0xd0, 0x1b, 0xcb, 0xd7,
	0x6c, 0xdc, 0x59, 0x52, 0xea, 0xcd, 0x9f, 0xc2, 0x5e, 0x6e, 0xb3, 0xe9, 0x25, 0x98, 0xce, 0x96,
	0xb6, 0x47, 0x96, 0x38, 0x9d, 0x6a, 0x46, 0xa1, 0x1b, 0x03, 0xc9, 0x2c, 0xfb, 0xb6, 0x92, 0xdf,
	0x87, 0x4e, 0xba, 0xb0, 0x2c, 0x9e, 0xaa, 0x5b, 0x9d, 0xf6, 0x12, 0x38, 0x0a, 0xdd, 0xbf, 0x06,
	0x82, 0x86, 0x3b, 0x55, 0xae, 0x5f, 0x98, 0x7d, 0x61, 0x66, 0x6b, 0xab, 0x99, 0xc9, 0x4f, 0xa1,
	0x1e, 0xf9, 0x32, 0xb8, 0x5c, 0x38, 0x84, 0xe4, 0x2b, 0xb1, 0xc6, 0x78, 0x19, 0x89, 0xdb, 0x07,
	0x78, 0xc6, 0xfd, 0x88, 0x0e, 0xe6, 0x92, 0x0a, 0xbc, 0x7f, 0x17, 0xb8, 0x42, 0x05, 0x95, 0x42,
	0x6d, 0x6f, 0x09, 0x70, 0xbf, 0x82, 0xaa, 0x3a, 0x89, 0x7c, 0x6e, 0x7e, 0x18, 0x51, 0xde, 0x5f,
	0x11, 0xe5, 0xe0, 0xd2, 0xe7, 0x7e, 0x20, 0x29, 0x67, 0x42, 0xb2, 0x20, 0x73, 0xff, 0x3f, 0x5a,
	0x5a, 0xad, 0x22, 0x96, 0x7c, 0xb0, 0x88, 0xa6, 0xf5, 0x42, 0x8f, 0xd1, 0x75, 0x0f, 0xec, 0xf3,
	0xe4, 0xca, 0xb8, 0x37, 0x4f, 0x30, 0x48, 0xae, 0x3c, 0x44, 0x91, 0x0f, 0x00, 0x82, 0x24, 0xbe,
	0xc0, 0x4b, 0x11, 0xe8, 0x2c, 0x5e, 0xf6, 0x72, 0x10, 0x4c, 0xf2, 0x4b, 0x2f, 0x57, 0x94, 0xbd,
	0x1b, 0xa9, 0xf1, 0x2d, 0x79, 0x17, 0x1a, 0xaa, 0x44, 0x21, 0x4e, 0x27, 0x8d, 0xba, 0x5a, 0x8f,
	0x42, 0xf7, 0x19, 0x54, 0x95, 0xb9, 0xc8, 0xc7, 0x50, 0x47, 0x15, 0x32, 0x77, 0xad, 0xcb, 0x59,
	0x43, 0xf4, 0x28, 0xc4, 0xfb, 0xaf, 0xec, 0x6a, 0x84, 0xd0, 0x0b, 0xf7, 0xd7, 0x50, 0x37, 0x66,
	0xcf, 0x73, 0xb2, 0xb6, 0x72, 0xea, 0xaf, 0x3a, 0xd1, 0x59, 0x75, 0xe2, 0xd2, 0x85, 0x31, 0x54,
	0x30, 0x8f, 0x90, 0x2f, 0x37, 0xe5, 0x87, 0xcd, 0xc7, 0xac, 0xe7, 0x8b, 0x87, 0xd0, 0x50, 0x19,
	0xe2, 0x7a, 0x25, 0xeb, 0x0a, 0x3f, 0x0a, 0xdd, 0x43, 0xa8, 0xe2, 0x79, 0x82, 0x7c, 0x54, 0xac,
	0xdd, 0xab, 0x4d, 0xcc, 0xf6, 0xb6, 0xfe, 0x5b, 0x68, 0x9b, 0x81, 0x42, 0x87, 0x1e, 0x81, 0x4a,
	0xb8, 0x8c, 0x3a, 0xf5, 0x9b, 0x7c, 0x0c, 0x15, 0x6c, 0x18, 0x4c, 0xed, 0xc8, 0xf7, 0x23, 0x18,
	0x8f, 0x67, 0xf3, 0x94, 0x7a, 0x8a, 0xc0, 0xfd, 0x33, 0xb0, 0xbf, 0xa5, 0x73, 0xe2, 0x2c, 0x33,
	0xd3, 0xb0, 0xa4, 0xa2, 0x67, 0x0f, 0x2a, 0x93, 0x99, 0x51, 0xa9, 0x89, 0x5d, 0x15, 0xae, 0x06,
	0x4d, 0xa8, 0xb3, 0x50, 0xf7, 0x22, 0x47, 0xd0, 0xd6, 0x75, 0xe8, 0x50, 0xd5, 0xc4, 0x45, 0x95,
	0xb5, 0x72, 0x55, 0xf6, 0x3e, 0x74, 0x04, 0xe5, 0xcc, 0x9f, 0x8e, 0xe3, 0x59, 0x74, 0x6e, 0x92,
	0x6e, 0xcd, 0x6b, 0x6b, 0xe0, 0xb1, 0x82, 0xb9, 0xff, 0x64, 0x41, 0x5b, 0xf3, 0x78, 0xa5, 0x7b,
	0xc4, 0x6f, 0x60, 0x37, 0x48, 0xe2, 0x98, 0x06, 0x92, 0x86, 0x63, 0x5d, 0x71, 0xc5, 0x86, 0x59,
	0xe5, 0x20, 0xa3, 0xd1, 0x9b, 0xc5, 0xb0, 0xe4, 0x39, 0xc1, 0x0a, 0x8c, 0x8c, 0xc0, 0x31, 0x65,
	0x5c, 0xd5, 0xc9, 0x71, 0x24, 0x26, 0xc6, 0x4b, 0xf9, 0xbb, 0xa7, 0xa9, 0x55, 0x41, 0x35, 0xa6,
	0x1d, 0x96, 0xbc, 0x6e, 0x98, 0x83, 0x8a, 0xc9, 0xa0, 0x91, 0xf5, 0xb9, 0x6e, 0x0a, 0xce, 0xea,
	0xe1, 0xe4, 0x67, 0xd0, 0x5a, 0xcc, 0x35, 0xd7, 0x06, 0x29, 0x64, 0x24, 0x23, 0x6c, 0x50, 0xeb,
	0x99, 0x6e, 0xe5, 0xb5, 0x0e, 0x4e, 0x73, 0xf5, 0x32, 0x0a, 0x37, 0x80, 0x9a, 0x31, 0xf3, 0x17,
	0x8b, 0xbe, 0x44, 0x39, 0xd8, 0x52, 0x0e, 0xbe, 0xb5, 0xb6, 0x55, 0xb9, 0xd8, 0xb4, 0x2b, 0xf8,
	0x9b, 0xfc, 0x09, 0xb4, 0x73, 0xfd, 0x8c, 0x30, 0xe5, 0xaf, 0xb5, 0x6c, 0x68, 0x84, 0xfb, 0x3f,
	0x16, 0x90, 0x75, 0x4b, 0x90, 0xbf, 0x84, 0xde, 0x84, 0xc6, 0x14, 0x47, 0xdf, 0x35, 0x53, 0x5a,
	0x1b, 0x26, 0x2d, 0x45, 0x7a, 0x58, 0xb0, 0xdd, 0xb0, 0xe4, 0xdd, 0x9a, 0x6c, 0x42, 0x90, 0xbf,
	0x80, 0x3b, 0xbe, 0x8a, 0xa2, 0xf1, 0x35, 0x6e, 0xfa, 0x70, 0xad, 0xef, 0x59, 0x63, 0xbd, 0xe7,
	0x6f, 0x80, 0x0f, 0xaa, 0x60, 0x47, 0x62, 0xe2, 0xfe, 0x9b, 0x85, 0x1d, 0xd8, 0xa6, 0xa3, 0x7f,
	0xb4, 0xc7, 0x1e, 0x16, 0x2e, 0xd5, 0x35, 0x36, 0x57, 0x24, 0xcb, 0xe6, 0xcd, 0x5e, 0x6b, 0xde,
	0x72, 0x52, 0x64, 0xcd, 0x5b, 0x0f, 0xea, 0x91, 0x36, 0xb6, 0xe9, 0x33, 0xb3, 0xa5, 0x3b, 0x86,
	0xbd, 0x4d, 0x4a, 0xff, 0x78, 0xd9, 0xb1, 0xab, 0x49, 0x69, 0x4c, 0xf5, 0x85, 0x6e, 0x78, 0x66,
	0xe5, 0xfe, 0x04, 0x1a, 0x27, 0x89, 0x60, 0x6a, 0x2a, 0x69, 0x83, 0x95, 0x35, 0x60, 0xd6, 0x15,
	0xae, 0xe6, 0xa6, 0xf3, 0xb2, 0xe6, 0xee, 0xaf, 0xc1, 0x1e, 0x24, 0x57, 0xe4, 0x21, 0x54, 0xcf,
	0xe9, 0x84, 0xc5, 0x1b, 0xde, 0x24, 0x32, 0x36, 0x9e, 0xa6, 0xc0, 0xe4, 0xf5, 0x1b, 0x16, 0xca,
	0x4b, 0xc3, 0x43, 0x2f, 0x50, 0x8e, 0x4b, 0xca, 0x26, 0x97, 0x7a, 0xe8, 0xaf, 0x7a, 0x66, 0xe5,
	0xfe, 0x97, 0x05, 0x8d, 0xac, 0xb1, 0xbf, 0xb1, 0xb2, 0x6d, 0x6a, 0xe8, 0xef, 0xe1, 0xbd, 0x10,
	0x01, 0x67, 0xa9, 0x1a, 0xc4, 0xec, 0x2c, 0xbc, 0x17, 0x20, 0xf2, 0x00, 0x30, 0x79, 0xcb, 0x71,
	0xbe, 0xef, 0xd7, 0xe6, 0xee, 0x22, 0xfc, 0xc5, 0xb2, 0xf7, 0xff, 0x0a, 0x3a, 0x85, 0xa0, 0x34,
	0x3d, 0xfe, 0x9d, 0x6b, 0x42, 0xd1, 0x6b, 0xe7, 0x03, 0xd0, 0x7d, 0x0e, 0xcd, 0xe7, 0x8b, 0xce,
	0xfb, 0x61, 0x31, 0xd3, 0x6f, 0x9a, 0x0c, 0xb7, 0x67, 0xfb, 0x7f, 0xb1, 0xa0, 0xa6, 0xfb, 0xa9,
	0x1b, 0xcd, 0xf2, 0x36, 0x23, 0xdb, 0x03, 0xa8, 0xa9, 0xea, 0xad, 0x07, 0x84, 0x4d, 0xdd, 0x98,
	0xc1, 0x63, 0xed, 0xc2, 0xfe, 0x5e, 0x0f, 0x71, 0x9b, 0x6a, 0x97, 0xc2, 0xba, 0x43, 0xa8, 0x9f,
	0x98, 0x19, 0x63, 0xcb, 0xa4, 0x6a, 0x86, 0xd2, 0xad, 0x16, 0xf8, 0x9b, 0xb2, 0x99, 0x96, 0x6f,
	0x34, 0x80, 0x03, 0xf6, 0x8c, 0x4f, 0x8d, 0xe6, 0xf8, 0x73, 0x19, 0x84, 0xf6, 0xe6, 0x20, 0xac,
	0xe4, 0x83, 0x10, 0x1b, 0xc0, 0x74, 0xc6, 0xd3, 0x44, 0x68, 0x8f, 0x77, 0x0b, 0x0d, 0xe0, 0x89,
	0xc6, 0x78, 0x19, 0x09, 0xf9, 0x1a, 0xba, 0xcb, 0x47, 0x41, 0x95, 0x18, 0x6a, 0x6a, 0x53, 0x2f,
	0xdf, 0x6a, 0x65, 0x04, 0x2a, 0x37, 0x74, 0xce, 0xf3, 0xcb, 0x42, 0xe7, 0x50, 0xdf, 0xde, 0x39,
	0x0c, 0xa1, 0x76, 0xa2, 0xcd, 0xbf, 0x74, 0x94, 0x75, 0x83, 0xa3, 0x36, 0x5b, 0xf3, 0xf7, 0x16,
	0x54, 0x5e, 0xc5, 0x4c, 0xa2, 0xf8, 0xcb, 0x2a, 0x8b, 0x17, 0xc0, 0x18, 0xb6, 0xb7, 0xa9, 0xc4,
	0xe2, 0x0e, 0xaf, 0x13, 0xe4, 0x97, 0xe4, 0x23, 0xe8, 0x5e, 0x66, 0x2f, 0x9c, 0x63, 0x1c, 0x04,
	0xcd, 0x41, 0x9d, 0x05, 0xf4, 0x8c, 0x45, 0x94, 0x3c, 0x2e, 0x4e, 0xa6, 0x78, 0xc4, 0xde, 0x86,
	0x5b, 0x20, 0x72, 0xf3, 0xaa, 0xfb, 0x12, 0x3a, 0x85, 0xa3, 0x31, 0xb4, 0x59, 0xba, 0xb8, 0xb5,
	0xe6, 0xe5, 0x94, 0xa5, 0xb9, 0x61, 0x3d, 0x7f, 0xab, 0xcb, 0xab, 0xd3, 0xbc, 0x1b, 0x41, 0x4b,
	0x37, 0x17, 0x9a, 0xdd, 0x63, 0x68, 0x07, 0x33, 0xce, 0x69, 0x2c, 0xf3, 0x9a, 0xe7, 0x43, 0x59,
	0x29, 0xdc, 0x32, 0x44, 0x6a, 0x4f, 0xbf, 0x38, 0x8f, 0xef, 0xad, 0x10, 0xe7, 0x13, 0xba, 0xfb,
	0x15, 0xb4, 0x73, 0xc7, 0xe1, 0x64, 0x51, 0xb8, 0x01, 0xf9, 0x72, 0x90, 0xa3, 0xcb, 0x1e, 0x6c,
	0x1e, 0x41, 0x55, 0x6f, 0xdb, 0xd2, 0x26, 0xe6, 0xe9, 0xbf, 0x86, 0x5d, 0x5c, 0x1e, 0x60, 0xe3,
	0x3e, 0x99, 0xe9, 0x17, 0x33, 0xd2, 0x87, 0xdd, 0xc8, 0x17, 0x12, 0xa3, 0x6b, 0xd5, 0x70, 0x3b,
	0x1a, 0x31, 0xca, 0xcc, 0xe7, 0x1e, 0x68, 0x06, 0x99, 0x2b, 0x94, 0x2a, 0xe4, 0x51, 0xa6, 0xaf,
	0xb5, 0x16, 0xd5, 0x05, 0xc2, 0x4c, 0xe7, 0xff, 0xb5, 0xa0, 0x95, 0x7b, 0xe7, 0xb8, 0xf1, 0xb2,
	0x7e, 0x92, 0x1f, 0x2e, 0x36, 0x37, 0xce, 0xcb, 0x61, 0x63, 0xa5, 0xde, 0xd9, 0x37, 0xd6, 0x3b,
	0x02, 0x15, 0x15, 0x92, 0x7a, 0x6a, 0x51, 0xbf, 0x71, 0x82, 0x57, 0xaf, 0x14, 0xd5, 0x8d, 0x2f,
	0x87, 0xe6, 0xd9, 0x62, 0x51, 0xb9, 0x6b, 0xff, 0x8f, 0x67, 0x17, 0xd7, 0x83, 0x76, 0x4e, 0xe7,
	0xad, 0x8e, 0xce, 0xbf, 0x01, 0x6d, 0xcb, 0x77, 0xfd, 0x63, 0x68, 0x9d, 0xea, 0x6f, 0x02, 0x2a,
	0x4b, 0x74, 0xa0, 0x79, 0x9c, 0xc4, 0x74, 0x8c, 0x0b, 0xa7, 0x44, 0x76, 0xa0, 0xf5, 0xcc, 0x0f,
	0xb0, 0xa5, 0x56, 0x00, 0x8b, 0x38, 0xd0, 0x7e, 0x92, 0xa6, 0xe8, 0x3f, 0x0d, 0x29, 0xe3, 0x8e,
	0xe5, 0xd2, 0xee, 0x9f, 0x42, 0xa7, 0x90, 0x86, 0x08, 0x81, 0xee, 0xab, 0x58, 0xa4, 0x34, 0xc0,
	0x01, 0x26, 0x1c, 0xb0, 0xc4, 0x29, 0x11, 0x80, 0x9a, 0x66, 0xeb, 0x58, 0xea, 0x08, 0x16, 0x4f,
	0x28, 0x4f, 0x39, 0x8b, 0xa5, 0x53, 0x26, 0x0d, 0xa8, 0x8c, 0x38, 0x13, 0x8e, 0x4d, 0xea, 0x60,
	0x3f, 0x99, 0x4e, 0x9d, 0x4a, 0xff, 0x17, 0x50, 0x7f, 0x3a, 0xd7, 0x02, 0xbe, 0x03, 0x3b, 0x39,
	0x76, 0xe3, 0xa7, 0x73, 0x14, 0xb3, 0x01, 0x95, 0xe7, 0xf4, 0x42, 0x3a, 0x16, 0x69, 0x42, 0xd5,
	0xc3, 0xec, 0xaa, 0xf9, 0x0c, 0x12, 0x79, 0xe9, 0xd8, 0xfd, 0x7f, 0xb7, 0xa0, 0xa6, 0xcf, 0x20,
	0xb7, 0x81, 0xe4, 0xb7, 0x6b, 0xa8, 0x53, 0x22, 0x5d, 0x00, 0xb5, 0xef, 0xec, 0x72, 0x16, 0x9d,
	0x3b, 0x16, 0x6a, 0x85, 0x1c, 0xf5, 0xb2, 0xbc, 0x40, 0x8f, 0xe2, 0x90, 0x5e, 0x39, 0x76, 0x86,
	0xd6, 0xcb, 0x0a, 0xea, 0xa0, 0xd0, 0x2f, 0x58, 0x18, 0x4e, 0xa9, 0x53, 0x45, 0x7a, 0xc4, 0x9b,
	0x75, 0x0d, 0xe9, 0x15, 0x81, 0xc7, 0xe2, 0x89, 0x53, 0x27, 0x6d, 0x68, 0x20, 0x5a, 0xad, 0x1a,
	0x8b, 0xdd, 0xcf, 0x99, 0x94, 0x53, 0xea, 0x34, 0xb3, 0xdd, 0x66, 0x0d, 0xfd, 0xdf, 0x56, 0xe1,
	0xae, 0xb6, 0xd7, 0x48, 0x24, 0x07, 0x49, 0x94, 0x4e, 0x99, 0x1f, 0x07, 0xf4, 0x8c, 0x46, 0xe9,
	0x14, 0x2f, 0xcf, 0x5d, 0xb8, 0x93, 0x57, 0x6a, 0x24, 0x92, 0x0c, 0xe5, 0x94, 0x50, 0xe3, 0x97,
	0xf1, 0x74, 0xfe, 0x32, 0xa6, 0x38, 0xd5, 0x63, 0x5c, 0x9c, 0x4f, 0xd1, 0x93, 0xef, 0x41, 0x6f,
	0x92, 0x24, 0xe1, 0x77, 0x94, 0x4b, 0x16, 0xf8, 0x53, 0x44, 0x66, 0x4d, 0x95, 0x53, 0x46, 0xec,
	0x65, 0xc2, 0xd9, 0x0f, 0x49, 0x2c, 0xfd, 0xe9, 0x74, 0x7e, 0x40, 0x63, 0x49, 0x39, 0x0d, 0x91,
	0xca, 0xb1, 0x51, 0x62, 0x55, 0xdb, 0x5e, 0x5e, 0x0c, 0xa9, 0x1f, 0x3a, 0x15, 0x0c, 0x8b, 0x29,
	0x8d, 0x27, 0x0b, 0x48, 0x15, 0x65, 0xca, 0x91, 0x0c, 0xa8, 0x90, 0x27, 0xdc, 0x0f, 0x24, 0x0b,
	0xd0, 0x1c, 0xef, 0x41, 0x2f, 0x4f, 0x5e, 0xc0, 0xd6, 0x51, 0x7d, 0x4e, 0x45, 0x32, 0x9d, 0x29,
	0x59, 0x1a, 0x64, 0x1f, 0x6e, 0x2f, 0xd7, 0x05, 0xda, 0x26, 0x71, 0xe1, 0x03, 0xf5, 0xac, 0xf3,
	0x2b, 0x3c, 0xeb, 0x2c, 0x19, 0xaa, 0xd2, 0x5a, 0xa0, 0x01, 0x14, 0x0e, 0x35, 0x7d, 0x7a, 0x95,
	0x26, 0x62, 0xc6, 0xa9, 0xd3, 0x22, 0x3d, 0xd8, 0x43, 0xc8, 0x11, 0xf7, 0xe7, 0xa7, 0x81, 0x3f,
	0xa5, 0x27, 0x3c, 0xb9, 0x60, 0x53, 0xea, 0xb4, 0x11, 0x73, 0xe9, 0x8b, 0x63, 0x5f, 0xce, 0xb8,
	0x3f, 0x3d, 0x7d, 0xcd, 0xe2, 0x83, 0x64, 0x9a, 0xcc, 0xb8, 0xd3, 0x41, 0xa9, 0xe2, 0x64, 0x98,
	0xc8, 0xd3, 0x34, 0x91, 0xc2, 0xe9, 0x92, 0xfb, 0xf0, 0x21, 0x13, 0x03, 0x3f, 0x78, 0x3d, 0xe1,
	0xc9, 0x2c, 0xc6, 0x94, 0x7a, 0x91, 0xf0, 0xa8, 0x70, 0xf4, 0x0e, 0xfa, 0x9d, 0x89, 0x67, 0x5c,
	0x59, 0xd1, 0x71, 0xc8, 0xbb, 0x70, 0x6b, 0xb1, 0x2c, 0x50, 0xee, 0x92, 0x5b, 0xb0, 0xcb, 0xc4,
	0x73, 0x94, 0x9e, 0xc5, 0x13, 0xc3, 0xcc, 0x21, 0x28, 0x0f, 0x9d, 0x53, 0xf1, 0x32, 0xa5, 0x45,
	0xcd, 0xdf, 0x21, 0x1f, 0xc2, 0x5d, 0xc4, 0x1c, 0xf9, 0x3f, 0xd0, 0x4d, 0x1c, 0xf7, 0xd0, 0x6c,
	0x48, 0x70, 0x9c, 0x48, 0x8f, 0x16, 0x4d, 0x7c, 0x0b, 0x6f, 0x51, 0x9c, 0x9c, 0xb1, 0x58, 0xd2,
	0xf0, 0x68, 0xea, 0x0b, 0x41, 0x85, 0x73, 0x9b, 0xb4, 0xa0, 0xce, 0xc4, 0xe9, 0xa5, 0xcf, 0x53,
	0xe7, 0x0e, 0xfa, 0x2f, 0x4a, 0x66, 0xf2, 0xf2, 0x60, 0x9a, 0x88, 0x95, 0xed, 0xbd, 0xfe, 0x0c,
	0x1a, 0xd9, 0x64, 0x4f, 0x76, 0xa1, 0xa3, 0x32, 0x46, 0x06, 0x70, 0x4a, 0x78, 0xe5, 0x97, 0x5f,
	0x02, 0x4d, 0xe2, 0x78, 0x07, 0x76, 0x72, 0x9f, 0x1b, 0x4d, 0xee, 0xb8, 0x05, 0xbb, 0x85, 0x8f,
	0x5d, 0x3a, 0x87, 0x60, 0xc8, 0x16, 0xbf, 0x5f, 0x29, 0x78, 0xa5, 0xff, 0x73, 0x80, 0xe5, 0xec,
	0x83, 0x0e, 0xd1, 0x07, 0x9b, 0x53, 0xbb, 0x00, 0xfa, 0x9d, 0xd6, 0x0f, 0x29, 0x77, 0x2c, 0x54,
	0xe7, 0xc0, 0x4f, 0x25, 0x7a, 0xbc, 0xdc, 0xff, 0x2b, 0x68, 0xe5, 0x86, 0x9a, 0xc5, 0x5e, 0xb5,
	0xd2, 0x09, 0xe9, 0x49, 0x20, 0xd9, 0x1b, 0x94, 0x74, 0x17, 0x3a, 0xa7, 0x32, 0x49, 0x53, 0x1a,
	0x0e, 0xe6, 0xaf, 0x04, 0xe5, 0x4e, 0x19, 0xd1, 0x27, 0xfe, 0x4c, 0xd0, 0xd0, 0xb1, 0x91, 0xad,
	0x41, 0x3b, 0x15, 0x4c, 0x37, 0x4f, 0x39, 0x4f, 0xb8, 0x53, 0xed, 0x7f, 0x0b, 0x9d, 0x62, 0x49,
	0xbb, 0x85, 0x75, 0x6e, 0x79, 0x2b, 0x73, 0x47, 0xbd, 0x54, 0xd3, 0x90, 0x63, 0xe1, 0x6f, 0x6d,
	0x5f, 0xa7, 0x8c, 0x7c, 0x9f, 0xf9, 0x6c, 0x8a, 0xe2, 0xda, 0xfd, 0x2f, 0xa0, 0x76, 0x44, 0xe3,
	0x50, 0x27, 0x2c, 0xfd, 0x6b, 0x9c, 0x63, 0xa6, 0x53, 0xde, 0x0b, 0x5f, 0x5d, 0x64, 0x4c, 0xa6,
	0x34, 0xc2, 0xdf, 0xe5, 0xfe, 0xaf, 0xa0, 0xa6, 0x52, 0x89, 0xc0, 0x7d, 0xfa, 0xd7, 0xca, 0x3e,
	0x3c, 0x72, 0x26, 0x64, 0x12, 0x39, 0x16, 0xa6, 0xa1, 0x97, 0xea, 0xa3, 0x57, 0xc2, 0xb5, 0x00,
	0x2f, 0xfc, 0xd8, 0xc7, 0x7c, 0x68, 0xa3, 0x81, 0x4e, 0x67, 0x29, 0x16, 0x06, 0x91, 0x70, 0x65,
	0xfa, 0xba, 0x69, 0x49, 0xf1, 0xf2, 0xa3, 0xed, 0xcc, 0xd2, 0x29, 0x61, 0x90, 0xab, 0x3c, 0x19,
	0xfb, 0x0c, 0x13, 0x7a, 0x17, 0x60, 0xf9, 0x2a, 0xed, 0x94, 0xfb, 0xbf, 0xd4, 0x05, 0x42, 0x1b,
	0xa5, 0x09, 0x55, 0x65, 0x78, 0xa7, 0x84, 0xa7, 0x8f, 0xd4, 0x37, 0x3d, 0x65, 0x8a, 0x16, 0xd4,
	0x0f, 0xd5, 0xa7, 0x38, 0x63, 0x0b, 0xd3, 0xa9, 0x38, 0x76, 0xff, 0x4f, 0xa1, 0x95, 0xab, 0x85,
	0x59, 0x85, 0xca, 0xcc, 0xd9, 0x82, 0xfa, 0x11, 0xf7, 0x63, 0x99, 0xd9, 0xf3, 0x90, 0xc6, 0xa8,
	0x68, 0xf9, 0xf1, 0xef, 0xca, 0xd0, 0x39, 0x98, 0x32, 0x1a, 0x4b, 0x53, 0xdf, 0xc8, 0x11, 0x10,
	0xcd, 0xb5, 0x50, 0x44, 0xef, 0x6c, 0xae, 0x9a, 0x62, 0xff, 0xf6, 0xa3, 0x49, 0x92, 0x4c, 0xa6,
	0xe6, 0xd3, 0xfb, 0xf9, 0xec, 0xe2, 0xd1, 0xd3, 0x28, 0x95, 0x73, 0xb7, 0x44, 0xfe, 0x3c, 0xeb,
	0xef, 0x74, 0xe3, 0x74, 0x67, 0x73, 0x83, 0xb5, 0x8d, 0xc3, 0xd7, 0xd0, 0xd5, 0x94, 0x8b, 0x29,
	0x74, 0xd3, 0xac, 0xb6, 0x5d, 0x84, 0x93, 0x99, 0xb8, 0xd4, 0x4c, 0x8a, 0x22, 0xe4, 0x5f, 0xb7,
	0xae, 0xe7, 0xf0, 0xf8, 0xb7, 0x15, 0xbc, 0x65, 0x09, 0x0f, 0x59, 0x8c, 0x01, 0x90, 0x19, 0xe9,
	0x17, 0x50, 0x37, 0xcd, 0x30, 0xb9, 0xb6, 0x37, 0xdf, 0x22, 0xd7, 0x00, 0x9a, 0x8b, 0x3f, 0x22,
	0x90, 0xfc, 0xfb, 0xd9, 0xea, 0xdf, 0x13, 0xb6, 0xf0, 0xf8, 0x02, 0x1a, 0x47, 0x54, 0x6a, 0xdb,
	0x5e, 0x43, 0xb5, 0xef, 0xac, 0x74, 0xa7, 0x42, 0x19, 0xb5, 0x79, 0x3a, 0x3b, 0xc7, 0x11, 0xfc,
	0x9c, 0xfe, 0x41, 0xc2, 0x3f, 0x81, 0xd6, 0xab, 0x58, 0xbc, 0x15, 0x8b, 0x9f, 0x83, 0x7d, 0x44,
	0x65, 0xc1, 0x1f, 0xf9, 0xe7, 0xd3, 0xfd, 0xeb, 0x10, 0x6e, 0x89, 0x7c, 0x05, 0x35, 0x9d, 0xf5,
	0xfe, 0xa0, 0xdd, 0x6f, 0x1f, 0x10, 0x7f, 0x67, 0xc1, 0x0e, 0x26, 0xf1, 0x73, 0x5f, 0xd0, 0x2c,
	0x1a, 0xfe, 0x58, 0xea, 0x3c, 0xfe, 0x87, 0x32, 0xdc, 0x5e, 0xf4, 0x91, 0xba, 0xf7, 0xc9, 0x64,
	0xfa, 0x19, 0xd4, 0x9f, 0x04, 0xdf, 0xcf, 0x18, 0xa7, 0x64, 0x6d, 0x1c, 0xdd, 0x5f, 0xfb, 0xdc,
	0xe2, 0x96, 0xc8, 0x31, 0x38, 0xea, 0xe3, 0x18, 0x5d, 0xa6, 0x25, 0xb2, 0xbb, 0xba, 0x53, 0xec,
	0x7f, 0x54, 0x78, 0x5e, 0xba, 0xee, 0xb3, 0x9a, 0x5b, 0x22, 0xcf, 0xa0, 0xa6, 0xbe, 0x8f, 0xcd,
	0x0b, 0x01, 0xbe, 0xfa, 0xc9, 0x6c, 0x7f, 0xf5, 0x73, 0x4b, 0xf1, 0x3b, 0x91, 0x5b, 0x22, 0xdf,
	0x40, 0xc3, 0xbc, 0xec, 0xcf, 0x49, 0x9e, 0x78, 0xfd, 0x23, 0xd6, 0x8d, 0xbc, 0x1e, 0xff, 0xb7,
	0x85, 0xb1, 0xcb, 0xe4, 0xd2, 0x71, 0x98, 0xda, 0xe3, 0xc3, 0x24, 0xe1, 0x3f, 0x3e, 0xb5, 0x74,
	0xd5, 0x47, 0xe4, 0x90, 0x26, 0xa7, 0x92, 0x53, 0x3f, 0xda, 0xcc, 0x20, 0xff, 0x22, 0xb9, 0xfc,
	0x34, 0xe5, 0x96, 0x3e, 0xb5, 0xde, 0x3a, 0xbb, 0x0d, 0x76, 0xa0, 0x4e, 0xaf, 0x1e, 0x4d, 0x78,
	0x1a, 0xfc, 0xbe, 0x6c, 0x7b, 0x67, 0x47, 0xe7, 0x35, 0x45, 0xf2, 0xf9, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x58, 0x69, 0xad, 0x55, 0x19, 0x25, 0x00, 0x00,
}
