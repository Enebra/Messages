// Code generated by protoc-gen-go.
// source: services/unit_service.proto
// DO NOT EDIT!

/*
Package unitservice is a generated protocol buffer package.

It is generated from these files:
	services/unit_service.proto

It has these top-level messages:
*/
package unitservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import DataTypes2 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/location"
import DataTypes1 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/devices"
import DataTypes4 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/biometrics"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for UnitService service

type UnitServiceClient interface {
	OpenDoor(ctx context.Context, in *DataTypes2.Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetLocationStream(ctx context.Context, in *DataTypes2.Location, opts ...grpc.CallOption) (UnitService_GetLocationStreamClient, error)
	GetDevices(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DataTypes1.Devices, error)
	UpdateLocation(ctx context.Context, in *DataTypes2.Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// on person registration
	GetCard(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (*DataTypes1.CardMsg, error)
	CheckDevice(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (*DataTypes1.CheckMsg, error)
	GetDeviceStream(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (UnitService_GetDeviceStreamClient, error)
	// on person registration & identification
	Enroll(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (*DataTypes4.Faces, error)
}

type unitServiceClient struct {
	cc *grpc.ClientConn
}

func NewUnitServiceClient(cc *grpc.ClientConn) UnitServiceClient {
	return &unitServiceClient{cc}
}

func (c *unitServiceClient) OpenDoor(ctx context.Context, in *DataTypes2.Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.UnitService/OpenDoor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetLocationStream(ctx context.Context, in *DataTypes2.Location, opts ...grpc.CallOption) (UnitService_GetLocationStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UnitService_serviceDesc.Streams[0], c.cc, "/Services.UnitService/GetLocationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &unitServiceGetLocationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnitService_GetLocationStreamClient interface {
	Recv() (*DataTypes4.FrameBytes, error)
	grpc.ClientStream
}

type unitServiceGetLocationStreamClient struct {
	grpc.ClientStream
}

func (x *unitServiceGetLocationStreamClient) Recv() (*DataTypes4.FrameBytes, error) {
	m := new(DataTypes4.FrameBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unitServiceClient) GetDevices(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DataTypes1.Devices, error) {
	out := new(DataTypes1.Devices)
	err := grpc.Invoke(ctx, "/Services.UnitService/GetDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) UpdateLocation(ctx context.Context, in *DataTypes2.Location, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.UnitService/UpdateLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetCard(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (*DataTypes1.CardMsg, error) {
	out := new(DataTypes1.CardMsg)
	err := grpc.Invoke(ctx, "/Services.UnitService/GetCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) CheckDevice(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (*DataTypes1.CheckMsg, error) {
	out := new(DataTypes1.CheckMsg)
	err := grpc.Invoke(ctx, "/Services.UnitService/CheckDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitServiceClient) GetDeviceStream(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (UnitService_GetDeviceStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UnitService_serviceDesc.Streams[1], c.cc, "/Services.UnitService/GetDeviceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &unitServiceGetDeviceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnitService_GetDeviceStreamClient interface {
	Recv() (*DataTypes4.FrameBytes, error)
	grpc.ClientStream
}

type unitServiceGetDeviceStreamClient struct {
	grpc.ClientStream
}

func (x *unitServiceGetDeviceStreamClient) Recv() (*DataTypes4.FrameBytes, error) {
	m := new(DataTypes4.FrameBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unitServiceClient) Enroll(ctx context.Context, in *DataTypes1.Device, opts ...grpc.CallOption) (*DataTypes4.Faces, error) {
	out := new(DataTypes4.Faces)
	err := grpc.Invoke(ctx, "/Services.UnitService/Enroll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnitService service

type UnitServiceServer interface {
	OpenDoor(context.Context, *DataTypes2.Location) (*google_protobuf.Empty, error)
	GetLocationStream(*DataTypes2.Location, UnitService_GetLocationStreamServer) error
	GetDevices(context.Context, *google_protobuf.Empty) (*DataTypes1.Devices, error)
	UpdateLocation(context.Context, *DataTypes2.Location) (*google_protobuf.Empty, error)
	// on person registration
	GetCard(context.Context, *DataTypes1.Device) (*DataTypes1.CardMsg, error)
	CheckDevice(context.Context, *DataTypes1.Device) (*DataTypes1.CheckMsg, error)
	GetDeviceStream(*DataTypes1.Device, UnitService_GetDeviceStreamServer) error
	// on person registration & identification
	Enroll(context.Context, *DataTypes1.Device) (*DataTypes4.Faces, error)
}

func RegisterUnitServiceServer(s *grpc.Server, srv UnitServiceServer) {
	s.RegisterService(&_UnitService_serviceDesc, srv)
}

func _UnitService_OpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes2.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).OpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.UnitService/OpenDoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).OpenDoor(ctx, req.(*DataTypes2.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetLocationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataTypes2.Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnitServiceServer).GetLocationStream(m, &unitServiceGetLocationStreamServer{stream})
}

type UnitService_GetLocationStreamServer interface {
	Send(*DataTypes4.FrameBytes) error
	grpc.ServerStream
}

type unitServiceGetLocationStreamServer struct {
	grpc.ServerStream
}

func (x *unitServiceGetLocationStreamServer) Send(m *DataTypes4.FrameBytes) error {
	return x.ServerStream.SendMsg(m)
}

func _UnitService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.UnitService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetDevices(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes2.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.UnitService/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).UpdateLocation(ctx, req.(*DataTypes2.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes1.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.UnitService/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).GetCard(ctx, req.(*DataTypes1.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_CheckDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes1.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).CheckDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.UnitService/CheckDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).CheckDevice(ctx, req.(*DataTypes1.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitService_GetDeviceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataTypes1.Device)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnitServiceServer).GetDeviceStream(m, &unitServiceGetDeviceStreamServer{stream})
}

type UnitService_GetDeviceStreamServer interface {
	Send(*DataTypes4.FrameBytes) error
	grpc.ServerStream
}

type unitServiceGetDeviceStreamServer struct {
	grpc.ServerStream
}

func (x *unitServiceGetDeviceStreamServer) Send(m *DataTypes4.FrameBytes) error {
	return x.ServerStream.SendMsg(m)
}

func _UnitService_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes1.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServiceServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.UnitService/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServiceServer).Enroll(ctx, req.(*DataTypes1.Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Services.UnitService",
	HandlerType: (*UnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenDoor",
			Handler:    _UnitService_OpenDoor_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _UnitService_GetDevices_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _UnitService_UpdateLocation_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _UnitService_GetCard_Handler,
		},
		{
			MethodName: "CheckDevice",
			Handler:    _UnitService_CheckDevice_Handler,
		},
		{
			MethodName: "Enroll",
			Handler:    _UnitService_Enroll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLocationStream",
			Handler:       _UnitService_GetLocationStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeviceStream",
			Handler:       _UnitService_GetDeviceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("services/unit_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xcd, 0xf7, 0x15, 0xda, 0x32, 0x85, 0xef, 0xb3, 0x23, 0xfe, 0x90, 0xee, 0xf2, 0x00, 0x33,
	0x52, 0x17, 0xa2, 0x0b, 0x0b, 0x4d, 0x6b, 0x36, 0x4a, 0xc1, 0xb6, 0x1b, 0x37, 0x32, 0x49, 0xae,
	0xe9, 0x60, 0x92, 0x09, 0x93, 0x5b, 0xb1, 0xaf, 0xe3, 0xdb, 0xf9, 0x16, 0x92, 0x64, 0x6a, 0x53,
	0x8c, 0x82, 0xcb, 0x99, 0x73, 0xce, 0x3d, 0xe7, 0x1e, 0x2e, 0x19, 0xe4, 0xa0, 0x5f, 0x64, 0x00,
	0x39, 0x5f, 0xa7, 0x12, 0x1f, 0xcd, 0x8b, 0x65, 0x5a, 0xa1, 0xa2, 0xdd, 0xb9, 0x01, 0xed, 0x41,
	0xa4, 0x54, 0x14, 0x03, 0x2f, 0xff, 0xfd, 0xf5, 0x13, 0x87, 0x24, 0xc3, 0x4d, 0x45, 0xb3, 0x4f,
	0x43, 0x81, 0x02, 0x37, 0x19, 0xe4, 0x3c, 0x56, 0x81, 0x40, 0xa9, 0x52, 0x83, 0x9c, 0xec, 0x90,
	0x10, 0xca, 0x49, 0x06, 0xb0, 0x77, 0x80, 0x2f, 0x55, 0x02, 0xa8, 0x65, 0x60, 0xb0, 0xe1, 0x7b,
	0x8b, 0xf4, 0x96, 0xa9, 0x44, 0x63, 0x4e, 0x2f, 0x49, 0x77, 0x96, 0x41, 0x3a, 0x51, 0x4a, 0xd3,
	0x43, 0x36, 0x11, 0x28, 0x16, 0x85, 0x90, 0xdd, 0x1a, 0x2f, 0xfb, 0x98, 0x55, 0xe9, 0xd8, 0x36,
	0x1d, 0x9b, 0x16, 0xe9, 0x1c, 0x8b, 0xba, 0xa4, 0xef, 0x01, 0x6e, 0x89, 0x73, 0xd4, 0x20, 0x92,
	0xe6, 0x19, 0x47, 0xb5, 0xcf, 0x1b, 0x2d, 0x12, 0x18, 0x6f, 0x10, 0x72, 0xc7, 0x3a, 0xfb, 0x43,
	0xaf, 0x08, 0xf1, 0x00, 0x27, 0x55, 0x7e, 0xfa, 0x8d, 0x99, 0x4d, 0x6b, 0x03, 0x0c, 0xd7, 0xb1,
	0xe8, 0x88, 0xfc, 0x5b, 0x66, 0xa1, 0x40, 0xd8, 0x1a, 0xfd, 0x76, 0x83, 0x21, 0xe9, 0x78, 0x80,
	0xae, 0xd0, 0x21, 0xed, 0x7f, 0x71, 0xd8, 0x33, 0x2d, 0x38, 0x77, 0x79, 0xe4, 0x58, 0xf4, 0x82,
	0xf4, 0xdc, 0x15, 0x04, 0xcf, 0x15, 0xa9, 0x49, 0x57, 0x0f, 0x51, 0x52, 0x2b, 0xe1, 0x88, 0xfc,
	0xff, 0xdc, 0xd4, 0x94, 0xd5, 0x20, 0xfe, 0xa1, 0x2a, 0x4e, 0xda, 0xd3, 0x54, 0xab, 0x38, 0x6e,
	0xd2, 0x1d, 0xd4, 0x75, 0xa2, 0xec, 0x67, 0x3c, 0x23, 0x1d, 0x78, 0x65, 0x91, 0xce, 0x82, 0x87,
	0xeb, 0x48, 0xe2, 0x6a, 0xed, 0xb3, 0x40, 0x25, 0x7c, 0x9a, 0x82, 0xaf, 0x05, 0x37, 0x17, 0xe0,
	0x2a, 0xa5, 0x43, 0x99, 0x0a, 0x54, 0x9a, 0x17, 0x54, 0xbe, 0x77, 0xb3, 0xe6, 0xf1, 0xf6, 0xb7,
	0x75, 0xbf, 0xf0, 0xfc, 0x76, 0xd9, 0xe0, 0xf9, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xb5,
	0x8e, 0x72, 0xd8, 0x02, 0x00, 0x00,
}
