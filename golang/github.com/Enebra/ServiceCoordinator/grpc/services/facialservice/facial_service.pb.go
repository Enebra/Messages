// Code generated by protoc-gen-go.
// source: services/facial_service.proto
// DO NOT EDIT!

/*
Package facialservice is a generated protocol buffer package.

It is generated from these files:
	services/facial_service.proto

It has these top-level messages:
	BiometricRequest
	BiometricResponse
	BiometricUpdate
*/
package facialservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import DataTypes5 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/person"
import DataTypes4 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/photo"
import DataTypes "github.com/Enebra/ServiceCoordinator/grpc/datatypes/key"
import DataTypes7 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/group"
import DataTypes3 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/biometrics"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TODO move to queries
type BiometricRequest struct {
	Photo  *DataTypes4.Photo        `protobuf:"bytes,1,opt,name=photo" json:"photo,omitempty"`
	Person *DataTypes.Key           `protobuf:"bytes,2,opt,name=person" json:"person,omitempty"`
	Group  *DataTypes.Key           `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Action DataTypes3.BioActionType `protobuf:"varint,4,opt,name=action,enum=DataTypes.BioActionType" json:"action,omitempty"`
	Type   DataTypes3.BiometricType `protobuf:"varint,5,opt,name=type,enum=DataTypes.BiometricType" json:"type,omitempty"`
}

func (m *BiometricRequest) Reset()                    { *m = BiometricRequest{} }
func (m *BiometricRequest) String() string            { return proto.CompactTextString(m) }
func (*BiometricRequest) ProtoMessage()               {}
func (*BiometricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BiometricRequest) GetPhoto() *DataTypes4.Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *BiometricRequest) GetPerson() *DataTypes.Key {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *BiometricRequest) GetGroup() *DataTypes.Key {
	if m != nil {
		return m.Group
	}
	return nil
}

type BiometricResponse struct {
	Photo   *DataTypes4.Photo `protobuf:"bytes,1,opt,name=photo" json:"photo,omitempty"`
	Person  *DataTypes.Key    `protobuf:"bytes,2,opt,name=person" json:"person,omitempty"`
	Faces   *DataTypes3.Faces `protobuf:"bytes,3,opt,name=faces" json:"faces,omitempty"`
	Success bool              `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

func (m *BiometricResponse) Reset()                    { *m = BiometricResponse{} }
func (m *BiometricResponse) String() string            { return proto.CompactTextString(m) }
func (*BiometricResponse) ProtoMessage()               {}
func (*BiometricResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BiometricResponse) GetPhoto() *DataTypes4.Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *BiometricResponse) GetPerson() *DataTypes.Key {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *BiometricResponse) GetFaces() *DataTypes3.Faces {
	if m != nil {
		return m.Faces
	}
	return nil
}

type BiometricUpdate struct {
	// Types that are valid to be assigned to UpdateType:
	//	*BiometricUpdate_PersonUpdates
	//	*BiometricUpdate_GroupUpdates
	UpdateType isBiometricUpdate_UpdateType `protobuf_oneof:"update_type"`
}

func (m *BiometricUpdate) Reset()                    { *m = BiometricUpdate{} }
func (m *BiometricUpdate) String() string            { return proto.CompactTextString(m) }
func (*BiometricUpdate) ProtoMessage()               {}
func (*BiometricUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isBiometricUpdate_UpdateType interface {
	isBiometricUpdate_UpdateType()
}

type BiometricUpdate_PersonUpdates struct {
	PersonUpdates *DataTypes5.Person `protobuf:"bytes,2,opt,name=person_updates,json=personUpdates,oneof"`
}
type BiometricUpdate_GroupUpdates struct {
	GroupUpdates *DataTypes7.Group `protobuf:"bytes,4,opt,name=group_updates,json=groupUpdates,oneof"`
}

func (*BiometricUpdate_PersonUpdates) isBiometricUpdate_UpdateType() {}
func (*BiometricUpdate_GroupUpdates) isBiometricUpdate_UpdateType()  {}

func (m *BiometricUpdate) GetUpdateType() isBiometricUpdate_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return nil
}

func (m *BiometricUpdate) GetPersonUpdates() *DataTypes5.Person {
	if x, ok := m.GetUpdateType().(*BiometricUpdate_PersonUpdates); ok {
		return x.PersonUpdates
	}
	return nil
}

func (m *BiometricUpdate) GetGroupUpdates() *DataTypes7.Group {
	if x, ok := m.GetUpdateType().(*BiometricUpdate_GroupUpdates); ok {
		return x.GroupUpdates
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BiometricUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BiometricUpdate_OneofMarshaler, _BiometricUpdate_OneofUnmarshaler, _BiometricUpdate_OneofSizer, []interface{}{
		(*BiometricUpdate_PersonUpdates)(nil),
		(*BiometricUpdate_GroupUpdates)(nil),
	}
}

func _BiometricUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BiometricUpdate)
	// update_type
	switch x := m.UpdateType.(type) {
	case *BiometricUpdate_PersonUpdates:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersonUpdates); err != nil {
			return err
		}
	case *BiometricUpdate_GroupUpdates:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupUpdates); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BiometricUpdate.UpdateType has unexpected type %T", x)
	}
	return nil
}

func _BiometricUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BiometricUpdate)
	switch tag {
	case 2: // update_type.person_updates
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataTypes5.Person)
		err := b.DecodeMessage(msg)
		m.UpdateType = &BiometricUpdate_PersonUpdates{msg}
		return true, err
	case 4: // update_type.group_updates
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataTypes7.Group)
		err := b.DecodeMessage(msg)
		m.UpdateType = &BiometricUpdate_GroupUpdates{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BiometricUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BiometricUpdate)
	// update_type
	switch x := m.UpdateType.(type) {
	case *BiometricUpdate_PersonUpdates:
		s := proto.Size(x.PersonUpdates)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BiometricUpdate_GroupUpdates:
		s := proto.Size(x.GroupUpdates)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*BiometricRequest)(nil), "Services.BiometricRequest")
	proto.RegisterType((*BiometricResponse)(nil), "Services.BiometricResponse")
	proto.RegisterType((*BiometricUpdate)(nil), "Services.BiometricUpdate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for BiometricFacialService service

type BiometricFacialServiceClient interface {
	Process(ctx context.Context, in *BiometricRequest, opts ...grpc.CallOption) (*BiometricResponse, error)
	Update(ctx context.Context, in *BiometricUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type biometricFacialServiceClient struct {
	cc *grpc.ClientConn
}

func NewBiometricFacialServiceClient(cc *grpc.ClientConn) BiometricFacialServiceClient {
	return &biometricFacialServiceClient{cc}
}

func (c *biometricFacialServiceClient) Process(ctx context.Context, in *BiometricRequest, opts ...grpc.CallOption) (*BiometricResponse, error) {
	out := new(BiometricResponse)
	err := grpc.Invoke(ctx, "/Services.BiometricFacialService/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) Update(ctx context.Context, in *BiometricUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.BiometricFacialService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BiometricFacialService service

type BiometricFacialServiceServer interface {
	Process(context.Context, *BiometricRequest) (*BiometricResponse, error)
	Update(context.Context, *BiometricUpdate) (*google_protobuf.Empty, error)
}

func RegisterBiometricFacialServiceServer(s *grpc.Server, srv BiometricFacialServiceServer) {
	s.RegisterService(&_BiometricFacialService_serviceDesc, srv)
}

func _BiometricFacialService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiometricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.BiometricFacialService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Process(ctx, req.(*BiometricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiometricUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.BiometricFacialService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Update(ctx, req.(*BiometricUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiometricFacialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Services.BiometricFacialService",
	HandlerType: (*BiometricFacialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _BiometricFacialService_Process_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BiometricFacialService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("services/facial_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x36, 0x1f, 0xd5, 0x94, 0x84, 0x76, 0x11, 0x91, 0x71, 0x85, 0x54, 0x59, 0x28,
	0xea, 0x01, 0xad, 0x51, 0x38, 0x20, 0x21, 0x21, 0x41, 0xe8, 0x97, 0xc4, 0xa5, 0x98, 0x72, 0xe1,
	0x12, 0xad, 0x37, 0x1b, 0xd7, 0xa2, 0xf1, 0x98, 0xdd, 0x35, 0x22, 0x3f, 0x84, 0x23, 0x17, 0x24,
	0xfe, 0x1b, 0x3f, 0x03, 0xed, 0x47, 0x52, 0xab, 0xc9, 0x91, 0xe3, 0xcc, 0xfb, 0xcc, 0xe4, 0x7d,
	0x37, 0x63, 0x78, 0xaa, 0x84, 0xfc, 0x5e, 0x70, 0xa1, 0x92, 0x39, 0xe3, 0x05, 0xbb, 0x9d, 0xfa,
	0x9a, 0x56, 0x12, 0x35, 0x92, 0xbd, 0x4f, 0x5e, 0x8e, 0x86, 0x33, 0xa6, 0x99, 0x5e, 0x56, 0x42,
	0x25, 0x95, 0x90, 0x0a, 0x4b, 0x47, 0x44, 0x8f, 0x1b, 0xfd, 0x1b, 0xd4, 0xe8, 0xdb, 0x8f, 0xee,
	0xda, 0x5f, 0xc5, 0x72, 0x93, 0xcd, 0x25, 0xd6, 0x95, 0x6f, 0x47, 0x77, 0xed, 0xac, 0xc0, 0x85,
	0xd0, 0xb2, 0xe0, 0xca, 0x6b, 0x47, 0x39, 0x62, 0x7e, 0x2b, 0x12, 0x5b, 0x65, 0xf5, 0x3c, 0x11,
	0x8b, 0x4a, 0xfb, 0x7d, 0xf1, 0xdf, 0x00, 0x0e, 0x26, 0xab, 0x89, 0x54, 0x7c, 0xab, 0x85, 0xd2,
	0x64, 0x04, 0x1d, 0x6b, 0x24, 0x0c, 0x8e, 0x83, 0x93, 0xfd, 0xf1, 0x01, 0x3d, 0x65, 0x9a, 0x5d,
	0x9b, 0xed, 0xf4, 0xca, 0xf4, 0x53, 0x27, 0x93, 0x11, 0x74, 0x5d, 0x90, 0x70, 0xc7, 0x82, 0x83,
	0x06, 0xf8, 0x41, 0x2c, 0x53, 0xaf, 0x92, 0x67, 0xd0, 0xb1, 0x66, 0xc3, 0xdd, 0xad, 0x98, 0x13,
	0xc9, 0x0b, 0xe8, 0x32, 0xae, 0x0b, 0x2c, 0xc3, 0xf6, 0x71, 0x70, 0x32, 0x18, 0x87, 0x0d, 0x6c,
	0x52, 0xe0, 0x3b, 0xab, 0x99, 0x32, 0xf5, 0x1c, 0x79, 0x0e, 0x6d, 0x93, 0x39, 0xec, 0x6c, 0xe3,
	0x5d, 0x24, 0xcb, 0x5b, 0x2a, 0xfe, 0x13, 0xc0, 0x61, 0x23, 0xaa, 0xaa, 0xb0, 0x54, 0xe2, 0xbf,
	0x67, 0x1d, 0x41, 0x67, 0xce, 0xb8, 0x50, 0x3e, 0x6b, 0x73, 0xdf, 0xb9, 0xe9, 0xa7, 0x4e, 0x26,
	0x21, 0xf4, 0x54, 0xcd, 0xb9, 0x50, 0xca, 0xc6, 0xdd, 0x4b, 0x57, 0x65, 0xfc, 0x33, 0x80, 0x87,
	0x6b, 0x9f, 0x9f, 0xab, 0x19, 0xd3, 0x82, 0xbc, 0x86, 0x81, 0xdb, 0x3f, 0xad, 0x6d, 0x43, 0x79,
	0x17, 0x87, 0x4d, 0xbb, 0x16, 0xb8, 0x6c, 0xa5, 0x7d, 0x87, 0xba, 0x51, 0x45, 0x5e, 0x41, 0xdf,
	0x3e, 0xf0, 0x7a, 0xb4, 0xbd, 0xe1, 0xec, 0xc2, 0xe8, 0x97, 0xad, 0xf4, 0x81, 0x05, 0xfd, 0xe0,
	0xa4, 0x0f, 0xfb, 0x6e, 0x64, 0x6a, 0xde, 0x6f, 0xfc, 0x2b, 0x80, 0xe1, 0xda, 0xd7, 0xb9, 0x3d,
	0x75, 0x7f, 0xda, 0xe4, 0x14, 0x7a, 0x57, 0x12, 0x8d, 0x7b, 0x12, 0xd1, 0xd5, 0xbd, 0xd3, 0xfb,
	0x77, 0x15, 0x1d, 0x6d, 0xd5, 0xdc, 0x1f, 0x11, 0xb7, 0xc8, 0x1b, 0xe8, 0xfa, 0xb8, 0x4f, 0xb6,
	0x80, 0x4e, 0x8a, 0x86, 0xd4, 0x9d, 0x33, 0x5d, 0x9d, 0x33, 0x3d, 0x33, 0xe7, 0x1c, 0xb7, 0x26,
	0x1f, 0xa1, 0x27, 0x7e, 0xd0, 0x5c, 0x56, 0xfc, 0xcb, 0xdb, 0xbc, 0xd0, 0x37, 0x75, 0x46, 0x39,
	0x2e, 0x92, 0xb3, 0x52, 0x64, 0x92, 0x25, 0x7e, 0xe1, 0x7b, 0x44, 0x39, 0x2b, 0x4a, 0xa6, 0x51,
	0x26, 0x06, 0x4d, 0xee, 0x7d, 0xbc, 0xbe, 0xfc, 0xbd, 0xb3, 0x9b, 0x5e, 0x5f, 0x64, 0x5d, 0xfb,
	0x23, 0x2f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x97, 0xe5, 0x56, 0xe3, 0x03, 0x00, 0x00,
}
