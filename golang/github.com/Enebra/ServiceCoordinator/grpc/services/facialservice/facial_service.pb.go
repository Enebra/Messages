// Code generated by protoc-gen-go.
// source: services/facial_service.proto
// DO NOT EDIT!

/*
Package facialservice is a generated protocol buffer package.

It is generated from these files:
	services/facial_service.proto

It has these top-level messages:
	PopulationCreationResponse
	VerificationData
	IdentificationData
	FaceSearchResponse
*/
package facialservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import DataTypes3 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/photo"
import DataTypes2 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/biometrics"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PopulationCreationResponse struct {
	Id    int64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Faces []*DataTypes2.Faces `protobuf:"bytes,2,rep,name=faces" json:"faces,omitempty"`
}

func (m *PopulationCreationResponse) Reset()                    { *m = PopulationCreationResponse{} }
func (m *PopulationCreationResponse) String() string            { return proto.CompactTextString(m) }
func (*PopulationCreationResponse) ProtoMessage()               {}
func (*PopulationCreationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PopulationCreationResponse) GetFaces() []*DataTypes2.Faces {
	if m != nil {
		return m.Faces
	}
	return nil
}

type VerificationData struct {
	TargetImage        *DataTypes3.Photo `protobuf:"bytes,1,opt,name=target_image,json=targetImage" json:"target_image,omitempty"`
	ComparisonImage    *DataTypes3.Photo `protobuf:"bytes,2,opt,name=comparison_image,json=comparisonImage" json:"comparison_image,omitempty"`
	ComparisonPersonId int64             `protobuf:"varint,3,opt,name=comparison_person_id,json=comparisonPersonId" json:"comparison_person_id,omitempty"`
}

func (m *VerificationData) Reset()                    { *m = VerificationData{} }
func (m *VerificationData) String() string            { return proto.CompactTextString(m) }
func (*VerificationData) ProtoMessage()               {}
func (*VerificationData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VerificationData) GetTargetImage() *DataTypes3.Photo {
	if m != nil {
		return m.TargetImage
	}
	return nil
}

func (m *VerificationData) GetComparisonImage() *DataTypes3.Photo {
	if m != nil {
		return m.ComparisonImage
	}
	return nil
}

type IdentificationData struct {
	TargetImage  *DataTypes3.Photo `protobuf:"bytes,1,opt,name=target_image,json=targetImage" json:"target_image,omitempty"`
	PopulationId int64             `protobuf:"varint,2,opt,name=population_id,json=populationId" json:"population_id,omitempty"`
}

func (m *IdentificationData) Reset()                    { *m = IdentificationData{} }
func (m *IdentificationData) String() string            { return proto.CompactTextString(m) }
func (*IdentificationData) ProtoMessage()               {}
func (*IdentificationData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IdentificationData) GetTargetImage() *DataTypes3.Photo {
	if m != nil {
		return m.TargetImage
	}
	return nil
}

type FaceSearchResponse struct {
	Faces   []*DataTypes2.Faces   `protobuf:"bytes,1,rep,name=faces" json:"faces,omitempty"`
	Matches []*DataTypes2.Matches `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
}

func (m *FaceSearchResponse) Reset()                    { *m = FaceSearchResponse{} }
func (m *FaceSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*FaceSearchResponse) ProtoMessage()               {}
func (*FaceSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FaceSearchResponse) GetFaces() []*DataTypes2.Faces {
	if m != nil {
		return m.Faces
	}
	return nil
}

func (m *FaceSearchResponse) GetMatches() []*DataTypes2.Matches {
	if m != nil {
		return m.Matches
	}
	return nil
}

func init() {
	proto.RegisterType((*PopulationCreationResponse)(nil), "Services.PopulationCreationResponse")
	proto.RegisterType((*VerificationData)(nil), "Services.VerificationData")
	proto.RegisterType((*IdentificationData)(nil), "Services.IdentificationData")
	proto.RegisterType((*FaceSearchResponse)(nil), "Services.FaceSearchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for BiometricFacialService service

type BiometricFacialServiceClient interface {
	Acquire(ctx context.Context, in *DataTypes3.Photo, opts ...grpc.CallOption) (*DataTypes2.Faces, error)
	CreatePopulation(ctx context.Context, in *DataTypes3.Photos, opts ...grpc.CallOption) (*PopulationCreationResponse, error)
	Verify(ctx context.Context, in *VerificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error)
	Identify(ctx context.Context, in *IdentificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error)
}

type biometricFacialServiceClient struct {
	cc *grpc.ClientConn
}

func NewBiometricFacialServiceClient(cc *grpc.ClientConn) BiometricFacialServiceClient {
	return &biometricFacialServiceClient{cc}
}

func (c *biometricFacialServiceClient) Acquire(ctx context.Context, in *DataTypes3.Photo, opts ...grpc.CallOption) (*DataTypes2.Faces, error) {
	out := new(DataTypes2.Faces)
	err := grpc.Invoke(ctx, "/Services.BiometricFacialService/Acquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) CreatePopulation(ctx context.Context, in *DataTypes3.Photos, opts ...grpc.CallOption) (*PopulationCreationResponse, error) {
	out := new(PopulationCreationResponse)
	err := grpc.Invoke(ctx, "/Services.BiometricFacialService/CreatePopulation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) Verify(ctx context.Context, in *VerificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error) {
	out := new(FaceSearchResponse)
	err := grpc.Invoke(ctx, "/Services.BiometricFacialService/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biometricFacialServiceClient) Identify(ctx context.Context, in *IdentificationData, opts ...grpc.CallOption) (*FaceSearchResponse, error) {
	out := new(FaceSearchResponse)
	err := grpc.Invoke(ctx, "/Services.BiometricFacialService/Identify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BiometricFacialService service

type BiometricFacialServiceServer interface {
	Acquire(context.Context, *DataTypes3.Photo) (*DataTypes2.Faces, error)
	CreatePopulation(context.Context, *DataTypes3.Photos) (*PopulationCreationResponse, error)
	Verify(context.Context, *VerificationData) (*FaceSearchResponse, error)
	Identify(context.Context, *IdentificationData) (*FaceSearchResponse, error)
}

func RegisterBiometricFacialServiceServer(s *grpc.Server, srv BiometricFacialServiceServer) {
	s.RegisterService(&_BiometricFacialService_serviceDesc, srv)
}

func _BiometricFacialService_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes3.Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.BiometricFacialService/Acquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Acquire(ctx, req.(*DataTypes3.Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_CreatePopulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes3.Photos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).CreatePopulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.BiometricFacialService/CreatePopulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).CreatePopulation(ctx, req.(*DataTypes3.Photos))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.BiometricFacialService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Verify(ctx, req.(*VerificationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiometricFacialService_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentificationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiometricFacialServiceServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.BiometricFacialService/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiometricFacialServiceServer).Identify(ctx, req.(*IdentificationData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiometricFacialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Services.BiometricFacialService",
	HandlerType: (*BiometricFacialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _BiometricFacialService_Acquire_Handler,
		},
		{
			MethodName: "CreatePopulation",
			Handler:    _BiometricFacialService_CreatePopulation_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _BiometricFacialService_Verify_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _BiometricFacialService_Identify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("services/facial_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x6f, 0x53, 0xb1, 0x4e, 0x6f, 0x03, 0xca, 0x13, 0xa0, 0x2a, 0x02, 0x69, 0x0a, 0x08, 0xed,
	0x80, 0x12, 0xb4, 0x1d, 0xb9, 0xc0, 0x36, 0x06, 0x3d, 0x4c, 0x2a, 0x59, 0xc5, 0x81, 0xcb, 0xe4,
	0xda, 0xaf, 0xad, 0xd1, 0x12, 0x1b, 0xdb, 0x45, 0xf4, 0xeb, 0x70, 0xe2, 0x13, 0xf0, 0xf9, 0x90,
	0x9d, 0xb4, 0x29, 0xad, 0x0a, 0x17, 0x4e, 0x51, 0xfc, 0xfb, 0x63, 0xfb, 0xf7, 0x7e, 0x86, 0xa7,
	0x96, 0xcc, 0x37, 0xc9, 0xc9, 0x66, 0x13, 0xc6, 0x25, 0xbb, 0xbd, 0xa9, 0xff, 0x53, 0x6d, 0x94,
	0x53, 0xb8, 0x7f, 0x5d, 0xc3, 0xf1, 0x23, 0xc1, 0x1c, 0x73, 0x0b, 0x4d, 0x36, 0xd3, 0x33, 0xe5,
	0x54, 0x45, 0x88, 0xe3, 0x66, 0x79, 0x2c, 0x55, 0x41, 0xce, 0x48, 0x6e, 0x2b, 0x2c, 0x19, 0x41,
	0x3c, 0x54, 0x7a, 0x7e, 0xcb, 0x9c, 0x54, 0xe5, 0xb9, 0xa1, 0xf0, 0xcd, 0xc9, 0x6a, 0x55, 0x5a,
	0xc2, 0x7b, 0x10, 0x49, 0xd1, 0x6f, 0x1f, 0xb5, 0x8f, 0x3b, 0x79, 0x24, 0x05, 0xbe, 0x80, 0x3b,
	0x13, 0xc6, 0xc9, 0xf6, 0xa3, 0xa3, 0xce, 0xf1, 0xc1, 0x49, 0x2f, 0xbd, 0x60, 0x8e, 0x8d, 0xbc,
	0x73, 0x7a, 0xe9, 0xd7, 0xf3, 0x0a, 0x4e, 0x7e, 0xb5, 0xa1, 0xf7, 0x89, 0x8c, 0x9c, 0x48, 0x1e,
	0x0c, 0x3d, 0x0d, 0x4f, 0xe1, 0xd0, 0x31, 0x33, 0x25, 0x77, 0x23, 0x0b, 0x36, 0xa5, 0x60, 0xfb,
	0xa7, 0xc7, 0xd0, 0x1f, 0x3a, 0x3f, 0xa8, 0x58, 0x03, 0x4f, 0xc2, 0xd7, 0xd0, 0xe3, 0xaa, 0xd0,
	0xcc, 0x48, 0xab, 0xca, 0x5a, 0x18, 0xed, 0x10, 0xde, 0x6f, 0x98, 0x95, 0xf8, 0x15, 0x3c, 0x5c,
	0x13, 0x6b, 0x32, 0xc1, 0x43, 0xf4, 0x3b, 0xe1, 0x42, 0xd8, 0x60, 0xc3, 0x00, 0x0d, 0x44, 0x52,
	0x02, 0x0e, 0x04, 0x95, 0xee, 0x3f, 0x9c, 0xfc, 0x19, 0xdc, 0xd5, 0xab, 0x64, 0xfd, 0xae, 0x51,
	0xd8, 0xf5, 0xb0, 0x59, 0x1c, 0x88, 0xe4, 0x0b, 0xa0, 0x0f, 0xee, 0x9a, 0x98, 0xe1, 0xb3, 0x55,
	0xec, 0xab, 0x98, 0xdb, 0x7f, 0x8d, 0x19, 0x5f, 0x42, 0xb7, 0x60, 0x8e, 0xcf, 0x56, 0x03, 0xc1,
	0x35, 0xe6, 0x55, 0x85, 0xe4, 0x4b, 0xca, 0xc9, 0xcf, 0x08, 0x1e, 0x9f, 0x2d, 0xe7, 0x7f, 0x19,
	0x9a, 0x54, 0x37, 0x07, 0x33, 0xe8, 0xbe, 0xe5, 0x5f, 0xe7, 0xd2, 0x10, 0x6e, 0xdd, 0x2a, 0xde,
	0xda, 0x3e, 0x69, 0xe1, 0x15, 0xf4, 0x42, 0x59, 0xa8, 0x29, 0x0f, 0x3e, 0xd8, 0x54, 0xda, 0xf8,
	0x79, 0xba, 0xec, 0x66, 0xba, 0xbb, 0x65, 0x49, 0x0b, 0x2f, 0x60, 0x2f, 0xd4, 0x65, 0x81, 0x71,
	0xa3, 0xd8, 0x2c, 0x50, 0xfc, 0xa4, 0xc1, 0xb6, 0x43, 0x4b, 0x5a, 0xf8, 0x01, 0xf6, 0xeb, 0xe1,
	0x2d, 0x70, 0x8d, 0xbb, 0x3d, 0xd0, 0x7f, 0x39, 0x9d, 0x7d, 0x84, 0x2e, 0x7d, 0x4f, 0xa7, 0x46,
	0xf3, 0xcf, 0x6f, 0xa6, 0xd2, 0xcd, 0xe6, 0xe3, 0x94, 0xab, 0x22, 0x7b, 0x57, 0xd2, 0xd8, 0xb0,
	0xac, 0xd6, 0x9e, 0x2b, 0x65, 0x84, 0x2c, 0x99, 0x53, 0x26, 0xf3, 0xd4, 0x6c, 0xe3, 0x99, 0xd6,
	0xbf, 0x3f, 0xa2, 0x4e, 0x3e, 0x7a, 0x3f, 0xde, 0x0b, 0xef, 0xed, 0xf4, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9d, 0x8a, 0x86, 0x54, 0xcd, 0x03, 0x00, 0x00,
}
