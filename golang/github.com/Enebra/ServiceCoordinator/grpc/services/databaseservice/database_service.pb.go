// Code generated by protoc-gen-go.
// source: services/database_service.proto
// DO NOT EDIT!

/*
Package databaseservice is a generated protocol buffer package.

It is generated from these files:
	services/database_service.proto

It has these top-level messages:
*/
package databaseservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import DataTypes11 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/data"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DatabaseService service

type DatabaseServiceClient interface {
	Get(ctx context.Context, in *DataTypes11.MessageBytes, opts ...grpc.CallOption) (*DataTypes11.MessageBytes, error)
	Commit(ctx context.Context, in *DataTypes11.MessageBytes, opts ...grpc.CallOption) (*DataTypes11.MessageBytes, error)
}

type databaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseServiceClient(cc *grpc.ClientConn) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) Get(ctx context.Context, in *DataTypes11.MessageBytes, opts ...grpc.CallOption) (*DataTypes11.MessageBytes, error) {
	out := new(DataTypes11.MessageBytes)
	err := grpc.Invoke(ctx, "/Services.DatabaseService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Commit(ctx context.Context, in *DataTypes11.MessageBytes, opts ...grpc.CallOption) (*DataTypes11.MessageBytes, error) {
	out := new(DataTypes11.MessageBytes)
	err := grpc.Invoke(ctx, "/Services.DatabaseService/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatabaseService service

type DatabaseServiceServer interface {
	Get(context.Context, *DataTypes11.MessageBytes) (*DataTypes11.MessageBytes, error)
	Commit(context.Context, *DataTypes11.MessageBytes) (*DataTypes11.MessageBytes, error)
}

func RegisterDatabaseServiceServer(s *grpc.Server, srv DatabaseServiceServer) {
	s.RegisterService(&_DatabaseService_serviceDesc, srv)
}

func _DatabaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes11.MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.DatabaseService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Get(ctx, req.(*DataTypes11.MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes11.MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.DatabaseService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Commit(ctx, req.(*DataTypes11.MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Services.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DatabaseService_Get_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _DatabaseService_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("services/database_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0x49, 0x2c, 0x49, 0x4c, 0x4a, 0x2c, 0x4e, 0x8d, 0x87, 0x8a,
	0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x04, 0x43, 0x15, 0x48, 0x89, 0x80, 0x54, 0x94,
	0x54, 0x16, 0x40, 0xd5, 0x42, 0xe4, 0x8d, 0xba, 0x18, 0xb9, 0xf8, 0x5d, 0xa0, 0x5a, 0xa1, 0x4a,
	0x85, 0x2c, 0xb9, 0x98, 0xdd, 0x53, 0x4b, 0x84, 0xc4, 0xf5, 0x40, 0x12, 0x21, 0x20, 0x1d, 0x7a,
	0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x4e, 0x95, 0x25, 0xa9, 0xc5, 0x52, 0xb8, 0x24, 0x94,
	0x18, 0x84, 0x6c, 0xb8, 0xd8, 0x9c, 0xf3, 0x73, 0x73, 0x33, 0xc9, 0xd2, 0xed, 0x14, 0xcc, 0xc5,
	0x9e, 0x5a, 0xa1, 0x97, 0x5e, 0x54, 0x90, 0x1c, 0xe5, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4,
	0x97, 0x9c, 0x9f, 0xab, 0xef, 0x9a, 0x97, 0x9a, 0x54, 0x94, 0xa8, 0x0f, 0x75, 0x9e, 0x73, 0x7e,
	0x7e, 0x51, 0x4a, 0x66, 0x5e, 0x62, 0x49, 0x7e, 0x91, 0x3e, 0x48, 0xa9, 0x3e, 0x46, 0x10, 0x40,
	0x05, 0x16, 0x31, 0x31, 0x07, 0x85, 0xb8, 0x27, 0xb1, 0x81, 0x3d, 0x6a, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x68, 0x4f, 0x30, 0xcb, 0x2b, 0x01, 0x00, 0x00,
}
