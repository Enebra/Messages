// Code generated by protoc-gen-go.
// source: services/coordinator_service.proto
// DO NOT EDIT!

/*
Package coordinatorservice is a generated protocol buffer package.

It is generated from these files:
	services/coordinator_service.proto

It has these top-level messages:
*/
package coordinatorservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import DataTypes3 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/unit"
import DataTypes12 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/data"
import DataTypes1 "github.com/Enebra/ServiceCoordinator/grpc/datatypes/devices"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CoordinatorService service

type CoordinatorServiceClient interface {
	Connect(ctx context.Context, in *DataTypes3.ConnectMsg, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Heartbeat(ctx context.Context, in *DataTypes3.HeartbeatMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetUnits(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DataTypes3.Units, error)
	Subscribe(ctx context.Context, in *DataTypes3.SubscriptionMsg, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Unsubscribe(ctx context.Context, in *DataTypes3.SubscriptionMsg, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Get(ctx context.Context, in *DataTypes12.MessageBytes, opts ...grpc.CallOption) (*DataTypes12.MessageBytes, error)
	// update locations/visitrecords rely on commit
	Commit(ctx context.Context, in *DataTypes12.MessageBytes, opts ...grpc.CallOption) (*DataTypes12.MessageBytes, error)
	UpdateDevices(ctx context.Context, in *DataTypes1.DeviceUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type coordinatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorServiceClient(cc *grpc.ClientConn) CoordinatorServiceClient {
	return &coordinatorServiceClient{cc}
}

func (c *coordinatorServiceClient) Connect(ctx context.Context, in *DataTypes3.ConnectMsg, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Heartbeat(ctx context.Context, in *DataTypes3.HeartbeatMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) GetUnits(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DataTypes3.Units, error) {
	out := new(DataTypes3.Units)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/GetUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Subscribe(ctx context.Context, in *DataTypes3.SubscriptionMsg, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Unsubscribe(ctx context.Context, in *DataTypes3.SubscriptionMsg, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Get(ctx context.Context, in *DataTypes12.MessageBytes, opts ...grpc.CallOption) (*DataTypes12.MessageBytes, error) {
	out := new(DataTypes12.MessageBytes)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) Commit(ctx context.Context, in *DataTypes12.MessageBytes, opts ...grpc.CallOption) (*DataTypes12.MessageBytes, error) {
	out := new(DataTypes12.MessageBytes)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorServiceClient) UpdateDevices(ctx context.Context, in *DataTypes1.DeviceUpdate, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/Services.CoordinatorService/UpdateDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoordinatorService service

type CoordinatorServiceServer interface {
	Connect(context.Context, *DataTypes3.ConnectMsg) (*google_protobuf.Empty, error)
	Heartbeat(context.Context, *DataTypes3.HeartbeatMessage) (*google_protobuf.Empty, error)
	GetUnits(context.Context, *google_protobuf.Empty) (*DataTypes3.Units, error)
	Subscribe(context.Context, *DataTypes3.SubscriptionMsg) (*google_protobuf.Empty, error)
	Unsubscribe(context.Context, *DataTypes3.SubscriptionMsg) (*google_protobuf.Empty, error)
	Get(context.Context, *DataTypes12.MessageBytes) (*DataTypes12.MessageBytes, error)
	// update locations/visitrecords rely on commit
	Commit(context.Context, *DataTypes12.MessageBytes) (*DataTypes12.MessageBytes, error)
	UpdateDevices(context.Context, *DataTypes1.DeviceUpdate) (*google_protobuf.Empty, error)
}

func RegisterCoordinatorServiceServer(s *grpc.Server, srv CoordinatorServiceServer) {
	s.RegisterService(&_CoordinatorService_serviceDesc, srv)
}

func _CoordinatorService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes3.ConnectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Connect(ctx, req.(*DataTypes3.ConnectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes3.HeartbeatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Heartbeat(ctx, req.(*DataTypes3.HeartbeatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_GetUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).GetUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/GetUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).GetUnits(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes3.SubscriptionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Subscribe(ctx, req.(*DataTypes3.SubscriptionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes3.SubscriptionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Unsubscribe(ctx, req.(*DataTypes3.SubscriptionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes12.MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Get(ctx, req.(*DataTypes12.MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes12.MessageBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).Commit(ctx, req.(*DataTypes12.MessageBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorService_UpdateDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTypes1.DeviceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).UpdateDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services.CoordinatorService/UpdateDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).UpdateDevices(ctx, req.(*DataTypes1.DeviceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoordinatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Services.CoordinatorService",
	HandlerType: (*CoordinatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _CoordinatorService_Connect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _CoordinatorService_Heartbeat_Handler,
		},
		{
			MethodName: "GetUnits",
			Handler:    _CoordinatorService_GetUnits_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _CoordinatorService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _CoordinatorService_Unsubscribe_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CoordinatorService_Get_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _CoordinatorService_Commit_Handler,
		},
		{
			MethodName: "UpdateDevices",
			Handler:    _CoordinatorService_UpdateDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("services/coordinator_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x8b, 0x95, 0xfe, 0x8c, 0x08, 0x32, 0xa8, 0x85, 0x74, 0x97, 0x07, 0x98, 0x01, 0x05,
	0x41, 0x71, 0x63, 0xd2, 0x52, 0x37, 0xdd, 0xd8, 0xd6, 0x85, 0x1b, 0x99, 0x49, 0xaf, 0x71, 0xc0,
	0xcc, 0x84, 0x99, 0x1b, 0xb1, 0x8f, 0xe1, 0x2b, 0xf8, 0xa4, 0x92, 0x64, 0xd4, 0x88, 0xa6, 0x0b,
	0xdd, 0x85, 0xef, 0x9e, 0x73, 0xee, 0x09, 0x73, 0x49, 0xe8, 0xc0, 0x3e, 0xab, 0x04, 0x1c, 0x4f,
	0x8c, 0xb1, 0x6b, 0xa5, 0x05, 0x1a, 0x7b, 0xef, 0x21, 0xcb, 0xad, 0x41, 0x43, 0x07, 0x0b, 0xaf,
	0x09, 0xc6, 0xa9, 0x31, 0xe9, 0x13, 0xf0, 0x8a, 0xcb, 0xe2, 0x81, 0x43, 0x96, 0xe3, 0xa6, 0x96,
	0x05, 0x87, 0x6b, 0x81, 0x02, 0x37, 0x39, 0x38, 0x5e, 0x68, 0x85, 0x3f, 0x69, 0xf9, 0xe5, 0xe9,
	0xa8, 0x41, 0xa1, 0xca, 0xae, 0x07, 0x27, 0xaf, 0xbb, 0x84, 0xc6, 0x5f, 0x4d, 0xfc, 0x66, 0x7a,
	0x41, 0xfa, 0xb1, 0xd1, 0x1a, 0x12, 0xa4, 0x47, 0x6c, 0x22, 0x50, 0x2c, 0x4b, 0x2f, 0xf3, 0x6c,
	0xee, 0xd2, 0xe0, 0x98, 0xd5, 0xdd, 0xd8, 0x47, 0x37, 0x36, 0x2d, 0xbb, 0x85, 0x1d, 0x1a, 0x91,
	0xe1, 0x35, 0x08, 0x8b, 0x12, 0x04, 0xd2, 0x71, 0xc3, 0xfd, 0x49, 0xe7, 0xe0, 0x9c, 0x48, 0x61,
	0x4b, 0xc6, 0x19, 0x19, 0xcc, 0x00, 0x57, 0x5a, 0xa1, 0xa3, 0x2d, 0xaa, 0xe0, 0xa0, 0x11, 0x5d,
	0x29, 0xc3, 0x0e, 0xbd, 0x22, 0xc3, 0x45, 0x21, 0x5d, 0x62, 0x95, 0x04, 0x1a, 0x34, 0x04, 0x9e,
	0xe6, 0xa8, 0x8c, 0xde, 0x5e, 0x3f, 0x26, 0x7b, 0x2b, 0xed, 0xfe, 0x19, 0x72, 0x4e, 0xba, 0x33,
	0x40, 0x3a, 0x6a, 0x98, 0xfd, 0x4f, 0x47, 0x1b, 0x04, 0x17, 0xb4, 0x0d, 0xc2, 0x0e, 0xbd, 0x24,
	0xbd, 0xd8, 0x64, 0x99, 0xfa, 0x9b, 0x3b, 0x22, 0xfb, 0xab, 0x7c, 0x2d, 0x10, 0x26, 0xf5, 0x33,
	0x7f, 0x0b, 0xa9, 0x59, 0x3d, 0x6f, 0x2f, 0x1f, 0xdd, 0x92, 0x3e, 0xbc, 0xb0, 0xd4, 0xe6, 0xc9,
	0xdd, 0x34, 0x55, 0xf8, 0x58, 0x48, 0x96, 0x98, 0x8c, 0x4f, 0x35, 0x48, 0x2b, 0xb8, 0x3f, 0x91,
	0xc6, 0xd1, 0xf0, 0x52, 0xca, 0x7f, 0x3b, 0x6c, 0xcf, 0xde, 0x76, 0xba, 0x37, 0xcb, 0x99, 0xec,
	0x55, 0x9b, 0x4e, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x45, 0x1d, 0x3b, 0x0a, 0x04, 0x03, 0x00,
	0x00,
}
