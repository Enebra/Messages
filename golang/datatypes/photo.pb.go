// Code generated by protoc-gen-go.
// source: datatypes/photo.proto
// DO NOT EDIT!

/*
Package DataTypes is a generated protocol buffer package.

It is generated from these files:
	datatypes/photo.proto

It has these top-level messages:
	Photo
	Photos
*/
package DataTypes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import DataTypes3 "datatypes"
import DataTypes2 "datatypes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Purpose int32

const (
	Purpose_NonePurpose Purpose = 0
	Purpose_Thumbnail   Purpose = 1
	Purpose_Population  Purpose = 2
)

var Purpose_name = map[int32]string{
	0: "NonePurpose",
	1: "Thumbnail",
	2: "Population",
}
var Purpose_value = map[string]int32{
	"NonePurpose": 0,
	"Thumbnail":   1,
	"Population":  2,
}

func (x Purpose) String() string {
	return proto.EnumName(Purpose_name, int32(x))
}
func (Purpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Photo struct {
	Id            *DataTypes2.Key          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url           string                   `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Width         int32                    `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height        int32                    `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Purpose       Purpose                  `protobuf:"varint,5,opt,name=purpose,enum=DataTypes.Purpose" json:"purpose,omitempty"`
	BiometricType DataTypes3.BiometricType `protobuf:"varint,6,opt,name=biometric_type,json=biometricType,enum=DataTypes.BiometricType" json:"biometric_type,omitempty"`
	OwnerId       *DataTypes2.Key          `protobuf:"bytes,7,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Photo) GetId() *DataTypes2.Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Photo) GetOwnerId() *DataTypes2.Key {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

type Photos struct {
	Photos []*Photo `protobuf:"bytes,1,rep,name=photos" json:"photos,omitempty"`
	Count  int64    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Photos) Reset()                    { *m = Photos{} }
func (m *Photos) String() string            { return proto.CompactTextString(m) }
func (*Photos) ProtoMessage()               {}
func (*Photos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Photos) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func init() {
	proto.RegisterType((*Photo)(nil), "DataTypes.Photo")
	proto.RegisterType((*Photos)(nil), "DataTypes.Photos")
	proto.RegisterEnum("DataTypes.Purpose", Purpose_name, Purpose_value)
}

func init() { proto.RegisterFile("datatypes/photo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x36, 0xad, 0x6d, 0xdd, 0x1b, 0xeb, 0x4a, 0x98, 0x12, 0x76, 0x90, 0xb2, 0x53, 0x15, 0xa9,
	0x30, 0x4f, 0x9e, 0x84, 0x21, 0xa8, 0x08, 0x32, 0xc2, 0xee, 0xa3, 0x5d, 0xc3, 0x1a, 0xe8, 0x9a,
	0xd0, 0xa6, 0xcc, 0x1d, 0xfd, 0x2b, 0xfe, 0x52, 0x49, 0xda, 0x6d, 0x3d, 0x78, 0x7b, 0xdf, 0xfb,
	0xbe, 0xf7, 0xf2, 0xbe, 0x2f, 0x70, 0x9d, 0x25, 0x2a, 0x51, 0x07, 0xc9, 0xea, 0x47, 0x99, 0x0b,
	0x25, 0x62, 0x59, 0x09, 0x25, 0xf0, 0xe0, 0x35, 0x51, 0xc9, 0x4a, 0xb7, 0xa7, 0xd3, 0xb3, 0x22,
	0xe5, 0x62, 0xc7, 0x54, 0xc5, 0x37, 0x75, 0x2b, 0x9b, 0x4e, 0xce, 0x9c, 0xae, 0xda, 0xee, 0xec,
	0xc7, 0x02, 0x67, 0xa9, 0x97, 0xe1, 0x5b, 0xb0, 0x78, 0x46, 0x50, 0x88, 0xa2, 0xe1, 0xdc, 0x8f,
	0x4f, 0x3b, 0xe3, 0x4f, 0x76, 0xa0, 0x16, 0xcf, 0x70, 0x00, 0x76, 0x53, 0x15, 0xc4, 0x0a, 0x51,
	0x34, 0xa0, 0xba, 0xc4, 0x13, 0x70, 0xf6, 0x3c, 0x53, 0x39, 0xb1, 0x43, 0x14, 0x39, 0xb4, 0x05,
	0xf8, 0x06, 0xdc, 0x9c, 0xf1, 0x6d, 0xae, 0xc8, 0xa5, 0x69, 0x77, 0x08, 0x3f, 0x80, 0x27, 0x9b,
	0x4a, 0x8a, 0x9a, 0x11, 0x27, 0x44, 0x91, 0x3f, 0xc7, 0xbd, 0x47, 0x96, 0x2d, 0x43, 0x8f, 0x12,
	0xfc, 0x02, 0xfe, 0xc9, 0xc1, 0x5a, 0x5f, 0x4d, 0x5c, 0x33, 0x44, 0x7a, 0x43, 0x8b, 0xa3, 0x40,
	0x43, 0x3a, 0x4a, 0xfb, 0x10, 0xdf, 0xc1, 0x95, 0xd8, 0x97, 0xac, 0x5a, 0xf3, 0x8c, 0x78, 0xff,
	0x9a, 0xf2, 0x0c, 0xff, 0x91, 0xcd, 0xde, 0xc1, 0x35, 0x11, 0xd4, 0x38, 0x02, 0xd7, 0x24, 0x5b,
	0x13, 0x14, 0xda, 0xd1, 0x70, 0x1e, 0xf4, 0x4f, 0xd4, 0x04, 0xed, 0x78, 0xed, 0x7d, 0x23, 0x9a,
	0x52, 0x99, 0x3c, 0x6c, 0xda, 0x82, 0xfb, 0x67, 0xf0, 0x3a, 0x27, 0x78, 0x0c, 0xc3, 0x2f, 0x51,
	0xb2, 0x0e, 0x06, 0x17, 0x78, 0x04, 0x83, 0x55, 0xde, 0xec, 0xd2, 0x32, 0xe1, 0x45, 0x80, 0xb0,
	0x0f, 0xb0, 0x14, 0xb2, 0x29, 0x12, 0xc5, 0x45, 0x19, 0x58, 0x8b, 0x31, 0x78, 0xec, 0x3b, 0xde,
	0x56, 0x72, 0xf3, 0x6b, 0xd9, 0x74, 0xf5, 0x96, 0xba, 0xe6, 0x83, 0x9e, 0xfe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb5, 0xe8, 0x34, 0x89, 0xf6, 0x01, 0x00, 0x00,
}
