// Code generated by protoc-gen-go.
// source: datatypes/biometrics.proto
// DO NOT EDIT!

/*
Package DataTypes is a generated protocol buffer package.

It is generated from these files:
	datatypes/biometrics.proto

It has these top-level messages:
	Faces
	FaceCharacteristic
	Match
	Matches
*/
package DataTypes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import DataTypes1 "datatypes"
import DataTypes2 "datatypes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BiometricType int32

const (
	BiometricType_UnspecifiedBio BiometricType = 0
	BiometricType_Facial         BiometricType = 1
	BiometricType_Fingerprint    BiometricType = 2
	BiometricType_Iris           BiometricType = 3
	BiometricType_All            BiometricType = 4
)

var BiometricType_name = map[int32]string{
	0: "UnspecifiedBio",
	1: "Facial",
	2: "Fingerprint",
	3: "Iris",
	4: "All",
}
var BiometricType_value = map[string]int32{
	"UnspecifiedBio": 0,
	"Facial":         1,
	"Fingerprint":    2,
	"Iris":           3,
	"All":            4,
}

func (x BiometricType) String() string {
	return proto.EnumName(BiometricType_name, int32(x))
}
func (BiometricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EyeType int32

const (
	EyeType_Unspecified_Eye EyeType = 0
	EyeType_Left            EyeType = 1
	EyeType_Right           EyeType = 2
	EyeType_Both            EyeType = 3
)

var EyeType_name = map[int32]string{
	0: "Unspecified_Eye",
	1: "Left",
	2: "Right",
	3: "Both",
}
var EyeType_value = map[string]int32{
	"Unspecified_Eye": 0,
	"Left":            1,
	"Right":           2,
	"Both":            3,
}

func (x EyeType) String() string {
	return proto.EnumName(EyeType_name, int32(x))
}
func (EyeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Finger int32

const (
	Finger_Unspecified_Finger Finger = 0
	Finger_RightThumb         Finger = 1
	Finger_LeftThumb          Finger = 2
	Finger_RightIndex         Finger = 3
	Finger_LeftIndex          Finger = 4
	Finger_RightMiddle        Finger = 5
	Finger_LeftMiddle         Finger = 6
	Finger_RightRing          Finger = 7
	Finger_LeftRing           Finger = 8
	Finger_RightLittle        Finger = 9
	Finger_LeftLittle         Finger = 10
)

var Finger_name = map[int32]string{
	0:  "Unspecified_Finger",
	1:  "RightThumb",
	2:  "LeftThumb",
	3:  "RightIndex",
	4:  "LeftIndex",
	5:  "RightMiddle",
	6:  "LeftMiddle",
	7:  "RightRing",
	8:  "LeftRing",
	9:  "RightLittle",
	10: "LeftLittle",
}
var Finger_value = map[string]int32{
	"Unspecified_Finger": 0,
	"RightThumb":         1,
	"LeftThumb":          2,
	"RightIndex":         3,
	"LeftIndex":          4,
	"RightMiddle":        5,
	"LeftMiddle":         6,
	"RightRing":          7,
	"LeftRing":           8,
	"RightLittle":        9,
	"LeftLittle":         10,
}

func (x Finger) String() string {
	return proto.EnumName(Finger_name, int32(x))
}
func (Finger) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type FacialIsoComplianceTemplate int32

const (
	FacialIsoComplianceTemplate_Unspecified_IsoTemplate         FacialIsoComplianceTemplate = 0
	FacialIsoComplianceTemplate_OnlyOneFaceVisible              FacialIsoComplianceTemplate = 1
	FacialIsoComplianceTemplate_goodVerticalFacePosition        FacialIsoComplianceTemplate = 2
	FacialIsoComplianceTemplate_horizontallyCenteredFace        FacialIsoComplianceTemplate = 3
	FacialIsoComplianceTemplate_widthOfHead                     FacialIsoComplianceTemplate = 4
	FacialIsoComplianceTemplate_lengthOfHead                    FacialIsoComplianceTemplate = 5
	FacialIsoComplianceTemplate_widthOfHeadBestPractice         FacialIsoComplianceTemplate = 6
	FacialIsoComplianceTemplate_lengthOfHeadBestPractice        FacialIsoComplianceTemplate = 7
	FacialIsoComplianceTemplate_resolution                      FacialIsoComplianceTemplate = 8
	FacialIsoComplianceTemplate_resolutionBestPractice          FacialIsoComplianceTemplate = 9
	FacialIsoComplianceTemplate_imageWidthToHeightBestPractice  FacialIsoComplianceTemplate = 10
	FacialIsoComplianceTemplate_goodExposure                    FacialIsoComplianceTemplate = 11
	FacialIsoComplianceTemplate_goodGrayScaleProfile            FacialIsoComplianceTemplate = 12
	FacialIsoComplianceTemplate_hasNaturalSkinColour            FacialIsoComplianceTemplate = 13
	FacialIsoComplianceTemplate_noHotSpots                      FacialIsoComplianceTemplate = 14
	FacialIsoComplianceTemplate_isBackgroundUniformBestPractice FacialIsoComplianceTemplate = 15
	FacialIsoComplianceTemplate_isFrontal                       FacialIsoComplianceTemplate = 16
	FacialIsoComplianceTemplate_isFrontalBestPractice           FacialIsoComplianceTemplate = 17
	FacialIsoComplianceTemplate_isLightingUniform               FacialIsoComplianceTemplate = 18
	FacialIsoComplianceTemplate_eyesOpenBestPractice            FacialIsoComplianceTemplate = 19
	FacialIsoComplianceTemplate_eyesGazeFrontalBestPractice     FacialIsoComplianceTemplate = 20
	FacialIsoComplianceTemplate_eyesNotRedBestPractice          FacialIsoComplianceTemplate = 21
	FacialIsoComplianceTemplate_noTintedGlasses                 FacialIsoComplianceTemplate = 22
	FacialIsoComplianceTemplate_isSharp                         FacialIsoComplianceTemplate = 23
	FacialIsoComplianceTemplate_mouthClosedBestPractice         FacialIsoComplianceTemplate = 24
)

var FacialIsoComplianceTemplate_name = map[int32]string{
	0:  "Unspecified_IsoTemplate",
	1:  "OnlyOneFaceVisible",
	2:  "goodVerticalFacePosition",
	3:  "horizontallyCenteredFace",
	4:  "widthOfHead",
	5:  "lengthOfHead",
	6:  "widthOfHeadBestPractice",
	7:  "lengthOfHeadBestPractice",
	8:  "resolution",
	9:  "resolutionBestPractice",
	10: "imageWidthToHeightBestPractice",
	11: "goodExposure",
	12: "goodGrayScaleProfile",
	13: "hasNaturalSkinColour",
	14: "noHotSpots",
	15: "isBackgroundUniformBestPractice",
	16: "isFrontal",
	17: "isFrontalBestPractice",
	18: "isLightingUniform",
	19: "eyesOpenBestPractice",
	20: "eyesGazeFrontalBestPractice",
	21: "eyesNotRedBestPractice",
	22: "noTintedGlasses",
	23: "isSharp",
	24: "mouthClosedBestPractice",
}
var FacialIsoComplianceTemplate_value = map[string]int32{
	"Unspecified_IsoTemplate":         0,
	"OnlyOneFaceVisible":              1,
	"goodVerticalFacePosition":        2,
	"horizontallyCenteredFace":        3,
	"widthOfHead":                     4,
	"lengthOfHead":                    5,
	"widthOfHeadBestPractice":         6,
	"lengthOfHeadBestPractice":        7,
	"resolution":                      8,
	"resolutionBestPractice":          9,
	"imageWidthToHeightBestPractice":  10,
	"goodExposure":                    11,
	"goodGrayScaleProfile":            12,
	"hasNaturalSkinColour":            13,
	"noHotSpots":                      14,
	"isBackgroundUniformBestPractice": 15,
	"isFrontal":                       16,
	"isFrontalBestPractice":           17,
	"isLightingUniform":               18,
	"eyesOpenBestPractice":            19,
	"eyesGazeFrontalBestPractice":     20,
	"eyesNotRedBestPractice":          21,
	"noTintedGlasses":                 22,
	"isSharp":                         23,
	"mouthClosedBestPractice":         24,
}

func (x FacialIsoComplianceTemplate) String() string {
	return proto.EnumName(FacialIsoComplianceTemplate_name, int32(x))
}
func (FacialIsoComplianceTemplate) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Faces struct {
	Faces []*FaceCharacteristic `protobuf:"bytes,1,rep,name=Faces,json=faces" json:"Faces,omitempty"`
}

func (m *Faces) Reset()                    { *m = Faces{} }
func (m *Faces) String() string            { return proto.CompactTextString(m) }
func (*Faces) ProtoMessage()               {}
func (*Faces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Faces) GetFaces() []*FaceCharacteristic {
	if m != nil {
		return m.Faces
	}
	return nil
}

type FaceCharacteristic struct {
	Id         *DataTypes2.Key `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Box        *DataTypes1.Box `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	Confidence float32         `protobuf:"fixed32,3,opt,name=confidence" json:"confidence,omitempty"`
	PersonId   int64           `protobuf:"varint,4,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PhotoId    int64           `protobuf:"varint,5,opt,name=photo_id,json=photoId" json:"photo_id,omitempty"`
}

func (m *FaceCharacteristic) Reset()                    { *m = FaceCharacteristic{} }
func (m *FaceCharacteristic) String() string            { return proto.CompactTextString(m) }
func (*FaceCharacteristic) ProtoMessage()               {}
func (*FaceCharacteristic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FaceCharacteristic) GetId() *DataTypes2.Key {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FaceCharacteristic) GetBox() *DataTypes1.Box {
	if m != nil {
		return m.Box
	}
	return nil
}

type Match struct {
	FaceId *DataTypes2.Key `protobuf:"bytes,2,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	Match  float32         `protobuf:"fixed32,3,opt,name=match" json:"match,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Match) GetFaceId() *DataTypes2.Key {
	if m != nil {
		return m.FaceId
	}
	return nil
}

type Matches struct {
	FaceId  *DataTypes2.Key `protobuf:"bytes,1,opt,name=face_id,json=faceId" json:"face_id,omitempty"`
	Matches []*Match        `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
}

func (m *Matches) Reset()                    { *m = Matches{} }
func (m *Matches) String() string            { return proto.CompactTextString(m) }
func (*Matches) ProtoMessage()               {}
func (*Matches) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Matches) GetFaceId() *DataTypes2.Key {
	if m != nil {
		return m.FaceId
	}
	return nil
}

func (m *Matches) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

func init() {
	proto.RegisterType((*Faces)(nil), "DataTypes.Faces")
	proto.RegisterType((*FaceCharacteristic)(nil), "DataTypes.FaceCharacteristic")
	proto.RegisterType((*Match)(nil), "DataTypes.Match")
	proto.RegisterType((*Matches)(nil), "DataTypes.Matches")
	proto.RegisterEnum("DataTypes.BiometricType", BiometricType_name, BiometricType_value)
	proto.RegisterEnum("DataTypes.EyeType", EyeType_name, EyeType_value)
	proto.RegisterEnum("DataTypes.Finger", Finger_name, Finger_value)
	proto.RegisterEnum("DataTypes.FacialIsoComplianceTemplate", FacialIsoComplianceTemplate_name, FacialIsoComplianceTemplate_value)
}

func init() { proto.RegisterFile("datatypes/biometrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x94, 0xdd, 0x72, 0xdb, 0x36,
	0x13, 0x86, 0x4d, 0xd2, 0x32, 0xa5, 0xf5, 0x1f, 0x82, 0xd8, 0x0e, 0x63, 0xe7, 0x73, 0x3c, 0xfe,
	0x0e, 0xea, 0xf1, 0x81, 0x3b, 0x93, 0x9c, 0xb6, 0x07, 0x95, 0xeb, 0x1f, 0x4d, 0x9d, 0xd8, 0x43,
	0x2b, 0xe9, 0x59, 0x33, 0x10, 0xb9, 0x22, 0x31, 0x81, 0x00, 0x0e, 0x00, 0x4d, 0xa5, 0x5c, 0x44,
	0x2f, 0xa2, 0x17, 0xd0, 0x3b, 0xe8, 0xbd, 0x75, 0x96, 0x94, 0x64, 0xa9, 0xc9, 0xf4, 0x8c, 0xbb,
	0xef, 0xb3, 0x2f, 0x76, 0x17, 0x24, 0xe1, 0x30, 0x17, 0x5e, 0xf8, 0x69, 0x85, 0xee, 0xfb, 0x81,
	0x34, 0x23, 0xf4, 0x56, 0x66, 0xee, 0xa2, 0xb2, 0xc6, 0x1b, 0xde, 0xf9, 0x59, 0x78, 0xd1, 0x27,
	0xed, 0x30, 0x79, 0xc2, 0x0a, 0xac, 0xb1, 0x69, 0x03, 0x1d, 0xee, 0x3d, 0x29, 0xf4, 0xd4, 0x64,
	0x4f, 0x7f, 0x80, 0xd6, 0xb5, 0xc8, 0xd0, 0xf1, 0xb7, 0xb3, 0x87, 0x24, 0x38, 0x89, 0xce, 0x36,
	0xdf, 0xfc, 0xef, 0x62, 0xe1, 0x79, 0x41, 0xf9, 0xcb, 0x52, 0x58, 0x91, 0x79, 0xb4, 0xd2, 0x79,
	0x99, 0xa5, 0xad, 0x21, 0xb1, 0xa7, 0x7f, 0x05, 0xc0, 0xbf, 0x56, 0xf9, 0x31, 0x84, 0x32, 0x4f,
	0x82, 0x93, 0xe0, 0x6c, 0xf3, 0xcd, 0xce, 0x92, 0xd1, 0x2f, 0x38, 0x4d, 0x43, 0x99, 0xf3, 0x13,
	0x88, 0x06, 0x66, 0x92, 0x84, 0x5f, 0x01, 0x5d, 0x33, 0x49, 0x49, 0xe2, 0xc7, 0x00, 0x99, 0xd1,
	0x43, 0x99, 0xa3, 0xce, 0x30, 0x89, 0x4e, 0x82, 0xb3, 0x30, 0x5d, 0xca, 0xf0, 0x23, 0xe8, 0x54,
	0x68, 0x9d, 0xd1, 0x9f, 0x64, 0x9e, 0xac, 0x9f, 0x04, 0x67, 0x51, 0xda, 0x6e, 0x12, 0xbd, 0x9c,
	0xbf, 0x84, 0x76, 0x55, 0x1a, 0x6f, 0x48, 0x6b, 0xd5, 0x5a, 0x5c, 0xc7, 0xbd, 0xfc, 0xf4, 0x1a,
	0x5a, 0xef, 0x84, 0xcf, 0x4a, 0xfe, 0x1d, 0xc4, 0x34, 0x02, 0x21, 0xe1, 0x37, 0xfb, 0xdc, 0x20,
	0xb9, 0x97, 0xf3, 0x3d, 0x68, 0x8d, 0xa8, 0x62, 0xd6, 0x44, 0x13, 0x9c, 0xfe, 0x06, 0x71, 0xed,
	0x83, 0x6e, 0xd9, 0x29, 0xf8, 0x4f, 0xa7, 0x73, 0x88, 0x47, 0x4d, 0x4d, 0x12, 0xd6, 0x3b, 0x66,
	0x4b, 0x60, 0xed, 0x96, 0xce, 0x81, 0xf3, 0x47, 0xd8, 0xee, 0xce, 0x6f, 0x99, 0x00, 0xce, 0x61,
	0xe7, 0x83, 0x76, 0x15, 0x66, 0x72, 0x28, 0x31, 0xef, 0x4a, 0xc3, 0xd6, 0x38, 0xc0, 0xc6, 0xb5,
	0xc8, 0xa4, 0x50, 0x2c, 0xe0, 0xbb, 0xb0, 0x79, 0x2d, 0x75, 0x81, 0xb6, 0xb2, 0x52, 0x7b, 0x16,
	0xf2, 0x36, 0xac, 0xf7, 0xac, 0x74, 0x2c, 0xe2, 0x31, 0x44, 0x3f, 0x29, 0xc5, 0xd6, 0xcf, 0x7f,
	0x84, 0xf8, 0x6a, 0x8a, 0xb5, 0xdd, 0x73, 0xd8, 0x5d, 0xb2, 0xfb, 0x74, 0x35, 0x45, 0xb6, 0x46,
	0x25, 0x77, 0x38, 0xf4, 0x2c, 0xe0, 0x1d, 0x68, 0xa5, 0xb2, 0x28, 0x67, 0x3e, 0x5d, 0xe3, 0x4b,
	0x16, 0x9d, 0xff, 0x1d, 0xc0, 0x46, 0x73, 0x06, 0x3f, 0x00, 0xbe, 0x5c, 0xde, 0x64, 0xd9, 0x1a,
	0xdf, 0x01, 0xa8, 0xeb, 0xfa, 0xe5, 0x78, 0x34, 0x60, 0x01, 0xdf, 0x86, 0x0e, 0x39, 0x36, 0x61,
	0xb8, 0x90, 0x7b, 0x3a, 0xc7, 0x09, 0x8b, 0xe6, 0x72, 0x13, 0xae, 0xd3, 0x0c, 0xb5, 0xfc, 0x4e,
	0xe6, 0xb9, 0x42, 0xd6, 0x22, 0x9e, 0xf4, 0x59, 0xbc, 0x41, 0x7c, 0x0d, 0xa4, 0x52, 0x17, 0x2c,
	0xe6, 0x5b, 0xd0, 0x26, 0xb9, 0x8e, 0xda, 0x8b, 0xea, 0x3b, 0xe9, 0xbd, 0x42, 0xd6, 0x99, 0x57,
	0xcf, 0x62, 0x38, 0xff, 0xa3, 0x05, 0x47, 0xcd, 0xbe, 0x7a, 0xce, 0x5c, 0x9a, 0x51, 0xa5, 0xa4,
	0xd0, 0x19, 0xf6, 0x71, 0x54, 0x29, 0xe1, 0xe9, 0x9d, 0x7a, 0xb1, 0x3c, 0x54, 0xcf, 0x99, 0xb9,
	0xc4, 0xd6, 0x68, 0xe2, 0x7b, 0xad, 0xa6, 0xf7, 0x1a, 0xe9, 0x7d, 0xff, 0x28, 0x9d, 0x1c, 0x28,
	0x64, 0x01, 0x7f, 0x05, 0x49, 0x61, 0x4c, 0xfe, 0x11, 0xad, 0x97, 0x99, 0x50, 0x24, 0x3e, 0x18,
	0x27, 0xbd, 0x34, 0x9a, 0x85, 0xa4, 0x96, 0xc6, 0xca, 0x2f, 0x46, 0x7b, 0xa1, 0xd4, 0xf4, 0x12,
	0xb5, 0x47, 0x8b, 0x39, 0x51, 0x2c, 0xa2, 0x8e, 0x7f, 0x97, 0xb9, 0x2f, 0xef, 0x87, 0xb7, 0x28,
	0x72, 0xb6, 0xce, 0x19, 0x6c, 0x29, 0xd4, 0xc5, 0x22, 0xd3, 0xa2, 0x9e, 0x96, 0x90, 0x2e, 0x3a,
	0xff, 0x40, 0x1f, 0x9a, 0xcc, 0x68, 0x1d, 0xaf, 0x20, 0x59, 0xc6, 0x57, 0xd4, 0x98, 0xc6, 0xb7,
	0xe8, 0x8c, 0x1a, 0xd7, 0xbd, 0xb4, 0xf9, 0x21, 0x1c, 0x3c, 0xc5, 0x2b, 0x6c, 0x87, 0x9f, 0xc2,
	0xb1, 0x1c, 0x89, 0x02, 0x7f, 0xa5, 0xb3, 0xfa, 0xe6, 0x16, 0x69, 0x91, 0x2b, 0x0c, 0x50, 0x73,
	0x34, 0xe9, 0xd5, 0xa4, 0x32, 0x6e, 0x6c, 0x91, 0x6d, 0xf2, 0x04, 0xf6, 0x28, 0x73, 0x63, 0xc5,
	0xf4, 0x31, 0x13, 0x0a, 0x1f, 0xac, 0x19, 0x4a, 0x85, 0x6c, 0x8b, 0x94, 0x52, 0xb8, 0xf7, 0xc2,
	0x8f, 0xad, 0x50, 0x8f, 0x9f, 0xa5, 0xbe, 0x34, 0xca, 0x8c, 0x2d, 0xdb, 0xa6, 0xae, 0xb4, 0xb9,
	0x35, 0xfe, 0xb1, 0x32, 0xde, 0xb1, 0x1d, 0xfe, 0x7f, 0x78, 0x2d, 0x5d, 0x57, 0x64, 0x9f, 0x0b,
	0x6b, 0xc6, 0x3a, 0xff, 0xa0, 0xe5, 0xd0, 0xd8, 0xd1, 0xca, 0xd1, 0xbb, 0x74, 0xef, 0xd2, 0x5d,
	0xdb, 0x7a, 0x8b, 0x8c, 0xf1, 0x97, 0xb0, 0xbf, 0x08, 0x57, 0xc8, 0x67, 0x7c, 0x1f, 0x9e, 0x49,
	0x77, 0x47, 0xdd, 0x4b, 0x5d, 0xcc, 0xcc, 0x18, 0xa7, 0x7e, 0x70, 0x8a, 0xee, 0xbe, 0xc2, 0xd5,
	0xc9, 0x9f, 0xf3, 0xd7, 0x70, 0x44, 0xca, 0x8d, 0xf8, 0x82, 0xdf, 0x72, 0xdc, 0xa3, 0xb5, 0x11,
	0xf0, 0xde, 0xf8, 0x14, 0x57, 0x57, 0xbc, 0x4f, 0x5f, 0x91, 0x36, 0x7d, 0xa9, 0x3d, 0xe6, 0x37,
	0x4a, 0x38, 0x87, 0x8e, 0x1d, 0xf0, 0x4d, 0x88, 0xa5, 0x7b, 0x2c, 0x85, 0xad, 0xd8, 0x0b, 0xba,
	0xbf, 0x91, 0x19, 0xfb, 0xf2, 0x52, 0x19, 0xf7, 0xaf, 0xf2, 0xa4, 0xbb, 0x0b, 0x31, 0x4e, 0x2e,
	0x0a, 0x5b, 0x65, 0x7f, 0x86, 0x51, 0xda, 0xbf, 0x19, 0x6c, 0xd4, 0xff, 0xe4, 0xb7, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x1f, 0x6d, 0xbb, 0x7a, 0xec, 0x05, 0x00, 0x00,
}
