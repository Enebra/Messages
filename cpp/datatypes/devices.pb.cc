// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/devices.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatypes/devices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataTypes {

namespace {

const ::google::protobuf::Descriptor* AccessDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessDevice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatypes_2fdevices_2eproto() {
  protobuf_AddDesc_datatypes_2fdevices_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatypes/devices.proto");
  GOOGLE_CHECK(file != NULL);
  AccessDevice_descriptor_ = file->message_type(0);
  static const int AccessDevice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, serial_number_),
  };
  AccessDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessDevice_descriptor_,
      AccessDevice::default_instance_,
      AccessDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatypes_2fdevices_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessDevice_descriptor_, &AccessDevice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatypes_2fdevices_2eproto() {
  delete AccessDevice::default_instance_;
  delete AccessDevice_reflection_;
}

void protobuf_AddDesc_datatypes_2fdevices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027datatypes/devices.proto\022\tDataTypes\"3\n\014"
    "AccessDevice\022\014\n\004name\030\001 \001(\t\022\025\n\rserial_num"
    "ber\030\002 \001(\006B\017\n\007ex.grpc\242\002\003RTGb\006proto3", 114);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatypes/devices.proto", &protobuf_RegisterTypes);
  AccessDevice::default_instance_ = new AccessDevice();
  AccessDevice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatypes_2fdevices_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatypes_2fdevices_2eproto {
  StaticDescriptorInitializer_datatypes_2fdevices_2eproto() {
    protobuf_AddDesc_datatypes_2fdevices_2eproto();
  }
} static_descriptor_initializer_datatypes_2fdevices_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessDevice::kNameFieldNumber;
const int AccessDevice::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessDevice::AccessDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataTypes.AccessDevice)
}

void AccessDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AccessDevice::AccessDevice(const AccessDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataTypes.AccessDevice)
}

void AccessDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = GOOGLE_ULONGLONG(0);
}

AccessDevice::~AccessDevice() {
  // @@protoc_insertion_point(destructor:DataTypes.AccessDevice)
  SharedDtor();
}

void AccessDevice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AccessDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessDevice_descriptor_;
}

const AccessDevice& AccessDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatypes_2fdevices_2eproto();
  return *default_instance_;
}

AccessDevice* AccessDevice::default_instance_ = NULL;

AccessDevice* AccessDevice::New(::google::protobuf::Arena* arena) const {
  AccessDevice* n = new AccessDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTypes.AccessDevice)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = GOOGLE_ULONGLONG(0);
}

bool AccessDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataTypes.AccessDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DataTypes.AccessDevice.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_serial_number;
        break;
      }

      // optional fixed64 serial_number = 2;
      case 2: {
        if (tag == 17) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataTypes.AccessDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataTypes.AccessDevice)
  return false;
#undef DO_
}

void AccessDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataTypes.AccessDevice)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.AccessDevice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 serial_number = 2;
  if (this->serial_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->serial_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataTypes.AccessDevice)
}

::google::protobuf::uint8* AccessDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTypes.AccessDevice)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DataTypes.AccessDevice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 serial_number = 2;
  if (this->serial_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->serial_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataTypes.AccessDevice)
  return target;
}

int AccessDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DataTypes.AccessDevice)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional fixed64 serial_number = 2;
  if (this->serial_number() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataTypes.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataTypes.AccessDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataTypes.AccessDevice)
    MergeFrom(*source);
  }
}

void AccessDevice::MergeFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataTypes.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.serial_number() != 0) {
    set_serial_number(from.serial_number());
  }
}

void AccessDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataTypes.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessDevice::CopyFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTypes.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessDevice::IsInitialized() const {

  return true;
}

void AccessDevice::Swap(AccessDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessDevice::InternalSwap(AccessDevice* other) {
  name_.Swap(&other->name_);
  std::swap(serial_number_, other->serial_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessDevice_descriptor_;
  metadata.reflection = AccessDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessDevice

// optional string name = 1;
void AccessDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AccessDevice::name() const {
  // @@protoc_insertion_point(field_get:DataTypes.AccessDevice.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.AccessDevice.name)
}
 void AccessDevice::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.AccessDevice.name)
}
 void AccessDevice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.AccessDevice.name)
}
 ::std::string* AccessDevice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.AccessDevice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccessDevice::release_name() {
  // @@protoc_insertion_point(field_release:DataTypes.AccessDevice.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.AccessDevice.name)
}

// optional fixed64 serial_number = 2;
void AccessDevice::clear_serial_number() {
  serial_number_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AccessDevice::serial_number() const {
  // @@protoc_insertion_point(field_get:DataTypes.AccessDevice.serial_number)
  return serial_number_;
}
 void AccessDevice::set_serial_number(::google::protobuf::uint64 value) {
  
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.AccessDevice.serial_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

// @@protoc_insertion_point(global_scope)
