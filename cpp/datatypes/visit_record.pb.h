// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/visit_record.proto

#ifndef PROTOBUF_datatypes_2fvisit_5frecord_2eproto__INCLUDED
#define PROTOBUF_datatypes_2fvisit_5frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "datatypes/card.pb.h"
// @@protoc_insertion_point(includes)

namespace DataTypes {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_datatypes_2fvisit_5frecord_2eproto();
void protobuf_AssignDesc_datatypes_2fvisit_5frecord_2eproto();
void protobuf_ShutdownFile_datatypes_2fvisit_5frecord_2eproto();

class VisitRecord;
class VisitRecords;

enum AccessState {
  NoneState = 0,
  Granted = 1,
  Denied = 2,
  AccessState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AccessState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AccessState_IsValid(int value);
const AccessState AccessState_MIN = NoneState;
const AccessState AccessState_MAX = Denied;
const int AccessState_ARRAYSIZE = AccessState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessState_descriptor();
inline const ::std::string& AccessState_Name(AccessState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessState_descriptor(), value);
}
inline bool AccessState_Parse(
    const ::std::string& name, AccessState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessState>(
    AccessState_descriptor(), name, value);
}
// ===================================================================

class VisitRecord : public ::google::protobuf::Message {
 public:
  VisitRecord();
  virtual ~VisitRecord();

  VisitRecord(const VisitRecord& from);

  inline VisitRecord& operator=(const VisitRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisitRecord& default_instance();

  void Swap(VisitRecord* other);

  // implements Message ----------------------------------------------

  inline VisitRecord* New() const { return New(NULL); }

  VisitRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisitRecord& from);
  void MergeFrom(const VisitRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisitRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string person_id = 2;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 2;
  const ::std::string& person_id() const;
  void set_person_id(const ::std::string& value);
  void set_person_id(const char* value);
  void set_person_id(const char* value, size_t size);
  ::std::string* mutable_person_id();
  ::std::string* release_person_id();
  void set_allocated_person_id(::std::string* person_id);

  // optional string location_id = 3;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 3;
  const ::std::string& location_id() const;
  void set_location_id(const ::std::string& value);
  void set_location_id(const char* value);
  void set_location_id(const char* value, size_t size);
  ::std::string* mutable_location_id();
  ::std::string* release_location_id();
  void set_allocated_location_id(::std::string* location_id);

  // optional int64 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional .DataTypes.Card card = 5;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 5;
  const ::DataTypes::Card& card() const;
  ::DataTypes::Card* mutable_card();
  ::DataTypes::Card* release_card();
  void set_allocated_card(::DataTypes::Card* card);

  // optional .DataTypes.AccessState state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::DataTypes::AccessState state() const;
  void set_state(::DataTypes::AccessState value);

  // @@protoc_insertion_point(class_scope:DataTypes.VisitRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr person_id_;
  ::google::protobuf::internal::ArenaStringPtr location_id_;
  ::google::protobuf::int64 time_;
  ::DataTypes::Card* card_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fvisit_5frecord_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fvisit_5frecord_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fvisit_5frecord_2eproto();

  void InitAsDefaultInstance();
  static VisitRecord* default_instance_;
};
// -------------------------------------------------------------------

class VisitRecords : public ::google::protobuf::Message {
 public:
  VisitRecords();
  virtual ~VisitRecords();

  VisitRecords(const VisitRecords& from);

  inline VisitRecords& operator=(const VisitRecords& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisitRecords& default_instance();

  void Swap(VisitRecords* other);

  // implements Message ----------------------------------------------

  inline VisitRecords* New() const { return New(NULL); }

  VisitRecords* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisitRecords& from);
  void MergeFrom(const VisitRecords& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisitRecords* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DataTypes.VisitRecord items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::DataTypes::VisitRecord& items(int index) const;
  ::DataTypes::VisitRecord* mutable_items(int index);
  ::DataTypes::VisitRecord* add_items();
  ::google::protobuf::RepeatedPtrField< ::DataTypes::VisitRecord >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::DataTypes::VisitRecord >&
      items() const;

  // optional int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DataTypes.VisitRecords)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::DataTypes::VisitRecord > items_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_datatypes_2fvisit_5frecord_2eproto();
  friend void protobuf_AssignDesc_datatypes_2fvisit_5frecord_2eproto();
  friend void protobuf_ShutdownFile_datatypes_2fvisit_5frecord_2eproto();

  void InitAsDefaultInstance();
  static VisitRecords* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VisitRecord

// optional string id = 1;
inline void VisitRecord::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisitRecord::id() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecord.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitRecord::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.VisitRecord.id)
}
inline void VisitRecord::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.VisitRecord.id)
}
inline void VisitRecord::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.VisitRecord.id)
}
inline ::std::string* VisitRecord::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.VisitRecord.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisitRecord::release_id() {
  // @@protoc_insertion_point(field_release:DataTypes.VisitRecord.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitRecord::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.VisitRecord.id)
}

// optional string person_id = 2;
inline void VisitRecord::clear_person_id() {
  person_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisitRecord::person_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecord.person_id)
  return person_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitRecord::set_person_id(const ::std::string& value) {
  
  person_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.VisitRecord.person_id)
}
inline void VisitRecord::set_person_id(const char* value) {
  
  person_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.VisitRecord.person_id)
}
inline void VisitRecord::set_person_id(const char* value, size_t size) {
  
  person_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.VisitRecord.person_id)
}
inline ::std::string* VisitRecord::mutable_person_id() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.VisitRecord.person_id)
  return person_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisitRecord::release_person_id() {
  // @@protoc_insertion_point(field_release:DataTypes.VisitRecord.person_id)
  
  return person_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitRecord::set_allocated_person_id(::std::string* person_id) {
  if (person_id != NULL) {
    
  } else {
    
  }
  person_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), person_id);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.VisitRecord.person_id)
}

// optional string location_id = 3;
inline void VisitRecord::clear_location_id() {
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisitRecord::location_id() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecord.location_id)
  return location_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitRecord::set_location_id(const ::std::string& value) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataTypes.VisitRecord.location_id)
}
inline void VisitRecord::set_location_id(const char* value) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTypes.VisitRecord.location_id)
}
inline void VisitRecord::set_location_id(const char* value, size_t size) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTypes.VisitRecord.location_id)
}
inline ::std::string* VisitRecord::mutable_location_id() {
  
  // @@protoc_insertion_point(field_mutable:DataTypes.VisitRecord.location_id)
  return location_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisitRecord::release_location_id() {
  // @@protoc_insertion_point(field_release:DataTypes.VisitRecord.location_id)
  
  return location_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitRecord::set_allocated_location_id(::std::string* location_id) {
  if (location_id != NULL) {
    
  } else {
    
  }
  location_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_id);
  // @@protoc_insertion_point(field_set_allocated:DataTypes.VisitRecord.location_id)
}

// optional int64 time = 4;
inline void VisitRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VisitRecord::time() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecord.time)
  return time_;
}
inline void VisitRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.VisitRecord.time)
}

// optional .DataTypes.Card card = 5;
inline bool VisitRecord::has_card() const {
  return !_is_default_instance_ && card_ != NULL;
}
inline void VisitRecord::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) delete card_;
  card_ = NULL;
}
inline const ::DataTypes::Card& VisitRecord::card() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecord.card)
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::DataTypes::Card* VisitRecord::mutable_card() {
  
  if (card_ == NULL) {
    card_ = new ::DataTypes::Card;
  }
  // @@protoc_insertion_point(field_mutable:DataTypes.VisitRecord.card)
  return card_;
}
inline ::DataTypes::Card* VisitRecord::release_card() {
  // @@protoc_insertion_point(field_release:DataTypes.VisitRecord.card)
  
  ::DataTypes::Card* temp = card_;
  card_ = NULL;
  return temp;
}
inline void VisitRecord::set_allocated_card(::DataTypes::Card* card) {
  delete card_;
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DataTypes.VisitRecord.card)
}

// optional .DataTypes.AccessState state = 6;
inline void VisitRecord::clear_state() {
  state_ = 0;
}
inline ::DataTypes::AccessState VisitRecord::state() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecord.state)
  return static_cast< ::DataTypes::AccessState >(state_);
}
inline void VisitRecord::set_state(::DataTypes::AccessState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.VisitRecord.state)
}

// -------------------------------------------------------------------

// VisitRecords

// repeated .DataTypes.VisitRecord items = 1;
inline int VisitRecords::items_size() const {
  return items_.size();
}
inline void VisitRecords::clear_items() {
  items_.Clear();
}
inline const ::DataTypes::VisitRecord& VisitRecords::items(int index) const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecords.items)
  return items_.Get(index);
}
inline ::DataTypes::VisitRecord* VisitRecords::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:DataTypes.VisitRecords.items)
  return items_.Mutable(index);
}
inline ::DataTypes::VisitRecord* VisitRecords::add_items() {
  // @@protoc_insertion_point(field_add:DataTypes.VisitRecords.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DataTypes::VisitRecord >*
VisitRecords::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:DataTypes.VisitRecords.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DataTypes::VisitRecord >&
VisitRecords::items() const {
  // @@protoc_insertion_point(field_list:DataTypes.VisitRecords.items)
  return items_;
}

// optional int64 count = 2;
inline void VisitRecords::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VisitRecords::count() const {
  // @@protoc_insertion_point(field_get:DataTypes.VisitRecords.count)
  return count_;
}
inline void VisitRecords::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:DataTypes.VisitRecords.count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataTypes

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DataTypes::AccessState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataTypes::AccessState>() {
  return ::DataTypes::AccessState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2fvisit_5frecord_2eproto__INCLUDED
