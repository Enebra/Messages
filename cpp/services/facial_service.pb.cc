// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/facial_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "services/facial_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Services {

namespace {

const ::google::protobuf::Descriptor* PopulationCreationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopulationCreationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerificationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerificationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdentificationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdentificationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceSearchResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_services_2ffacial_5fservice_2eproto() {
  protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "services/facial_service.proto");
  GOOGLE_CHECK(file != NULL);
  PopulationCreationResponse_descriptor_ = file->message_type(0);
  static const int PopulationCreationResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, faces_),
  };
  PopulationCreationResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PopulationCreationResponse_descriptor_,
      PopulationCreationResponse::default_instance_,
      PopulationCreationResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PopulationCreationResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, _is_default_instance_));
  VerificationData_descriptor_ = file->message_type(1);
  static const int VerificationData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, target_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, comparison_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, comparison_person_id_),
  };
  VerificationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerificationData_descriptor_,
      VerificationData::default_instance_,
      VerificationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerificationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, _is_default_instance_));
  IdentificationData_descriptor_ = file->message_type(2);
  static const int IdentificationData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, target_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, population_id_),
  };
  IdentificationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IdentificationData_descriptor_,
      IdentificationData::default_instance_,
      IdentificationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(IdentificationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, _is_default_instance_));
  FaceSearchResponse_descriptor_ = file->message_type(3);
  static const int FaceSearchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, matches_),
  };
  FaceSearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceSearchResponse_descriptor_,
      FaceSearchResponse::default_instance_,
      FaceSearchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceSearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_services_2ffacial_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PopulationCreationResponse_descriptor_, &PopulationCreationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerificationData_descriptor_, &VerificationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IdentificationData_descriptor_, &IdentificationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceSearchResponse_descriptor_, &FaceSearchResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_services_2ffacial_5fservice_2eproto() {
  delete PopulationCreationResponse::default_instance_;
  delete PopulationCreationResponse_reflection_;
  delete VerificationData::default_instance_;
  delete VerificationData_reflection_;
  delete IdentificationData::default_instance_;
  delete IdentificationData_reflection_;
  delete FaceSearchResponse::default_instance_;
  delete FaceSearchResponse_reflection_;
}

void protobuf_AddDesc_services_2ffacial_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataTypes::protobuf_AddDesc_datatypes_2fphoto_2eproto();
  ::DataTypes::protobuf_AddDesc_datatypes_2fbiometrics_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035services/facial_service.proto\022\010Service"
    "s\032\025datatypes/photo.proto\032\032datatypes/biom"
    "etrics.proto\"I\n\032PopulationCreationRespon"
    "se\022\n\n\002id\030\001 \001(\003\022\037\n\005faces\030\002 \003(\0132\020.DataType"
    "s.Faces\"\204\001\n\020VerificationData\022&\n\014target_i"
    "mage\030\001 \001(\0132\020.DataTypes.Photo\022*\n\020comparis"
    "on_image\030\002 \001(\0132\020.DataTypes.Photo\022\034\n\024comp"
    "arison_person_id\030\003 \001(\003\"S\n\022Identification"
    "Data\022&\n\014target_image\030\001 \001(\0132\020.DataTypes.P"
    "hoto\022\025\n\rpopulation_id\030\002 \001(\003\"Z\n\022FaceSearc"
    "hResponse\022\037\n\005faces\030\001 \003(\0132\020.DataTypes.Fac"
    "es\022#\n\007matches\030\002 \003(\0132\022.DataTypes.Matches2"
    "\250\002\n\026BiometricFacialService\022/\n\007Acquire\022\020."
    "DataTypes.Photo\032\020.DataTypes.Faces\"\000\022M\n\020C"
    "reatePopulation\022\021.DataTypes.Photos\032$.Ser"
    "vices.PopulationCreationResponse\"\000\022D\n\006Ve"
    "rify\022\032.Services.VerificationData\032\034.Servi"
    "ces.FaceSearchResponse\"\000\022H\n\010Identify\022\034.S"
    "ervices.IdentificationData\032\034.Services.Fa"
    "ceSearchResponse\"\000BQ\n\007ex.grpcZ@github.co"
    "m/Enebra/ServiceCoordinator/grpc/service"
    "s/facialservice\242\002\003RTGb\006proto3", 869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "services/facial_service.proto", &protobuf_RegisterTypes);
  PopulationCreationResponse::default_instance_ = new PopulationCreationResponse();
  VerificationData::default_instance_ = new VerificationData();
  IdentificationData::default_instance_ = new IdentificationData();
  FaceSearchResponse::default_instance_ = new FaceSearchResponse();
  PopulationCreationResponse::default_instance_->InitAsDefaultInstance();
  VerificationData::default_instance_->InitAsDefaultInstance();
  IdentificationData::default_instance_->InitAsDefaultInstance();
  FaceSearchResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_services_2ffacial_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_services_2ffacial_5fservice_2eproto {
  StaticDescriptorInitializer_services_2ffacial_5fservice_2eproto() {
    protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  }
} static_descriptor_initializer_services_2ffacial_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PopulationCreationResponse::kIdFieldNumber;
const int PopulationCreationResponse::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PopulationCreationResponse::PopulationCreationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.PopulationCreationResponse)
}

void PopulationCreationResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PopulationCreationResponse::PopulationCreationResponse(const PopulationCreationResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.PopulationCreationResponse)
}

void PopulationCreationResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
}

PopulationCreationResponse::~PopulationCreationResponse() {
  // @@protoc_insertion_point(destructor:Services.PopulationCreationResponse)
  SharedDtor();
}

void PopulationCreationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopulationCreationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopulationCreationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopulationCreationResponse_descriptor_;
}

const PopulationCreationResponse& PopulationCreationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

PopulationCreationResponse* PopulationCreationResponse::default_instance_ = NULL;

PopulationCreationResponse* PopulationCreationResponse::New(::google::protobuf::Arena* arena) const {
  PopulationCreationResponse* n = new PopulationCreationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PopulationCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.PopulationCreationResponse)
  id_ = GOOGLE_LONGLONG(0);
  faces_.Clear();
}

bool PopulationCreationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.PopulationCreationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faces;
        break;
      }

      // repeated .DataTypes.Faces faces = 2;
      case 2: {
        if (tag == 18) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.PopulationCreationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.PopulationCreationResponse)
  return false;
#undef DO_
}

void PopulationCreationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.PopulationCreationResponse)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .DataTypes.Faces faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.PopulationCreationResponse)
}

::google::protobuf::uint8* PopulationCreationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.PopulationCreationResponse)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .DataTypes.Faces faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.PopulationCreationResponse)
  return target;
}

int PopulationCreationResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.PopulationCreationResponse)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // repeated .DataTypes.Faces faces = 2;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopulationCreationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.PopulationCreationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PopulationCreationResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PopulationCreationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.PopulationCreationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.PopulationCreationResponse)
    MergeFrom(*source);
  }
}

void PopulationCreationResponse::MergeFrom(const PopulationCreationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.PopulationCreationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void PopulationCreationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.PopulationCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopulationCreationResponse::CopyFrom(const PopulationCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.PopulationCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopulationCreationResponse::IsInitialized() const {

  return true;
}

void PopulationCreationResponse::Swap(PopulationCreationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PopulationCreationResponse::InternalSwap(PopulationCreationResponse* other) {
  std::swap(id_, other->id_);
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PopulationCreationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopulationCreationResponse_descriptor_;
  metadata.reflection = PopulationCreationResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PopulationCreationResponse

// optional int64 id = 1;
void PopulationCreationResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PopulationCreationResponse::id() const {
  // @@protoc_insertion_point(field_get:Services.PopulationCreationResponse.id)
  return id_;
}
 void PopulationCreationResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Services.PopulationCreationResponse.id)
}

// repeated .DataTypes.Faces faces = 2;
int PopulationCreationResponse::faces_size() const {
  return faces_.size();
}
void PopulationCreationResponse::clear_faces() {
  faces_.Clear();
}
const ::DataTypes::Faces& PopulationCreationResponse::faces(int index) const {
  // @@protoc_insertion_point(field_get:Services.PopulationCreationResponse.faces)
  return faces_.Get(index);
}
::DataTypes::Faces* PopulationCreationResponse::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:Services.PopulationCreationResponse.faces)
  return faces_.Mutable(index);
}
::DataTypes::Faces* PopulationCreationResponse::add_faces() {
  // @@protoc_insertion_point(field_add:Services.PopulationCreationResponse.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Faces >*
PopulationCreationResponse::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:Services.PopulationCreationResponse.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Faces >&
PopulationCreationResponse::faces() const {
  // @@protoc_insertion_point(field_list:Services.PopulationCreationResponse.faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationData::kTargetImageFieldNumber;
const int VerificationData::kComparisonImageFieldNumber;
const int VerificationData::kComparisonPersonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationData::VerificationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.VerificationData)
}

void VerificationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_image_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
  comparison_image_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
}

VerificationData::VerificationData(const VerificationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.VerificationData)
}

void VerificationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  target_image_ = NULL;
  comparison_image_ = NULL;
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}

VerificationData::~VerificationData() {
  // @@protoc_insertion_point(destructor:Services.VerificationData)
  SharedDtor();
}

void VerificationData::SharedDtor() {
  if (this != default_instance_) {
    delete target_image_;
    delete comparison_image_;
  }
}

void VerificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerificationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerificationData_descriptor_;
}

const VerificationData& VerificationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

VerificationData* VerificationData::default_instance_ = NULL;

VerificationData* VerificationData::New(::google::protobuf::Arena* arena) const {
  VerificationData* n = new VerificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.VerificationData)
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}

bool VerificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.VerificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Photo target_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_comparison_image;
        break;
      }

      // optional .DataTypes.Photo comparison_image = 2;
      case 2: {
        if (tag == 18) {
         parse_comparison_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparison_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comparison_person_id;
        break;
      }

      // optional int64 comparison_person_id = 3;
      case 3: {
        if (tag == 24) {
         parse_comparison_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comparison_person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.VerificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.VerificationData)
  return false;
#undef DO_
}

void VerificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.VerificationData)
  // optional .DataTypes.Photo target_image = 1;
  if (this->has_target_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_image_, output);
  }

  // optional .DataTypes.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->comparison_image_, output);
  }

  // optional int64 comparison_person_id = 3;
  if (this->comparison_person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->comparison_person_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.VerificationData)
}

::google::protobuf::uint8* VerificationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.VerificationData)
  // optional .DataTypes.Photo target_image = 1;
  if (this->has_target_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->target_image_, target);
  }

  // optional .DataTypes.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->comparison_image_, target);
  }

  // optional int64 comparison_person_id = 3;
  if (this->comparison_person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->comparison_person_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.VerificationData)
  return target;
}

int VerificationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.VerificationData)
  int total_size = 0;

  // optional .DataTypes.Photo target_image = 1;
  if (this->has_target_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_image_);
  }

  // optional .DataTypes.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comparison_image_);
  }

  // optional int64 comparison_person_id = 3;
  if (this->comparison_person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->comparison_person_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerificationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.VerificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerificationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerificationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.VerificationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.VerificationData)
    MergeFrom(*source);
  }
}

void VerificationData::MergeFrom(const VerificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.VerificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_target_image()) {
    mutable_target_image()->::DataTypes::Photo::MergeFrom(from.target_image());
  }
  if (from.has_comparison_image()) {
    mutable_comparison_image()->::DataTypes::Photo::MergeFrom(from.comparison_image());
  }
  if (from.comparison_person_id() != 0) {
    set_comparison_person_id(from.comparison_person_id());
  }
}

void VerificationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.VerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationData::CopyFrom(const VerificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.VerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationData::IsInitialized() const {

  return true;
}

void VerificationData::Swap(VerificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationData::InternalSwap(VerificationData* other) {
  std::swap(target_image_, other->target_image_);
  std::swap(comparison_image_, other->comparison_image_);
  std::swap(comparison_person_id_, other->comparison_person_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerificationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerificationData_descriptor_;
  metadata.reflection = VerificationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerificationData

// optional .DataTypes.Photo target_image = 1;
bool VerificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
void VerificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
const ::DataTypes::Photo& VerificationData::target_image() const {
  // @@protoc_insertion_point(field_get:Services.VerificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
::DataTypes::Photo* VerificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.VerificationData.target_image)
  return target_image_;
}
::DataTypes::Photo* VerificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:Services.VerificationData.target_image)
  
  ::DataTypes::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
void VerificationData::set_allocated_target_image(::DataTypes::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.VerificationData.target_image)
}

// optional .DataTypes.Photo comparison_image = 2;
bool VerificationData::has_comparison_image() const {
  return !_is_default_instance_ && comparison_image_ != NULL;
}
void VerificationData::clear_comparison_image() {
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
}
const ::DataTypes::Photo& VerificationData::comparison_image() const {
  // @@protoc_insertion_point(field_get:Services.VerificationData.comparison_image)
  return comparison_image_ != NULL ? *comparison_image_ : *default_instance_->comparison_image_;
}
::DataTypes::Photo* VerificationData::mutable_comparison_image() {
  
  if (comparison_image_ == NULL) {
    comparison_image_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.VerificationData.comparison_image)
  return comparison_image_;
}
::DataTypes::Photo* VerificationData::release_comparison_image() {
  // @@protoc_insertion_point(field_release:Services.VerificationData.comparison_image)
  
  ::DataTypes::Photo* temp = comparison_image_;
  comparison_image_ = NULL;
  return temp;
}
void VerificationData::set_allocated_comparison_image(::DataTypes::Photo* comparison_image) {
  delete comparison_image_;
  comparison_image_ = comparison_image;
  if (comparison_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.VerificationData.comparison_image)
}

// optional int64 comparison_person_id = 3;
void VerificationData::clear_comparison_person_id() {
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VerificationData::comparison_person_id() const {
  // @@protoc_insertion_point(field_get:Services.VerificationData.comparison_person_id)
  return comparison_person_id_;
}
 void VerificationData::set_comparison_person_id(::google::protobuf::int64 value) {
  
  comparison_person_id_ = value;
  // @@protoc_insertion_point(field_set:Services.VerificationData.comparison_person_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentificationData::kTargetImageFieldNumber;
const int IdentificationData::kPopulationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentificationData::IdentificationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.IdentificationData)
}

void IdentificationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_image_ = const_cast< ::DataTypes::Photo*>(&::DataTypes::Photo::default_instance());
}

IdentificationData::IdentificationData(const IdentificationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.IdentificationData)
}

void IdentificationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  target_image_ = NULL;
  population_id_ = GOOGLE_LONGLONG(0);
}

IdentificationData::~IdentificationData() {
  // @@protoc_insertion_point(destructor:Services.IdentificationData)
  SharedDtor();
}

void IdentificationData::SharedDtor() {
  if (this != default_instance_) {
    delete target_image_;
  }
}

void IdentificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentificationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdentificationData_descriptor_;
}

const IdentificationData& IdentificationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

IdentificationData* IdentificationData::default_instance_ = NULL;

IdentificationData* IdentificationData::New(::google::protobuf::Arena* arena) const {
  IdentificationData* n = new IdentificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdentificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.IdentificationData)
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
  population_id_ = GOOGLE_LONGLONG(0);
}

bool IdentificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.IdentificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataTypes.Photo target_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_population_id;
        break;
      }

      // optional int64 population_id = 2;
      case 2: {
        if (tag == 16) {
         parse_population_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &population_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.IdentificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.IdentificationData)
  return false;
#undef DO_
}

void IdentificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.IdentificationData)
  // optional .DataTypes.Photo target_image = 1;
  if (this->has_target_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_image_, output);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->population_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.IdentificationData)
}

::google::protobuf::uint8* IdentificationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.IdentificationData)
  // optional .DataTypes.Photo target_image = 1;
  if (this->has_target_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->target_image_, target);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->population_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.IdentificationData)
  return target;
}

int IdentificationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.IdentificationData)
  int total_size = 0;

  // optional .DataTypes.Photo target_image = 1;
  if (this->has_target_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_image_);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->population_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentificationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.IdentificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IdentificationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentificationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.IdentificationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.IdentificationData)
    MergeFrom(*source);
  }
}

void IdentificationData::MergeFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.IdentificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_target_image()) {
    mutable_target_image()->::DataTypes::Photo::MergeFrom(from.target_image());
  }
  if (from.population_id() != 0) {
    set_population_id(from.population_id());
  }
}

void IdentificationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentificationData::CopyFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentificationData::IsInitialized() const {

  return true;
}

void IdentificationData::Swap(IdentificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentificationData::InternalSwap(IdentificationData* other) {
  std::swap(target_image_, other->target_image_);
  std::swap(population_id_, other->population_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdentificationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdentificationData_descriptor_;
  metadata.reflection = IdentificationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdentificationData

// optional .DataTypes.Photo target_image = 1;
bool IdentificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
void IdentificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
const ::DataTypes::Photo& IdentificationData::target_image() const {
  // @@protoc_insertion_point(field_get:Services.IdentificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
::DataTypes::Photo* IdentificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::DataTypes::Photo;
  }
  // @@protoc_insertion_point(field_mutable:Services.IdentificationData.target_image)
  return target_image_;
}
::DataTypes::Photo* IdentificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:Services.IdentificationData.target_image)
  
  ::DataTypes::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
void IdentificationData::set_allocated_target_image(::DataTypes::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Services.IdentificationData.target_image)
}

// optional int64 population_id = 2;
void IdentificationData::clear_population_id() {
  population_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 IdentificationData::population_id() const {
  // @@protoc_insertion_point(field_get:Services.IdentificationData.population_id)
  return population_id_;
}
 void IdentificationData::set_population_id(::google::protobuf::int64 value) {
  
  population_id_ = value;
  // @@protoc_insertion_point(field_set:Services.IdentificationData.population_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceSearchResponse::kFacesFieldNumber;
const int FaceSearchResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceSearchResponse::FaceSearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services.FaceSearchResponse)
}

void FaceSearchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FaceSearchResponse::FaceSearchResponse(const FaceSearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Services.FaceSearchResponse)
}

void FaceSearchResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FaceSearchResponse::~FaceSearchResponse() {
  // @@protoc_insertion_point(destructor:Services.FaceSearchResponse)
  SharedDtor();
}

void FaceSearchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceSearchResponse_descriptor_;
}

const FaceSearchResponse& FaceSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_services_2ffacial_5fservice_2eproto();
  return *default_instance_;
}

FaceSearchResponse* FaceSearchResponse::default_instance_ = NULL;

FaceSearchResponse* FaceSearchResponse::New(::google::protobuf::Arena* arena) const {
  FaceSearchResponse* n = new FaceSearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Services.FaceSearchResponse)
  faces_.Clear();
  matches_.Clear();
}

bool FaceSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Services.FaceSearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataTypes.Faces faces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_faces;
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .DataTypes.Matches matches = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Services.FaceSearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Services.FaceSearchResponse)
  return false;
#undef DO_
}

void FaceSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Services.FaceSearchResponse)
  // repeated .DataTypes.Faces faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faces(i), output);
  }

  // repeated .DataTypes.Matches matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Services.FaceSearchResponse)
}

::google::protobuf::uint8* FaceSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services.FaceSearchResponse)
  // repeated .DataTypes.Faces faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faces(i), target);
  }

  // repeated .DataTypes.Matches matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Services.FaceSearchResponse)
  return target;
}

int FaceSearchResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Services.FaceSearchResponse)
  int total_size = 0;

  // repeated .DataTypes.Faces faces = 1;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  // repeated .DataTypes.Matches matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services.FaceSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceSearchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceSearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services.FaceSearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services.FaceSearchResponse)
    MergeFrom(*source);
  }
}

void FaceSearchResponse::MergeFrom(const FaceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services.FaceSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
  matches_.MergeFrom(from.matches_);
}

void FaceSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services.FaceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceSearchResponse::CopyFrom(const FaceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services.FaceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceSearchResponse::IsInitialized() const {

  return true;
}

void FaceSearchResponse::Swap(FaceSearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceSearchResponse::InternalSwap(FaceSearchResponse* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  matches_.UnsafeArenaSwap(&other->matches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceSearchResponse_descriptor_;
  metadata.reflection = FaceSearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceSearchResponse

// repeated .DataTypes.Faces faces = 1;
int FaceSearchResponse::faces_size() const {
  return faces_.size();
}
void FaceSearchResponse::clear_faces() {
  faces_.Clear();
}
const ::DataTypes::Faces& FaceSearchResponse::faces(int index) const {
  // @@protoc_insertion_point(field_get:Services.FaceSearchResponse.faces)
  return faces_.Get(index);
}
::DataTypes::Faces* FaceSearchResponse::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:Services.FaceSearchResponse.faces)
  return faces_.Mutable(index);
}
::DataTypes::Faces* FaceSearchResponse::add_faces() {
  // @@protoc_insertion_point(field_add:Services.FaceSearchResponse.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Faces >*
FaceSearchResponse::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:Services.FaceSearchResponse.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Faces >&
FaceSearchResponse::faces() const {
  // @@protoc_insertion_point(field_list:Services.FaceSearchResponse.faces)
  return faces_;
}

// repeated .DataTypes.Matches matches = 2;
int FaceSearchResponse::matches_size() const {
  return matches_.size();
}
void FaceSearchResponse::clear_matches() {
  matches_.Clear();
}
const ::DataTypes::Matches& FaceSearchResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:Services.FaceSearchResponse.matches)
  return matches_.Get(index);
}
::DataTypes::Matches* FaceSearchResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:Services.FaceSearchResponse.matches)
  return matches_.Mutable(index);
}
::DataTypes::Matches* FaceSearchResponse::add_matches() {
  // @@protoc_insertion_point(field_add:Services.FaceSearchResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::DataTypes::Matches >*
FaceSearchResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:Services.FaceSearchResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::DataTypes::Matches >&
FaceSearchResponse::matches() const {
  // @@protoc_insertion_point(field_list:Services.FaceSearchResponse.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Services

// @@protoc_insertion_point(global_scope)
