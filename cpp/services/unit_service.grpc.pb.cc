// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: services/unit_service.proto

#include "services/unit_service.pb.h"
#include "services/unit_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Services {

static const char* UnitService_method_names[] = {
  "/Services.UnitService/OpenDoor",
  "/Services.UnitService/UpdateUnits",
  "/Services.UnitService/UpdateActvity",
};

std::unique_ptr< UnitService::Stub> UnitService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< UnitService::Stub> stub(new UnitService::Stub(channel));
  return stub;
}

UnitService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OpenDoor_(UnitService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUnits_(UnitService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateActvity_(UnitService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UnitService::Stub::OpenDoor(::grpc::ClientContext* context, const ::DataTypes::Location& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_OpenDoor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnitService::Stub::AsyncOpenDoorRaw(::grpc::ClientContext* context, const ::DataTypes::Location& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_OpenDoor_, context, request);
}

::grpc::Status UnitService::Stub::UpdateUnits(::grpc::ClientContext* context, const ::DataTypes::Units& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateUnits_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnitService::Stub::AsyncUpdateUnitsRaw(::grpc::ClientContext* context, const ::DataTypes::Units& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_UpdateUnits_, context, request);
}

::grpc::Status UnitService::Stub::UpdateActvity(::grpc::ClientContext* context, const ::DataTypes::VisitRecords& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateActvity_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UnitService::Stub::AsyncUpdateActvityRaw(::grpc::ClientContext* context, const ::DataTypes::VisitRecords& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_UpdateActvity_, context, request);
}

UnitService::Service::Service() {
  (void)UnitService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::Location, ::google::protobuf::Empty>(
          std::mem_fn(&UnitService::Service::OpenDoor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::Units, ::google::protobuf::Empty>(
          std::mem_fn(&UnitService::Service::UpdateUnits), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UnitService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UnitService::Service, ::DataTypes::VisitRecords, ::google::protobuf::Empty>(
          std::mem_fn(&UnitService::Service::UpdateActvity), this)));
}

UnitService::Service::~Service() {
}

::grpc::Status UnitService::Service::OpenDoor(::grpc::ServerContext* context, const ::DataTypes::Location* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::UpdateUnits(::grpc::ServerContext* context, const ::DataTypes::Units* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnitService::Service::UpdateActvity(::grpc::ServerContext* context, const ::DataTypes::VisitRecords* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Services

