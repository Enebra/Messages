// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bio_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BioService {

namespace {

const ::google::protobuf::Descriptor* ServiceException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceException_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopulationCreationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopulationCreationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcquisitionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcquisitionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaptureDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* IrisDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IrisDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortraitCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortraitCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Photo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Photo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitorList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitorList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerificationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerificationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdentificationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdentificationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matches_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcquiredData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcquiredData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintAcquiredData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintAcquiredData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnrollmentFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnrollmentFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerificationFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerificationFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPhotoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPhotoRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetPhotoRequest_PhotoResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetPersonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPersonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLocationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetVisitorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVisitorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Rights_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IsoComplianceTemplate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Finger_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EyeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccessState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BiometricDataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bio_5fservice_2eproto() {
  protobuf_AddDesc_bio_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bio_service.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceException_descriptor_ = file->message_type(0);
  static const int ServiceException_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, is_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, error_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, message_),
  };
  ServiceException_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceException_descriptor_,
      ServiceException::default_instance_,
      ServiceException_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceException),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, _is_default_instance_));
  PopulationCreationResponse_descriptor_ = file->message_type(1);
  static const int PopulationCreationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, exception_),
  };
  PopulationCreationResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PopulationCreationResponse_descriptor_,
      PopulationCreationResponse::default_instance_,
      PopulationCreationResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PopulationCreationResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, _is_default_instance_));
  AcquisitionResponse_descriptor_ = file->message_type(2);
  static const int AcquisitionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, exception_),
  };
  AcquisitionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcquisitionResponse_descriptor_,
      AcquisitionResponse::default_instance_,
      AcquisitionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcquisitionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, _is_default_instance_));
  EntityIds_descriptor_ = file->message_type(3);
  static const int EntityIds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityIds, ids_),
  };
  EntityIds_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityIds_descriptor_,
      EntityIds::default_instance_,
      EntityIds_offsets_,
      -1,
      -1,
      -1,
      sizeof(EntityIds),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityIds, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityIds, _is_default_instance_));
  Person_descriptor_ = file->message_type(4);
  static const int Person_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, last_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, faces_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      -1,
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _is_default_instance_));
  PersonResponse_descriptor_ = file->message_type(5);
  static const int PersonResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonResponse, person_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonResponse, exception_),
  };
  PersonResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PersonResponse_descriptor_,
      PersonResponse::default_instance_,
      PersonResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PersonResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonResponse, _is_default_instance_));
  AccessDevice_descriptor_ = file->message_type(6);
  static const int AccessDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, device_name_),
  };
  AccessDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessDevice_descriptor_,
      AccessDevice::default_instance_,
      AccessDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _is_default_instance_));
  CaptureDevice_descriptor_ = file->message_type(7);
  static const int CaptureDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, device_name_),
  };
  CaptureDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CaptureDevice_descriptor_,
      CaptureDevice::default_instance_,
      CaptureDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(CaptureDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, _is_default_instance_));
  FingerprintDevice_descriptor_ = file->message_type(8);
  static const int FingerprintDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, device_name_),
  };
  FingerprintDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintDevice_descriptor_,
      FingerprintDevice::default_instance_,
      FingerprintDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, _is_default_instance_));
  IrisDevice_descriptor_ = file->message_type(9);
  static const int IrisDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, device_name_),
  };
  IrisDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IrisDevice_descriptor_,
      IrisDevice::default_instance_,
      IrisDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(IrisDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, _is_default_instance_));
  Card_descriptor_ = file->message_type(10);
  static const int Card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, unique_identifier_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  Location_descriptor_ = file->message_type(11);
  static const int Location_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, location_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, mac_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, capture_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, access_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, fingerprint_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, iris_device_),
  };
  Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      -1,
      -1,
      -1,
      sizeof(Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _is_default_instance_));
  PortraitCharacteristic_descriptor_ = file->message_type(12);
  static const int PortraitCharacteristic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortraitCharacteristic, faces_),
  };
  PortraitCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PortraitCharacteristic_descriptor_,
      PortraitCharacteristic::default_instance_,
      PortraitCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(PortraitCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortraitCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortraitCharacteristic, _is_default_instance_));
  FaceCharacteristic_descriptor_ = file->message_type(13);
  static const int FaceCharacteristic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, person_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, photo_id_),
  };
  FaceCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceCharacteristic_descriptor_,
      FaceCharacteristic::default_instance_,
      FaceCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, _is_default_instance_));
  Position_descriptor_ = file->message_type(14);
  static const int Position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  Box_descriptor_ = file->message_type(15);
  static const int Box_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, height_),
  };
  Box_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Box_descriptor_,
      Box::default_instance_,
      Box_offsets_,
      -1,
      -1,
      -1,
      sizeof(Box),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _is_default_instance_));
  FingerprintCharacteristic_descriptor_ = file->message_type(16);
  static const int FingerprintCharacteristic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, minutiaes_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, person_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, photo_id_),
  };
  FingerprintCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintCharacteristic_descriptor_,
      FingerprintCharacteristic::default_instance_,
      FingerprintCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, _is_default_instance_));
  Photo_descriptor_ = file->message_type(17);
  static const int Photo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, photo_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, bytestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, biotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, owner_id_),
  };
  Photo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Photo_descriptor_,
      Photo::default_instance_,
      Photo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Photo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _is_default_instance_));
  Visitor_descriptor_ = file->message_type(18);
  static const int Visitor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, person_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, card_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, status_),
  };
  Visitor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Visitor_descriptor_,
      Visitor::default_instance_,
      Visitor_offsets_,
      -1,
      -1,
      -1,
      sizeof(Visitor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, _is_default_instance_));
  VisitorList_descriptor_ = file->message_type(19);
  static const int VisitorList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitorList, visitors_),
  };
  VisitorList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisitorList_descriptor_,
      VisitorList::default_instance_,
      VisitorList_offsets_,
      -1,
      -1,
      -1,
      sizeof(VisitorList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitorList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitorList, _is_default_instance_));
  LocationList_descriptor_ = file->message_type(20);
  static const int LocationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationList, locations_),
  };
  LocationList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocationList_descriptor_,
      LocationList::default_instance_,
      LocationList_offsets_,
      -1,
      -1,
      -1,
      sizeof(LocationList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationList, _is_default_instance_));
  PersonList_descriptor_ = file->message_type(21);
  static const int PersonList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonList, persons_),
  };
  PersonList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PersonList_descriptor_,
      PersonList::default_instance_,
      PersonList_offsets_,
      -1,
      -1,
      -1,
      sizeof(PersonList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonList, _is_default_instance_));
  PhotoList_descriptor_ = file->message_type(22);
  static const int PhotoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoList, photos_),
  };
  PhotoList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoList_descriptor_,
      PhotoList::default_instance_,
      PhotoList_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhotoList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoList, _is_default_instance_));
  CardList_descriptor_ = file->message_type(23);
  static const int CardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardList, cards_),
  };
  CardList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CardList_descriptor_,
      CardList::default_instance_,
      CardList_offsets_,
      -1,
      -1,
      -1,
      sizeof(CardList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardList, _is_default_instance_));
  Response_descriptor_ = file->message_type(24);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, good_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  VerificationData_descriptor_ = file->message_type(25);
  static const int VerificationData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, target_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, comparison_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, comparison_person_id_),
  };
  VerificationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerificationData_descriptor_,
      VerificationData::default_instance_,
      VerificationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerificationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, _is_default_instance_));
  IdentificationData_descriptor_ = file->message_type(26);
  static const int IdentificationData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, target_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, population_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, comparison_images_),
  };
  IdentificationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IdentificationData_descriptor_,
      IdentificationData::default_instance_,
      IdentificationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(IdentificationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, _is_default_instance_));
  Match_descriptor_ = file->message_type(27);
  static const int Match_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, match_),
  };
  Match_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Match_descriptor_,
      Match::default_instance_,
      Match_offsets_,
      -1,
      -1,
      -1,
      sizeof(Match),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _is_default_instance_));
  Matches_descriptor_ = file->message_type(28);
  static const int Matches_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, matches_),
  };
  Matches_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Matches_descriptor_,
      Matches::default_instance_,
      Matches_offsets_,
      -1,
      -1,
      -1,
      sizeof(Matches),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, _is_default_instance_));
  FaceSearchResponse_descriptor_ = file->message_type(29);
  static const int FaceSearchResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, portraits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, exception_),
  };
  FaceSearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceSearchResponse_descriptor_,
      FaceSearchResponse::default_instance_,
      FaceSearchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceSearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, _is_default_instance_));
  AcquiredData_descriptor_ = file->message_type(30);
  static const int AcquiredData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, owner_id_),
  };
  AcquiredData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcquiredData_descriptor_,
      AcquiredData::default_instance_,
      AcquiredData_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcquiredData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, _is_default_instance_));
  FingerprintAcquiredData_descriptor_ = file->message_type(31);
  static const int FingerprintAcquiredData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, position_),
  };
  FingerprintAcquiredData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintAcquiredData_descriptor_,
      FingerprintAcquiredData::default_instance_,
      FingerprintAcquiredData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintAcquiredData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, _is_default_instance_));
  EnrollmentFeedback_descriptor_ = file->message_type(32);
  static const int EnrollmentFeedback_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, characteristic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, photo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, message_),
  };
  EnrollmentFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnrollmentFeedback_descriptor_,
      EnrollmentFeedback::default_instance_,
      EnrollmentFeedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnrollmentFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, _is_default_instance_));
  VerificationFeedback_descriptor_ = file->message_type(33);
  static const int VerificationFeedback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, enrollment_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, match_),
  };
  VerificationFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerificationFeedback_descriptor_,
      VerificationFeedback::default_instance_,
      VerificationFeedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerificationFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, _is_default_instance_));
  GetPhotoRequest_descriptor_ = file->message_type(34);
  static const int GetPhotoRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, with_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, items_per_page_),
  };
  GetPhotoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPhotoRequest_descriptor_,
      GetPhotoRequest::default_instance_,
      GetPhotoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPhotoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, _is_default_instance_));
  GetPhotoRequest_PhotoResponseType_descriptor_ = GetPhotoRequest_descriptor_->enum_type(0);
  GetPersonRequest_descriptor_ = file->message_type(35);
  static const int GetPersonRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonRequest, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonRequest, items_per_page_),
  };
  GetPersonRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPersonRequest_descriptor_,
      GetPersonRequest::default_instance_,
      GetPersonRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPersonRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonRequest, _is_default_instance_));
  GetLocationRequest_descriptor_ = file->message_type(36);
  static const int GetLocationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, count_),
  };
  GetLocationRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetLocationRequest_descriptor_,
      GetLocationRequest::default_instance_,
      GetLocationRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetLocationRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, _is_default_instance_));
  GetVisitorRequest_descriptor_ = file->message_type(37);
  static const int GetVisitorRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, countries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, datetime_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, datetime_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, items_per_page_),
  };
  GetVisitorRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetVisitorRequest_descriptor_,
      GetVisitorRequest::default_instance_,
      GetVisitorRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetVisitorRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVisitorRequest, _is_default_instance_));
  LogRecord_descriptor_ = file->message_type(38);
  static const int LogRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, detected_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, exception_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, function_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, comment_),
  };
  LogRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRecord_descriptor_,
      LogRecord::default_instance_,
      LogRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _is_default_instance_));
  Gender_descriptor_ = file->enum_type(0);
  Rights_descriptor_ = file->enum_type(1);
  MessageType_descriptor_ = file->enum_type(2);
  IsoComplianceTemplate_descriptor_ = file->enum_type(3);
  ImageFormat_descriptor_ = file->enum_type(4);
  EntityState_descriptor_ = file->enum_type(5);
  Finger_descriptor_ = file->enum_type(6);
  EyeType_descriptor_ = file->enum_type(7);
  AccessState_descriptor_ = file->enum_type(8);
  BiometricDataType_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bio_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceException_descriptor_, &ServiceException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PopulationCreationResponse_descriptor_, &PopulationCreationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcquisitionResponse_descriptor_, &AcquisitionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityIds_descriptor_, &EntityIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, &Person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PersonResponse_descriptor_, &PersonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessDevice_descriptor_, &AccessDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CaptureDevice_descriptor_, &CaptureDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintDevice_descriptor_, &FingerprintDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IrisDevice_descriptor_, &IrisDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PortraitCharacteristic_descriptor_, &PortraitCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceCharacteristic_descriptor_, &FaceCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Box_descriptor_, &Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintCharacteristic_descriptor_, &FingerprintCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Photo_descriptor_, &Photo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Visitor_descriptor_, &Visitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisitorList_descriptor_, &VisitorList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocationList_descriptor_, &LocationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PersonList_descriptor_, &PersonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoList_descriptor_, &PhotoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardList_descriptor_, &CardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerificationData_descriptor_, &VerificationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IdentificationData_descriptor_, &IdentificationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Match_descriptor_, &Match::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Matches_descriptor_, &Matches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceSearchResponse_descriptor_, &FaceSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcquiredData_descriptor_, &AcquiredData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintAcquiredData_descriptor_, &FingerprintAcquiredData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnrollmentFeedback_descriptor_, &EnrollmentFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerificationFeedback_descriptor_, &VerificationFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPhotoRequest_descriptor_, &GetPhotoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPersonRequest_descriptor_, &GetPersonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetLocationRequest_descriptor_, &GetLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetVisitorRequest_descriptor_, &GetVisitorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRecord_descriptor_, &LogRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bio_5fservice_2eproto() {
  delete ServiceException::default_instance_;
  delete ServiceException_reflection_;
  delete PopulationCreationResponse::default_instance_;
  delete PopulationCreationResponse_reflection_;
  delete AcquisitionResponse::default_instance_;
  delete AcquisitionResponse_reflection_;
  delete EntityIds::default_instance_;
  delete EntityIds_reflection_;
  delete Person::default_instance_;
  delete Person_reflection_;
  delete PersonResponse::default_instance_;
  delete PersonResponse_reflection_;
  delete AccessDevice::default_instance_;
  delete AccessDevice_reflection_;
  delete CaptureDevice::default_instance_;
  delete CaptureDevice_reflection_;
  delete FingerprintDevice::default_instance_;
  delete FingerprintDevice_reflection_;
  delete IrisDevice::default_instance_;
  delete IrisDevice_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete PortraitCharacteristic::default_instance_;
  delete PortraitCharacteristic_reflection_;
  delete FaceCharacteristic::default_instance_;
  delete FaceCharacteristic_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Box::default_instance_;
  delete Box_reflection_;
  delete FingerprintCharacteristic::default_instance_;
  delete FingerprintCharacteristic_reflection_;
  delete Photo::default_instance_;
  delete Photo_reflection_;
  delete Visitor::default_instance_;
  delete Visitor_reflection_;
  delete VisitorList::default_instance_;
  delete VisitorList_reflection_;
  delete LocationList::default_instance_;
  delete LocationList_reflection_;
  delete PersonList::default_instance_;
  delete PersonList_reflection_;
  delete PhotoList::default_instance_;
  delete PhotoList_reflection_;
  delete CardList::default_instance_;
  delete CardList_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete VerificationData::default_instance_;
  delete VerificationData_reflection_;
  delete IdentificationData::default_instance_;
  delete IdentificationData_reflection_;
  delete Match::default_instance_;
  delete Match_reflection_;
  delete Matches::default_instance_;
  delete Matches_reflection_;
  delete FaceSearchResponse::default_instance_;
  delete FaceSearchResponse_reflection_;
  delete AcquiredData::default_instance_;
  delete AcquiredData_reflection_;
  delete FingerprintAcquiredData::default_instance_;
  delete FingerprintAcquiredData_reflection_;
  delete EnrollmentFeedback::default_instance_;
  delete EnrollmentFeedback_reflection_;
  delete VerificationFeedback::default_instance_;
  delete VerificationFeedback_reflection_;
  delete GetPhotoRequest::default_instance_;
  delete GetPhotoRequest_reflection_;
  delete GetPersonRequest::default_instance_;
  delete GetPersonRequest_reflection_;
  delete GetLocationRequest::default_instance_;
  delete GetLocationRequest_reflection_;
  delete GetVisitorRequest::default_instance_;
  delete GetVisitorRequest_reflection_;
  delete LogRecord::default_instance_;
  delete LogRecord_reflection_;
}

void protobuf_AddDesc_bio_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021bio_service.proto\022\nBioService\032\033google/"
    "protobuf/empty.proto\"D\n\020ServiceException"
    "\022\r\n\005is_ok\030\001 \001(\010\022\020\n\010error_id\030\002 \001(\003\022\017\n\007mes"
    "sage\030\003 \001(\t\"\217\001\n\032PopulationCreationRespons"
    "e\022\n\n\002id\030\001 \001(\003\0224\n\010portrait\030\002 \003(\0132\".BioSer"
    "vice.PortraitCharacteristic\022/\n\texception"
    "\030\003 \001(\0132\034.BioService.ServiceException\"|\n\023"
    "AcquisitionResponse\0224\n\010portrait\030\001 \001(\0132\"."
    "BioService.PortraitCharacteristic\022/\n\texc"
    "eption\030\002 \001(\0132\034.BioService.ServiceExcepti"
    "on\"\030\n\tEntityIds\022\013\n\003ids\030\001 \003(\003\"\261\001\n\006Person\022"
    "\n\n\002id\030\001 \001(\003\022\022\n\nfirst_name\030\002 \001(\t\022\021\n\tlast_"
    "name\030\003 \001(\t\022$\n\tthumbnail\030\004 \001(\0132\021.BioServi"
    "ce.Photo\022\037\n\005cards\030\005 \003(\0132\020.BioService.Car"
    "d\022-\n\005faces\030\006 \003(\0132\036.BioService.FaceCharac"
    "teristic\"e\n\016PersonResponse\022\"\n\006person\030\001 \001"
    "(\0132\022.BioService.Person\022/\n\texception\030\002 \001("
    "\0132\034.BioService.ServiceException\"#\n\014Acces"
    "sDevice\022\023\n\013device_name\030\001 \001(\t\"$\n\rCaptureD"
    "evice\022\023\n\013device_name\030\001 \001(\t\"(\n\021Fingerprin"
    "tDevice\022\023\n\013device_name\030\001 \001(\t\"!\n\nIrisDevi"
    "ce\022\023\n\013device_name\030\001 \001(\t\"-\n\004Card\022\n\n\002id\030\001 "
    "\001(\003\022\031\n\021unique_identifier\030\002 \001(\t\"\243\002\n\010Locat"
    "ion\022\n\n\002id\030\001 \001(\003\022\025\n\rlocation_name\030\002 \001(\t\022\023"
    "\n\013description\030\003 \001(\t\022\023\n\013mac_address\030\004 \001(\t"
    "\0221\n\016capture_device\030\005 \001(\0132\031.BioService.Ca"
    "ptureDevice\022/\n\raccess_device\030\006 \001(\0132\030.Bio"
    "Service.AccessDevice\0229\n\022fingerprint_devi"
    "ce\030\007 \001(\0132\035.BioService.FingerprintDevice\022"
    "+\n\013iris_device\030\010 \001(\0132\026.BioService.IrisDe"
    "vice\"G\n\026PortraitCharacteristic\022-\n\005Faces\030"
    "\001 \003(\0132\036.BioService.FaceCharacteristic\"w\n"
    "\022FaceCharacteristic\022\n\n\002id\030\001 \001(\003\022\034\n\003box\030\002"
    " \001(\0132\017.BioService.Box\022\022\n\nconfidence\030\003 \001("
    "\002\022\021\n\tperson_id\030\004 \001(\003\022\020\n\010photo_id\030\005 \001(\003\" "
    "\n\010Position\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"I\n\003Box\022"
    "#\n\005begin\030\001 \001(\0132\024.BioService.Position\022\r\n\005"
    "width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\"\213\001\n\031Fingerpr"
    "intCharacteristic\022\n\n\002id\030\001 \001(\003\022$\n\010positio"
    "n\030\002 \001(\0162\022.BioService.Finger\022\027\n\017minutiaes"
    "_count\030\003 \001(\017\022\021\n\tperson_id\030\004 \001(\003\022\020\n\010photo"
    "_id\030\005 \001(\003\"\233\001\n\005Photo\022\n\n\002id\030\001 \001(\003\022\021\n\tphoto"
    "_url\030\002 \001(\t\022\022\n\nbytestring\030\003 \001(\014\022\r\n\005width\030"
    "\004 \001(\005\022\016\n\006height\030\005 \001(\005\022.\n\007biotype\030\006 \001(\0162\035"
    ".BioService.BiometricDataType\022\020\n\010owner_i"
    "d\030\007 \001(\003\"\211\001\n\007Visitor\022\n\n\002id\030\001 \001(\003\022\021\n\tperso"
    "n_id\030\002 \001(\003\022\023\n\013location_id\030\003 \001(\003\022\014\n\004time\030"
    "\004 \001(\003\022\023\n\013card_number\030\005 \001(\t\022\'\n\006status\030\006 \001"
    "(\0162\027.BioService.AccessState\"4\n\013VisitorLi"
    "st\022%\n\010visitors\030\001 \003(\0132\023.BioService.Visito"
    "r\"7\n\014LocationList\022\'\n\tlocations\030\001 \003(\0132\024.B"
    "ioService.Location\"1\n\nPersonList\022#\n\007pers"
    "ons\030\001 \003(\0132\022.BioService.Person\".\n\tPhotoLi"
    "st\022!\n\006photos\030\001 \003(\0132\021.BioService.Photo\"+\n"
    "\010CardList\022\037\n\005cards\030\001 \003(\0132\020.BioService.Ca"
    "rd\"\030\n\010Response\022\014\n\004good\030\001 \001(\010\"\206\001\n\020Verific"
    "ationData\022\'\n\014target_image\030\001 \001(\0132\021.BioSer"
    "vice.Photo\022+\n\020comparison_image\030\002 \001(\0132\021.B"
    "ioService.Photo\022\034\n\024comparison_person_id\030"
    "\003 \001(\003\"\202\001\n\022IdentificationData\022\'\n\014target_i"
    "mage\030\001 \001(\0132\021.BioService.Photo\022\025\n\rpopulat"
    "ion_id\030\002 \001(\003\022,\n\021comparison_images\030\003 \003(\0132"
    "\021.BioService.Photo\"\'\n\005Match\022\017\n\007face_id\030\002"
    " \001(\003\022\r\n\005match\030\003 \001(\002\">\n\007Matches\022\017\n\007face_i"
    "d\030\001 \001(\003\022\"\n\007matches\030\002 \003(\0132\021.BioService.Ma"
    "tch\"\263\001\n\022FaceSearchResponse\0225\n\tportraits\030"
    "\001 \003(\0132\".BioService.PortraitCharacteristi"
    "c\022$\n\007matches\030\002 \003(\0132\023.BioService.Matches\022"
    "\017\n\007message\030\003 \001(\t\022/\n\texception\030\004 \001(\0132\034.Bi"
    "oService.ServiceException\"B\n\014AcquiredDat"
    "a\022 \n\005image\030\001 \001(\0132\021.BioService.Photo\022\020\n\010o"
    "wner_id\030\002 \001(\003\"g\n\027FingerprintAcquiredData"
    "\022&\n\004data\030\001 \001(\0132\030.BioService.AcquiredData"
    "\022$\n\010position\030\002 \001(\0162\022.BioService.Finger\"\246"
    "\001\n\022EnrollmentFeedback\022\031\n\021characteristic_"
    "id\030\001 \001(\003\022\020\n\010photo_id\030\002 \001(\003\022\017\n\007quality\030\003 "
    "\001(\017\022/\n\tException\030\004 \001(\0132\034.BioService.Serv"
    "iceException\022\020\n\010progress\030\005 \001(\017\022\017\n\007messag"
    "e\030\006 \001(\t\"b\n\024VerificationFeedback\022;\n\023enrol"
    "lment_feedback\030\001 \001(\0132\036.BioService.Enroll"
    "mentFeedback\022\r\n\005match\030\002 \001(\002\"\327\001\n\017GetPhoto"
    "Request\022A\n\nwith_bytes\030\001 \001(\0162-.BioService"
    ".GetPhotoRequest.PhotoResponseType\022\017\n\007pe"
    "rsons\030\002 \003(\003\022\016\n\006photos\030\003 \003(\003\022\026\n\016items_per"
    "_page\030\004 \001(\003\"H\n\021PhotoResponseType\022\r\n\tUnde"
    "fined\020\000\022\010\n\004Full\020\001\022\r\n\tOnlyBytes\020\002\022\013\n\007NoBy"
    "tes\020\003\"7\n\020GetPersonRequest\022\013\n\003ids\030\001 \003(\003\022\026"
    "\n\016items_per_page\030\002 \001(\003\"#\n\022GetLocationReq"
    "uest\022\r\n\005count\030\001 \001(\003\"\216\001\n\021GetVisitorReques"
    "t\022\021\n\tcountries\030\002 \003(\t\022\021\n\tlocations\030\003 \003(\003\022"
    "\017\n\007persons\030\004 \003(\003\022\025\n\rdatetime_from\030\005 \001(\003\022"
    "\023\n\013datetime_to\030\006 \001(\003\022\026\n\016items_per_page\030\007"
    " \001(\003\"\275\001\n\tLogRecord\022-\n\014message_type\030\001 \001(\016"
    "2\027.BioService.MessageType\022\025\n\rdetected_ti"
    "me\030\002 \001(\003\022\031\n\021exception_message\030\003 \001(\t\022\022\n\nc"
    "lass_name\030\004 \001(\t\022\025\n\rfunction_name\030\005 \001(\t\022\023"
    "\n\013line_number\030\006 \001(\003\022\017\n\007comment\030\007 \001(\t*(\n\006"
    "Gender\022\010\n\004None\020\000\022\010\n\004Male\020\001\022\n\n\006Female\020\002*\?"
    "\n\006Rights\022\n\n\006Custom\020\000\022\014\n\010Operator\020\001\022\013\n\007Ma"
    "nager\020\002\022\016\n\nSupervisor\020\003*6\n\013MessageType\022\017"
    "\n\013Information\020\000\022\t\n\005Error\020\001\022\013\n\007Warning\020\002*"
    "\370\004\n\025IsoComplianceTemplate\022\013\n\007Nothing\020\000\022\026"
    "\n\022OnlyOneFaceVisible\020\001\022\034\n\030goodVerticalFa"
    "cePosition\020\002\022\034\n\030horizontallyCenteredFace"
    "\020\003\022\017\n\013widthOfHead\020\004\022\020\n\014lengthOfHead\020\005\022\033\n"
    "\027widthOfHeadBestPractice\020\006\022\034\n\030lengthOfHe"
    "adBestPractice\020\007\022\016\n\nresolution\020\010\022\032\n\026reso"
    "lutionBestPractice\020\t\022\"\n\036imageWidthToHeig"
    "htBestPractice\020\n\022\020\n\014goodExposure\020\013\022\030\n\024go"
    "odGrayScaleProfile\020\014\022\030\n\024hasNaturalSkinCo"
    "lour\020\r\022\016\n\nnoHotSpots\020\016\022#\n\037isBackgroundUn"
    "iformBestPractice\020\017\022\r\n\tisFrontal\020\020\022\031\n\025is"
    "FrontalBestPractice\020\021\022\025\n\021isLightingUnifo"
    "rm\020\022\022\030\n\024eyesOpenBestPractice\020\023\022\037\n\033eyesGa"
    "zeFrontalBestPractice\020\024\022\032\n\026eyesNotRedBes"
    "tPractice\020\025\022\023\n\017noTintedGlasses\020\026\022\013\n\007isSh"
    "arp\020\027\022\033\n\027mouthClosedBestPractice\020\030*T\n\013Im"
    "ageFormat\022\010\n\004JPEG\020\000\022\014\n\010JPEG2000\020\001\022\007\n\003PNG"
    "\020\002\022\007\n\003BMP\020\003\022\007\n\003PGM\020\004\022\022\n\016GRAYSCALE_8BIT\020\005"
    "*B\n\013EntityState\022\r\n\tUnchanged\020\000\022\t\n\005Added\020"
    "\001\022\014\n\010Modified\020\002\022\013\n\007Deleted\020\003*\256\001\n\006Finger\022"
    "\007\n\003Any\020\000\022\016\n\nRightThumb\020\001\022\r\n\tLeftThumb\020\002\022"
    "\016\n\nRightIndex\020\003\022\r\n\tLeftIndex\020\004\022\017\n\013RightM"
    "iddle\020\005\022\016\n\nLeftMiddle\020\006\022\r\n\tRightRing\020\007\022\014"
    "\n\010LeftRing\020\010\022\017\n\013RightLittle\020\t\022\016\n\nLeftLit"
    "tle\020\n*5\n\007EyeType\022\013\n\007NoneEye\020\000\022\010\n\004Left\020\001\022"
    "\t\n\005Right\020\002\022\010\n\004Both\020\003*2\n\013AccessState\022\r\n\tN"
    "oneState\020\000\022\n\n\006Access\020\001\022\010\n\004Deny\020\002*Q\n\021Biom"
    "etricDataType\022\014\n\010NoneType\020\000\022\n\n\006Facial\020\001\022"
    "\017\n\013Fingerprint\020\002\022\010\n\004Iris\020\003\022\007\n\003All\020\0042\333\003\n\025"
    "BiometricFacialSevice\022\?\n\007Acquire\022\021.BioSe"
    "rvice.Photo\032\037.BioService.AcquisitionResp"
    "onse\"\000\022D\n\006Enroll\022\030.BioService.AcquiredDa"
    "ta\032\036.BioService.EnrollmentFeedback\"\000\022F\n\006"
    "Verify\022\030.BioService.AcquiredData\032 .BioSe"
    "rvice.VerificationFeedback\"\000\022S\n\020CreatePo"
    "pulation\022\025.BioService.PhotoList\032&.BioSer"
    "vice.PopulationCreationResponse\"\000\022L\n\nVer"
    "ifyFace\022\034.BioService.VerificationData\032\036."
    "BioService.FaceSearchResponse\"\000\022P\n\014Ident"
    "ifyFace\022\036.BioService.IdentificationData\032"
    "\036.BioService.FaceSearchResponse\"\0002\210\002\n\016Da"
    "tabaseSevice\022C\n\tGetPerson\022\034.BioService.G"
    "etPersonRequest\032\026.BioService.PersonList\""
    "\000\0225\n\tAddPerson\022\022.BioService.Person\032\022.Bio"
    "Service.Person\"\000\022<\n\014UpdatePerson\022\022.BioSe"
    "rvice.Person\032\026.google.protobuf.Empty\"\000\022<"
    "\n\014DeletePerson\022\022.BioService.Person\032\026.goo"
    "gle.protobuf.Empty\"\000B\017\n\007ex.grpc\242\002\003RTGb\006p"
    "roto3", 5965);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bio_service.proto", &protobuf_RegisterTypes);
  ServiceException::default_instance_ = new ServiceException();
  PopulationCreationResponse::default_instance_ = new PopulationCreationResponse();
  AcquisitionResponse::default_instance_ = new AcquisitionResponse();
  EntityIds::default_instance_ = new EntityIds();
  Person::default_instance_ = new Person();
  PersonResponse::default_instance_ = new PersonResponse();
  AccessDevice::default_instance_ = new AccessDevice();
  CaptureDevice::default_instance_ = new CaptureDevice();
  FingerprintDevice::default_instance_ = new FingerprintDevice();
  IrisDevice::default_instance_ = new IrisDevice();
  Card::default_instance_ = new Card();
  Location::default_instance_ = new Location();
  PortraitCharacteristic::default_instance_ = new PortraitCharacteristic();
  FaceCharacteristic::default_instance_ = new FaceCharacteristic();
  Position::default_instance_ = new Position();
  Box::default_instance_ = new Box();
  FingerprintCharacteristic::default_instance_ = new FingerprintCharacteristic();
  Photo::default_instance_ = new Photo();
  Visitor::default_instance_ = new Visitor();
  VisitorList::default_instance_ = new VisitorList();
  LocationList::default_instance_ = new LocationList();
  PersonList::default_instance_ = new PersonList();
  PhotoList::default_instance_ = new PhotoList();
  CardList::default_instance_ = new CardList();
  Response::default_instance_ = new Response();
  VerificationData::default_instance_ = new VerificationData();
  IdentificationData::default_instance_ = new IdentificationData();
  Match::default_instance_ = new Match();
  Matches::default_instance_ = new Matches();
  FaceSearchResponse::default_instance_ = new FaceSearchResponse();
  AcquiredData::default_instance_ = new AcquiredData();
  FingerprintAcquiredData::default_instance_ = new FingerprintAcquiredData();
  EnrollmentFeedback::default_instance_ = new EnrollmentFeedback();
  VerificationFeedback::default_instance_ = new VerificationFeedback();
  GetPhotoRequest::default_instance_ = new GetPhotoRequest();
  GetPersonRequest::default_instance_ = new GetPersonRequest();
  GetLocationRequest::default_instance_ = new GetLocationRequest();
  GetVisitorRequest::default_instance_ = new GetVisitorRequest();
  LogRecord::default_instance_ = new LogRecord();
  ServiceException::default_instance_->InitAsDefaultInstance();
  PopulationCreationResponse::default_instance_->InitAsDefaultInstance();
  AcquisitionResponse::default_instance_->InitAsDefaultInstance();
  EntityIds::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  PersonResponse::default_instance_->InitAsDefaultInstance();
  AccessDevice::default_instance_->InitAsDefaultInstance();
  CaptureDevice::default_instance_->InitAsDefaultInstance();
  FingerprintDevice::default_instance_->InitAsDefaultInstance();
  IrisDevice::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  PortraitCharacteristic::default_instance_->InitAsDefaultInstance();
  FaceCharacteristic::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Box::default_instance_->InitAsDefaultInstance();
  FingerprintCharacteristic::default_instance_->InitAsDefaultInstance();
  Photo::default_instance_->InitAsDefaultInstance();
  Visitor::default_instance_->InitAsDefaultInstance();
  VisitorList::default_instance_->InitAsDefaultInstance();
  LocationList::default_instance_->InitAsDefaultInstance();
  PersonList::default_instance_->InitAsDefaultInstance();
  PhotoList::default_instance_->InitAsDefaultInstance();
  CardList::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  VerificationData::default_instance_->InitAsDefaultInstance();
  IdentificationData::default_instance_->InitAsDefaultInstance();
  Match::default_instance_->InitAsDefaultInstance();
  Matches::default_instance_->InitAsDefaultInstance();
  FaceSearchResponse::default_instance_->InitAsDefaultInstance();
  AcquiredData::default_instance_->InitAsDefaultInstance();
  FingerprintAcquiredData::default_instance_->InitAsDefaultInstance();
  EnrollmentFeedback::default_instance_->InitAsDefaultInstance();
  VerificationFeedback::default_instance_->InitAsDefaultInstance();
  GetPhotoRequest::default_instance_->InitAsDefaultInstance();
  GetPersonRequest::default_instance_->InitAsDefaultInstance();
  GetLocationRequest::default_instance_->InitAsDefaultInstance();
  GetVisitorRequest::default_instance_->InitAsDefaultInstance();
  LogRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bio_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bio_5fservice_2eproto {
  StaticDescriptorInitializer_bio_5fservice_2eproto() {
    protobuf_AddDesc_bio_5fservice_2eproto();
  }
} static_descriptor_initializer_bio_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gender_descriptor_;
}
bool Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Rights_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rights_descriptor_;
}
bool Rights_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IsoComplianceTemplate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsoComplianceTemplate_descriptor_;
}
bool IsoComplianceTemplate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFormat_descriptor_;
}
bool ImageFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityState_descriptor_;
}
bool EntityState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Finger_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Finger_descriptor_;
}
bool Finger_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EyeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyeType_descriptor_;
}
bool EyeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccessState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessState_descriptor_;
}
bool AccessState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BiometricDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricDataType_descriptor_;
}
bool BiometricDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceException::kIsOkFieldNumber;
const int ServiceException::kErrorIdFieldNumber;
const int ServiceException::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceException::ServiceException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.ServiceException)
}

void ServiceException::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServiceException::ServiceException(const ServiceException& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.ServiceException)
}

void ServiceException::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_ok_ = false;
  error_id_ = GOOGLE_LONGLONG(0);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServiceException::~ServiceException() {
  // @@protoc_insertion_point(destructor:BioService.ServiceException)
  SharedDtor();
}

void ServiceException::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServiceException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceException_descriptor_;
}

const ServiceException& ServiceException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

ServiceException* ServiceException::default_instance_ = NULL;

ServiceException* ServiceException::New(::google::protobuf::Arena* arena) const {
  ServiceException* n = new ServiceException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceException::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.ServiceException)
  is_ok_ = false;
  error_id_ = GOOGLE_LONGLONG(0);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.ServiceException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_id;
        break;
      }

      // optional int64 error_id = 2;
      case 2: {
        if (tag == 16) {
         parse_error_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.ServiceException.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.ServiceException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.ServiceException)
  return false;
#undef DO_
}

void ServiceException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.ServiceException)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

  // optional int64 error_id = 2;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_id(), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.ServiceException.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.ServiceException)
}

::google::protobuf::uint8* ServiceException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.ServiceException)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ok(), target);
  }

  // optional int64 error_id = 2;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_id(), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.ServiceException.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.ServiceException)
  return target;
}

int ServiceException::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.ServiceException)
  int total_size = 0;

  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 error_id = 2;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_id());
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.ServiceException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceException* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.ServiceException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.ServiceException)
    MergeFrom(*source);
  }
}

void ServiceException::MergeFrom(const ServiceException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.ServiceException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.is_ok() != 0) {
    set_is_ok(from.is_ok());
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ServiceException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.ServiceException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceException::CopyFrom(const ServiceException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.ServiceException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceException::IsInitialized() const {

  return true;
}

void ServiceException::Swap(ServiceException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceException::InternalSwap(ServiceException* other) {
  std::swap(is_ok_, other->is_ok_);
  std::swap(error_id_, other->error_id_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceException_descriptor_;
  metadata.reflection = ServiceException_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceException

// optional bool is_ok = 1;
void ServiceException::clear_is_ok() {
  is_ok_ = false;
}
 bool ServiceException::is_ok() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.is_ok)
  return is_ok_;
}
 void ServiceException::set_is_ok(bool value) {
  
  is_ok_ = value;
  // @@protoc_insertion_point(field_set:BioService.ServiceException.is_ok)
}

// optional int64 error_id = 2;
void ServiceException::clear_error_id() {
  error_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ServiceException::error_id() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.error_id)
  return error_id_;
}
 void ServiceException::set_error_id(::google::protobuf::int64 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.ServiceException.error_id)
}

// optional string message = 3;
void ServiceException::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServiceException::message() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceException::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.ServiceException.message)
}
 void ServiceException::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.ServiceException.message)
}
 void ServiceException::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.ServiceException.message)
}
 ::std::string* ServiceException::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.ServiceException.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServiceException::release_message() {
  // @@protoc_insertion_point(field_release:BioService.ServiceException.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceException::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.ServiceException.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PopulationCreationResponse::kIdFieldNumber;
const int PopulationCreationResponse::kPortraitFieldNumber;
const int PopulationCreationResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PopulationCreationResponse::PopulationCreationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PopulationCreationResponse)
}

void PopulationCreationResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

PopulationCreationResponse::PopulationCreationResponse(const PopulationCreationResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PopulationCreationResponse)
}

void PopulationCreationResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  exception_ = NULL;
}

PopulationCreationResponse::~PopulationCreationResponse() {
  // @@protoc_insertion_point(destructor:BioService.PopulationCreationResponse)
  SharedDtor();
}

void PopulationCreationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
  }
}

void PopulationCreationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopulationCreationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopulationCreationResponse_descriptor_;
}

const PopulationCreationResponse& PopulationCreationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PopulationCreationResponse* PopulationCreationResponse::default_instance_ = NULL;

PopulationCreationResponse* PopulationCreationResponse::New(::google::protobuf::Arena* arena) const {
  PopulationCreationResponse* n = new PopulationCreationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PopulationCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PopulationCreationResponse)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  portrait_.Clear();
}

bool PopulationCreationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PopulationCreationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_portrait;
        break;
      }

      // repeated .BioService.PortraitCharacteristic portrait = 2;
      case 2: {
        if (tag == 18) {
         parse_portrait:
          DO_(input->IncrementRecursionDepth());
         parse_loop_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_portrait;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 3;
      case 3: {
        if (tag == 26) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PopulationCreationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PopulationCreationResponse)
  return false;
#undef DO_
}

void PopulationCreationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PopulationCreationResponse)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  for (unsigned int i = 0, n = this->portrait_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->portrait(i), output);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PopulationCreationResponse)
}

::google::protobuf::uint8* PopulationCreationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PopulationCreationResponse)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  for (unsigned int i = 0, n = this->portrait_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->portrait(i), target);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PopulationCreationResponse)
  return target;
}

int PopulationCreationResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PopulationCreationResponse)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  total_size += 1 * this->portrait_size();
  for (int i = 0; i < this->portrait_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portrait(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopulationCreationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PopulationCreationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PopulationCreationResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PopulationCreationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PopulationCreationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PopulationCreationResponse)
    MergeFrom(*source);
  }
}

void PopulationCreationResponse::MergeFrom(const PopulationCreationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PopulationCreationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  portrait_.MergeFrom(from.portrait_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void PopulationCreationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PopulationCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopulationCreationResponse::CopyFrom(const PopulationCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PopulationCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopulationCreationResponse::IsInitialized() const {

  return true;
}

void PopulationCreationResponse::Swap(PopulationCreationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PopulationCreationResponse::InternalSwap(PopulationCreationResponse* other) {
  std::swap(id_, other->id_);
  portrait_.UnsafeArenaSwap(&other->portrait_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PopulationCreationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopulationCreationResponse_descriptor_;
  metadata.reflection = PopulationCreationResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PopulationCreationResponse

// optional int64 id = 1;
void PopulationCreationResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PopulationCreationResponse::id() const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.id)
  return id_;
}
 void PopulationCreationResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.PopulationCreationResponse.id)
}

// repeated .BioService.PortraitCharacteristic portrait = 2;
int PopulationCreationResponse::portrait_size() const {
  return portrait_.size();
}
void PopulationCreationResponse::clear_portrait() {
  portrait_.Clear();
}
const ::BioService::PortraitCharacteristic& PopulationCreationResponse::portrait(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.portrait)
  return portrait_.Get(index);
}
::BioService::PortraitCharacteristic* PopulationCreationResponse::mutable_portrait(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PopulationCreationResponse.portrait)
  return portrait_.Mutable(index);
}
::BioService::PortraitCharacteristic* PopulationCreationResponse::add_portrait() {
  // @@protoc_insertion_point(field_add:BioService.PopulationCreationResponse.portrait)
  return portrait_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
PopulationCreationResponse::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PopulationCreationResponse.portrait)
  return &portrait_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
PopulationCreationResponse::portrait() const {
  // @@protoc_insertion_point(field_list:BioService.PopulationCreationResponse.portrait)
  return portrait_;
}

// optional .BioService.ServiceException exception = 3;
bool PopulationCreationResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void PopulationCreationResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& PopulationCreationResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* PopulationCreationResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PopulationCreationResponse.exception)
  return exception_;
}
::BioService::ServiceException* PopulationCreationResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.PopulationCreationResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void PopulationCreationResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PopulationCreationResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcquisitionResponse::kPortraitFieldNumber;
const int AcquisitionResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcquisitionResponse::AcquisitionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AcquisitionResponse)
}

void AcquisitionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  portrait_ = const_cast< ::BioService::PortraitCharacteristic*>(&::BioService::PortraitCharacteristic::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

AcquisitionResponse::AcquisitionResponse(const AcquisitionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AcquisitionResponse)
}

void AcquisitionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  portrait_ = NULL;
  exception_ = NULL;
}

AcquisitionResponse::~AcquisitionResponse() {
  // @@protoc_insertion_point(destructor:BioService.AcquisitionResponse)
  SharedDtor();
}

void AcquisitionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete portrait_;
    delete exception_;
  }
}

void AcquisitionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcquisitionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcquisitionResponse_descriptor_;
}

const AcquisitionResponse& AcquisitionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AcquisitionResponse* AcquisitionResponse::default_instance_ = NULL;

AcquisitionResponse* AcquisitionResponse::New(::google::protobuf::Arena* arena) const {
  AcquisitionResponse* n = new AcquisitionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcquisitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AcquisitionResponse)
  if (GetArenaNoVirtual() == NULL && portrait_ != NULL) delete portrait_;
  portrait_ = NULL;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool AcquisitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AcquisitionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.PortraitCharacteristic portrait = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 2;
      case 2: {
        if (tag == 18) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AcquisitionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AcquisitionResponse)
  return false;
#undef DO_
}

void AcquisitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AcquisitionResponse)
  // optional .BioService.PortraitCharacteristic portrait = 1;
  if (this->has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->portrait_, output);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AcquisitionResponse)
}

::google::protobuf::uint8* AcquisitionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AcquisitionResponse)
  // optional .BioService.PortraitCharacteristic portrait = 1;
  if (this->has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->portrait_, target);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AcquisitionResponse)
  return target;
}

int AcquisitionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AcquisitionResponse)
  int total_size = 0;

  // optional .BioService.PortraitCharacteristic portrait = 1;
  if (this->has_portrait()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->portrait_);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcquisitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AcquisitionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcquisitionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AcquisitionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AcquisitionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AcquisitionResponse)
    MergeFrom(*source);
  }
}

void AcquisitionResponse::MergeFrom(const AcquisitionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AcquisitionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_portrait()) {
    mutable_portrait()->::BioService::PortraitCharacteristic::MergeFrom(from.portrait());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void AcquisitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AcquisitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquisitionResponse::CopyFrom(const AcquisitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AcquisitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquisitionResponse::IsInitialized() const {

  return true;
}

void AcquisitionResponse::Swap(AcquisitionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcquisitionResponse::InternalSwap(AcquisitionResponse* other) {
  std::swap(portrait_, other->portrait_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcquisitionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcquisitionResponse_descriptor_;
  metadata.reflection = AcquisitionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcquisitionResponse

// optional .BioService.PortraitCharacteristic portrait = 1;
bool AcquisitionResponse::has_portrait() const {
  return !_is_default_instance_ && portrait_ != NULL;
}
void AcquisitionResponse::clear_portrait() {
  if (GetArenaNoVirtual() == NULL && portrait_ != NULL) delete portrait_;
  portrait_ = NULL;
}
const ::BioService::PortraitCharacteristic& AcquisitionResponse::portrait() const {
  // @@protoc_insertion_point(field_get:BioService.AcquisitionResponse.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
::BioService::PortraitCharacteristic* AcquisitionResponse::mutable_portrait() {
  
  if (portrait_ == NULL) {
    portrait_ = new ::BioService::PortraitCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquisitionResponse.portrait)
  return portrait_;
}
::BioService::PortraitCharacteristic* AcquisitionResponse::release_portrait() {
  // @@protoc_insertion_point(field_release:BioService.AcquisitionResponse.portrait)
  
  ::BioService::PortraitCharacteristic* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
void AcquisitionResponse::set_allocated_portrait(::BioService::PortraitCharacteristic* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquisitionResponse.portrait)
}

// optional .BioService.ServiceException exception = 2;
bool AcquisitionResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void AcquisitionResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& AcquisitionResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.AcquisitionResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* AcquisitionResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquisitionResponse.exception)
  return exception_;
}
::BioService::ServiceException* AcquisitionResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.AcquisitionResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void AcquisitionResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquisitionResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityIds::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityIds::EntityIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.EntityIds)
}

void EntityIds::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EntityIds::EntityIds(const EntityIds& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.EntityIds)
}

void EntityIds::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EntityIds::~EntityIds() {
  // @@protoc_insertion_point(destructor:BioService.EntityIds)
  SharedDtor();
}

void EntityIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityIds_descriptor_;
}

const EntityIds& EntityIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

EntityIds* EntityIds::default_instance_ = NULL;

EntityIds* EntityIds::New(::google::protobuf::Arena* arena) const {
  EntityIds* n = new EntityIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityIds::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.EntityIds)
  ids_.Clear();
}

bool EntityIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.EntityIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.EntityIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.EntityIds)
  return false;
#undef DO_
}

void EntityIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.EntityIds)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.EntityIds)
}

::google::protobuf::uint8* EntityIds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.EntityIds)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.EntityIds)
  return target;
}

int EntityIds::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.EntityIds)
  int total_size = 0;

  // repeated int64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.EntityIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EntityIds* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.EntityIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.EntityIds)
    MergeFrom(*source);
  }
}

void EntityIds::MergeFrom(const EntityIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.EntityIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
}

void EntityIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.EntityIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityIds::CopyFrom(const EntityIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.EntityIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityIds::IsInitialized() const {

  return true;
}

void EntityIds::Swap(EntityIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityIds::InternalSwap(EntityIds* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityIds_descriptor_;
  metadata.reflection = EntityIds_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityIds

// repeated int64 ids = 1;
int EntityIds::ids_size() const {
  return ids_.size();
}
void EntityIds::clear_ids() {
  ids_.Clear();
}
 ::google::protobuf::int64 EntityIds::ids(int index) const {
  // @@protoc_insertion_point(field_get:BioService.EntityIds.ids)
  return ids_.Get(index);
}
 void EntityIds::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.EntityIds.ids)
}
 void EntityIds::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.EntityIds.ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EntityIds::ids() const {
  // @@protoc_insertion_point(field_list:BioService.EntityIds.ids)
  return ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EntityIds::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:BioService.EntityIds.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kIdFieldNumber;
const int Person::kFirstNameFieldNumber;
const int Person::kLastNameFieldNumber;
const int Person::kThumbnailFieldNumber;
const int Person::kCardsFieldNumber;
const int Person::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  thumbnail_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  first_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_ = NULL;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:BioService.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  first_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete thumbnail_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Person)
  id_ = GOOGLE_LONGLONG(0);
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && thumbnail_ != NULL) delete thumbnail_;
  thumbnail_ = NULL;
  cards_.Clear();
  faces_.Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_first_name;
        break;
      }

      // optional string first_name = 2;
      case 2: {
        if (tag == 18) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.first_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_name;
        break;
      }

      // optional string last_name = 3;
      case 3: {
        if (tag == 26) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_name().data(), this->last_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.last_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_thumbnail;
        break;
      }

      // optional .BioService.Photo thumbnail = 4;
      case 4: {
        if (tag == 34) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cards;
        break;
      }

      // repeated .BioService.Card cards = 5;
      case 5: {
        if (tag == 42) {
         parse_cards:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_cards;
        if (input->ExpectTag(50)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.FaceCharacteristic faces = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Person)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string first_name = 2;
  if (this->first_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.first_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->first_name(), output);
  }

  // optional string last_name = 3;
  if (this->last_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.last_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_name(), output);
  }

  // optional .BioService.Photo thumbnail = 4;
  if (this->has_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->thumbnail_, output);
  }

  // repeated .BioService.Card cards = 5;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cards(i), output);
  }

  // repeated .BioService.FaceCharacteristic faces = 6;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Person)
}

::google::protobuf::uint8* Person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Person)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string first_name = 2;
  if (this->first_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.first_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->first_name(), target);
  }

  // optional string last_name = 3;
  if (this->last_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.last_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_name(), target);
  }

  // optional .BioService.Photo thumbnail = 4;
  if (this->has_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->thumbnail_, target);
  }

  // repeated .BioService.Card cards = 5;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cards(i), target);
  }

  // repeated .BioService.FaceCharacteristic faces = 6;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->faces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Person)
  return target;
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Person)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string first_name = 2;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_name());
  }

  // optional string last_name = 3;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_name());
  }

  // optional .BioService.Photo thumbnail = 4;
  if (this->has_thumbnail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumbnail_);
  }

  // repeated .BioService.Card cards = 5;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .BioService.FaceCharacteristic faces = 6;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Person* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
  faces_.MergeFrom(from.faces_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.has_thumbnail()) {
    mutable_thumbnail()->::BioService::Photo::MergeFrom(from.thumbnail());
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  std::swap(id_, other->id_);
  first_name_.Swap(&other->first_name_);
  last_name_.Swap(&other->last_name_);
  std::swap(thumbnail_, other->thumbnail_);
  cards_.UnsafeArenaSwap(&other->cards_);
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional int64 id = 1;
void Person::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Person::id() const {
  // @@protoc_insertion_point(field_get:BioService.Person.id)
  return id_;
}
 void Person::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.id)
}

// optional string first_name = 2;
void Person::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::first_name() const {
  // @@protoc_insertion_point(field_get:BioService.Person.first_name)
  return first_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_first_name(const ::std::string& value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.first_name)
}
 void Person::set_first_name(const char* value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.first_name)
}
 void Person::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.first_name)
}
 ::std::string* Person::mutable_first_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_first_name() {
  // @@protoc_insertion_point(field_release:BioService.Person.first_name)
  
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.first_name)
}

// optional string last_name = 3;
void Person::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::last_name() const {
  // @@protoc_insertion_point(field_get:BioService.Person.last_name)
  return last_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_last_name(const ::std::string& value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.last_name)
}
 void Person::set_last_name(const char* value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.last_name)
}
 void Person::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.last_name)
}
 ::std::string* Person::mutable_last_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_last_name() {
  // @@protoc_insertion_point(field_release:BioService.Person.last_name)
  
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.last_name)
}

// optional .BioService.Photo thumbnail = 4;
bool Person::has_thumbnail() const {
  return !_is_default_instance_ && thumbnail_ != NULL;
}
void Person::clear_thumbnail() {
  if (GetArenaNoVirtual() == NULL && thumbnail_ != NULL) delete thumbnail_;
  thumbnail_ = NULL;
}
const ::BioService::Photo& Person::thumbnail() const {
  // @@protoc_insertion_point(field_get:BioService.Person.thumbnail)
  return thumbnail_ != NULL ? *thumbnail_ : *default_instance_->thumbnail_;
}
::BioService::Photo* Person::mutable_thumbnail() {
  
  if (thumbnail_ == NULL) {
    thumbnail_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.thumbnail)
  return thumbnail_;
}
::BioService::Photo* Person::release_thumbnail() {
  // @@protoc_insertion_point(field_release:BioService.Person.thumbnail)
  
  ::BioService::Photo* temp = thumbnail_;
  thumbnail_ = NULL;
  return temp;
}
void Person::set_allocated_thumbnail(::BioService::Photo* thumbnail) {
  delete thumbnail_;
  thumbnail_ = thumbnail;
  if (thumbnail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.thumbnail)
}

// repeated .BioService.Card cards = 5;
int Person::cards_size() const {
  return cards_.size();
}
void Person::clear_cards() {
  cards_.Clear();
}
const ::BioService::Card& Person::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.cards)
  return cards_.Get(index);
}
::BioService::Card* Person::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.cards)
  return cards_.Mutable(index);
}
::BioService::Card* Person::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.Person.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Card >*
Person::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
Person::cards() const {
  // @@protoc_insertion_point(field_list:BioService.Person.cards)
  return cards_;
}

// repeated .BioService.FaceCharacteristic faces = 6;
int Person::faces_size() const {
  return faces_.size();
}
void Person::clear_faces() {
  faces_.Clear();
}
const ::BioService::FaceCharacteristic& Person::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.faces)
  return faces_.Get(index);
}
::BioService::FaceCharacteristic* Person::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.faces)
  return faces_.Mutable(index);
}
::BioService::FaceCharacteristic* Person::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.Person.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
Person::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
Person::faces() const {
  // @@protoc_insertion_point(field_list:BioService.Person.faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonResponse::kPersonFieldNumber;
const int PersonResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonResponse::PersonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PersonResponse)
}

void PersonResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  person_ = const_cast< ::BioService::Person*>(&::BioService::Person::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

PersonResponse::PersonResponse(const PersonResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PersonResponse)
}

void PersonResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  person_ = NULL;
  exception_ = NULL;
}

PersonResponse::~PersonResponse() {
  // @@protoc_insertion_point(destructor:BioService.PersonResponse)
  SharedDtor();
}

void PersonResponse::SharedDtor() {
  if (this != default_instance_) {
    delete person_;
    delete exception_;
  }
}

void PersonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonResponse_descriptor_;
}

const PersonResponse& PersonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PersonResponse* PersonResponse::default_instance_ = NULL;

PersonResponse* PersonResponse::New(::google::protobuf::Arena* arena) const {
  PersonResponse* n = new PersonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PersonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PersonResponse)
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool PersonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PersonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Person person = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 2;
      case 2: {
        if (tag == 18) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PersonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PersonResponse)
  return false;
#undef DO_
}

void PersonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PersonResponse)
  // optional .BioService.Person person = 1;
  if (this->has_person()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->person_, output);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PersonResponse)
}

::google::protobuf::uint8* PersonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PersonResponse)
  // optional .BioService.Person person = 1;
  if (this->has_person()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->person_, target);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PersonResponse)
  return target;
}

int PersonResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PersonResponse)
  int total_size = 0;

  // optional .BioService.Person person = 1;
  if (this->has_person()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->person_);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PersonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PersonResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PersonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PersonResponse)
    MergeFrom(*source);
  }
}

void PersonResponse::MergeFrom(const PersonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PersonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_person()) {
    mutable_person()->::BioService::Person::MergeFrom(from.person());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void PersonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PersonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonResponse::CopyFrom(const PersonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PersonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonResponse::IsInitialized() const {

  return true;
}

void PersonResponse::Swap(PersonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PersonResponse::InternalSwap(PersonResponse* other) {
  std::swap(person_, other->person_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PersonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonResponse_descriptor_;
  metadata.reflection = PersonResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PersonResponse

// optional .BioService.Person person = 1;
bool PersonResponse::has_person() const {
  return !_is_default_instance_ && person_ != NULL;
}
void PersonResponse::clear_person() {
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
}
const ::BioService::Person& PersonResponse::person() const {
  // @@protoc_insertion_point(field_get:BioService.PersonResponse.person)
  return person_ != NULL ? *person_ : *default_instance_->person_;
}
::BioService::Person* PersonResponse::mutable_person() {
  
  if (person_ == NULL) {
    person_ = new ::BioService::Person;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PersonResponse.person)
  return person_;
}
::BioService::Person* PersonResponse::release_person() {
  // @@protoc_insertion_point(field_release:BioService.PersonResponse.person)
  
  ::BioService::Person* temp = person_;
  person_ = NULL;
  return temp;
}
void PersonResponse::set_allocated_person(::BioService::Person* person) {
  delete person_;
  person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PersonResponse.person)
}

// optional .BioService.ServiceException exception = 2;
bool PersonResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void PersonResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& PersonResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.PersonResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* PersonResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PersonResponse.exception)
  return exception_;
}
::BioService::ServiceException* PersonResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.PersonResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void PersonResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PersonResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessDevice::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessDevice::AccessDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AccessDevice)
}

void AccessDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AccessDevice::AccessDevice(const AccessDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AccessDevice)
}

void AccessDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccessDevice::~AccessDevice() {
  // @@protoc_insertion_point(destructor:BioService.AccessDevice)
  SharedDtor();
}

void AccessDevice::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AccessDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessDevice_descriptor_;
}

const AccessDevice& AccessDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AccessDevice* AccessDevice::default_instance_ = NULL;

AccessDevice* AccessDevice::New(::google::protobuf::Arena* arena) const {
  AccessDevice* n = new AccessDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AccessDevice)
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AccessDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AccessDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.AccessDevice.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AccessDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AccessDevice)
  return false;
#undef DO_
}

void AccessDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AccessDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.AccessDevice.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AccessDevice)
}

::google::protobuf::uint8* AccessDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AccessDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.AccessDevice.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AccessDevice)
  return target;
}

int AccessDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AccessDevice)
  int total_size = 0;

  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AccessDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AccessDevice)
    MergeFrom(*source);
  }
}

void AccessDevice::MergeFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
}

void AccessDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessDevice::CopyFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessDevice::IsInitialized() const {

  return true;
}

void AccessDevice::Swap(AccessDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessDevice::InternalSwap(AccessDevice* other) {
  device_name_.Swap(&other->device_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessDevice_descriptor_;
  metadata.reflection = AccessDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessDevice

// optional string device_name = 1;
void AccessDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AccessDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.device_name)
}
 void AccessDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.AccessDevice.device_name)
}
 void AccessDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.AccessDevice.device_name)
}
 ::std::string* AccessDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.AccessDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccessDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.AccessDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.AccessDevice.device_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureDevice::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureDevice::CaptureDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.CaptureDevice)
}

void CaptureDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CaptureDevice::CaptureDevice(const CaptureDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.CaptureDevice)
}

void CaptureDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CaptureDevice::~CaptureDevice() {
  // @@protoc_insertion_point(destructor:BioService.CaptureDevice)
  SharedDtor();
}

void CaptureDevice::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CaptureDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureDevice_descriptor_;
}

const CaptureDevice& CaptureDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

CaptureDevice* CaptureDevice::default_instance_ = NULL;

CaptureDevice* CaptureDevice::New(::google::protobuf::Arena* arena) const {
  CaptureDevice* n = new CaptureDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptureDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.CaptureDevice)
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CaptureDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.CaptureDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.CaptureDevice.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.CaptureDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.CaptureDevice)
  return false;
#undef DO_
}

void CaptureDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.CaptureDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.CaptureDevice.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.CaptureDevice)
}

::google::protobuf::uint8* CaptureDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.CaptureDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.CaptureDevice.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.CaptureDevice)
  return target;
}

int CaptureDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.CaptureDevice)
  int total_size = 0;

  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.CaptureDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CaptureDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CaptureDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.CaptureDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.CaptureDevice)
    MergeFrom(*source);
  }
}

void CaptureDevice::MergeFrom(const CaptureDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.CaptureDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
}

void CaptureDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.CaptureDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureDevice::CopyFrom(const CaptureDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.CaptureDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureDevice::IsInitialized() const {

  return true;
}

void CaptureDevice::Swap(CaptureDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureDevice::InternalSwap(CaptureDevice* other) {
  device_name_.Swap(&other->device_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaptureDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureDevice_descriptor_;
  metadata.reflection = CaptureDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptureDevice

// optional string device_name = 1;
void CaptureDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CaptureDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CaptureDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.device_name)
}
 void CaptureDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.CaptureDevice.device_name)
}
 void CaptureDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.CaptureDevice.device_name)
}
 ::std::string* CaptureDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.CaptureDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CaptureDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.CaptureDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CaptureDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.CaptureDevice.device_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintDevice::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintDevice::FingerprintDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintDevice)
}

void FingerprintDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FingerprintDevice::FingerprintDevice(const FingerprintDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintDevice)
}

void FingerprintDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FingerprintDevice::~FingerprintDevice() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintDevice)
  SharedDtor();
}

void FingerprintDevice::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FingerprintDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintDevice_descriptor_;
}

const FingerprintDevice& FingerprintDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintDevice* FingerprintDevice::default_instance_ = NULL;

FingerprintDevice* FingerprintDevice::New(::google::protobuf::Arena* arena) const {
  FingerprintDevice* n = new FingerprintDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintDevice)
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FingerprintDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.FingerprintDevice.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintDevice)
  return false;
#undef DO_
}

void FingerprintDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FingerprintDevice.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintDevice)
}

::google::protobuf::uint8* FingerprintDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FingerprintDevice.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintDevice)
  return target;
}

int FingerprintDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintDevice)
  int total_size = 0;

  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintDevice)
    MergeFrom(*source);
  }
}

void FingerprintDevice::MergeFrom(const FingerprintDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
}

void FingerprintDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintDevice::CopyFrom(const FingerprintDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintDevice::IsInitialized() const {

  return true;
}

void FingerprintDevice::Swap(FingerprintDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintDevice::InternalSwap(FingerprintDevice* other) {
  device_name_.Swap(&other->device_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintDevice_descriptor_;
  metadata.reflection = FingerprintDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintDevice

// optional string device_name = 1;
void FingerprintDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FingerprintDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.device_name)
}
 void FingerprintDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintDevice.device_name)
}
 void FingerprintDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintDevice.device_name)
}
 ::std::string* FingerprintDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FingerprintDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.device_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrisDevice::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrisDevice::IrisDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.IrisDevice)
}

void IrisDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IrisDevice::IrisDevice(const IrisDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.IrisDevice)
}

void IrisDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IrisDevice::~IrisDevice() {
  // @@protoc_insertion_point(destructor:BioService.IrisDevice)
  SharedDtor();
}

void IrisDevice::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IrisDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrisDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IrisDevice_descriptor_;
}

const IrisDevice& IrisDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

IrisDevice* IrisDevice::default_instance_ = NULL;

IrisDevice* IrisDevice::New(::google::protobuf::Arena* arena) const {
  IrisDevice* n = new IrisDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrisDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.IrisDevice)
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IrisDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.IrisDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.IrisDevice.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.IrisDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.IrisDevice)
  return false;
#undef DO_
}

void IrisDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.IrisDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.IrisDevice.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.IrisDevice)
}

::google::protobuf::uint8* IrisDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.IrisDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.IrisDevice.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.IrisDevice)
  return target;
}

int IrisDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.IrisDevice)
  int total_size = 0;

  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrisDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.IrisDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IrisDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IrisDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.IrisDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.IrisDevice)
    MergeFrom(*source);
  }
}

void IrisDevice::MergeFrom(const IrisDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.IrisDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
}

void IrisDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.IrisDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrisDevice::CopyFrom(const IrisDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.IrisDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrisDevice::IsInitialized() const {

  return true;
}

void IrisDevice::Swap(IrisDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrisDevice::InternalSwap(IrisDevice* other) {
  device_name_.Swap(&other->device_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrisDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IrisDevice_descriptor_;
  metadata.reflection = IrisDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrisDevice

// optional string device_name = 1;
void IrisDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IrisDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IrisDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.device_name)
}
 void IrisDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.IrisDevice.device_name)
}
 void IrisDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.IrisDevice.device_name)
}
 ::std::string* IrisDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IrisDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.IrisDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IrisDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.device_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kIdFieldNumber;
const int Card::kUniqueIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  unique_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:BioService.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  unique_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Card)
  id_ = GOOGLE_LONGLONG(0);
  unique_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unique_identifier;
        break;
      }

      // optional string unique_identifier = 2;
      case 2: {
        if (tag == 18) {
         parse_unique_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_identifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_identifier().data(), this->unique_identifier().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Card.unique_identifier"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Card)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string unique_identifier = 2;
  if (this->unique_identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_identifier().data(), this->unique_identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Card.unique_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unique_identifier(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Card)
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Card)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string unique_identifier = 2;
  if (this->unique_identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_identifier().data(), this->unique_identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Card.unique_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unique_identifier(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Card)
  return target;
}

int Card::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Card)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string unique_identifier = 2;
  if (this->unique_identifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_identifier());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.unique_identifier().size() > 0) {

    unique_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_identifier_);
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(id_, other->id_);
  unique_identifier_.Swap(&other->unique_identifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional int64 id = 1;
void Card::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Card::id() const {
  // @@protoc_insertion_point(field_get:BioService.Card.id)
  return id_;
}
 void Card::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.id)
}

// optional string unique_identifier = 2;
void Card::clear_unique_identifier() {
  unique_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Card::unique_identifier() const {
  // @@protoc_insertion_point(field_get:BioService.Card.unique_identifier)
  return unique_identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Card::set_unique_identifier(const ::std::string& value) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Card.unique_identifier)
}
 void Card::set_unique_identifier(const char* value) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Card.unique_identifier)
}
 void Card::set_unique_identifier(const char* value, size_t size) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Card.unique_identifier)
}
 ::std::string* Card::mutable_unique_identifier() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Card.unique_identifier)
  return unique_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Card::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:BioService.Card.unique_identifier)
  
  return unique_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Card::set_allocated_unique_identifier(::std::string* unique_identifier) {
  if (unique_identifier != NULL) {
    
  } else {
    
  }
  unique_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_identifier);
  // @@protoc_insertion_point(field_set_allocated:BioService.Card.unique_identifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kIdFieldNumber;
const int Location::kLocationNameFieldNumber;
const int Location::kDescriptionFieldNumber;
const int Location::kMacAddressFieldNumber;
const int Location::kCaptureDeviceFieldNumber;
const int Location::kAccessDeviceFieldNumber;
const int Location::kFingerprintDeviceFieldNumber;
const int Location::kIrisDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Location)
}

void Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  capture_device_ = const_cast< ::BioService::CaptureDevice*>(&::BioService::CaptureDevice::default_instance());
  access_device_ = const_cast< ::BioService::AccessDevice*>(&::BioService::AccessDevice::default_instance());
  fingerprint_device_ = const_cast< ::BioService::FingerprintDevice*>(&::BioService::FingerprintDevice::default_instance());
  iris_device_ = const_cast< ::BioService::IrisDevice*>(&::BioService::IrisDevice::default_instance());
}

Location::Location(const Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Location)
}

void Location::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  location_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capture_device_ = NULL;
  access_device_ = NULL;
  fingerprint_device_ = NULL;
  iris_device_ = NULL;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:BioService.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  location_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete capture_device_;
    delete access_device_;
    delete fingerprint_device_;
    delete iris_device_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Location)
  id_ = GOOGLE_LONGLONG(0);
  location_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capture_device_ != NULL) delete capture_device_;
  capture_device_ = NULL;
  if (GetArenaNoVirtual() == NULL && access_device_ != NULL) delete access_device_;
  access_device_ = NULL;
  if (GetArenaNoVirtual() == NULL && fingerprint_device_ != NULL) delete fingerprint_device_;
  fingerprint_device_ = NULL;
  if (GetArenaNoVirtual() == NULL && iris_device_ != NULL) delete iris_device_;
  iris_device_ = NULL;
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location_name;
        break;
      }

      // optional string location_name = 2;
      case 2: {
        if (tag == 18) {
         parse_location_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_name().data(), this->location_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Location.location_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Location.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mac_address;
        break;
      }

      // optional string mac_address = 4;
      case 4: {
        if (tag == 34) {
         parse_mac_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), this->mac_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Location.mac_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_capture_device;
        break;
      }

      // optional .BioService.CaptureDevice capture_device = 5;
      case 5: {
        if (tag == 42) {
         parse_capture_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capture_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_access_device;
        break;
      }

      // optional .BioService.AccessDevice access_device = 6;
      case 6: {
        if (tag == 50) {
         parse_access_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fingerprint_device;
        break;
      }

      // optional .BioService.FingerprintDevice fingerprint_device = 7;
      case 7: {
        if (tag == 58) {
         parse_fingerprint_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprint_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_iris_device;
        break;
      }

      // optional .BioService.IrisDevice iris_device = 8;
      case 8: {
        if (tag == 66) {
         parse_iris_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iris_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Location)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string location_name = 2;
  if (this->location_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_name().data(), this->location_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.location_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location_name(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string mac_address = 4;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mac_address(), output);
  }

  // optional .BioService.CaptureDevice capture_device = 5;
  if (this->has_capture_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->capture_device_, output);
  }

  // optional .BioService.AccessDevice access_device = 6;
  if (this->has_access_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->access_device_, output);
  }

  // optional .BioService.FingerprintDevice fingerprint_device = 7;
  if (this->has_fingerprint_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->fingerprint_device_, output);
  }

  // optional .BioService.IrisDevice iris_device = 8;
  if (this->has_iris_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->iris_device_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Location)
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Location)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string location_name = 2;
  if (this->location_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_name().data(), this->location_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.location_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location_name(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string mac_address = 4;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.mac_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mac_address(), target);
  }

  // optional .BioService.CaptureDevice capture_device = 5;
  if (this->has_capture_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->capture_device_, target);
  }

  // optional .BioService.AccessDevice access_device = 6;
  if (this->has_access_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->access_device_, target);
  }

  // optional .BioService.FingerprintDevice fingerprint_device = 7;
  if (this->has_fingerprint_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->fingerprint_device_, target);
  }

  // optional .BioService.IrisDevice iris_device = 8;
  if (this->has_iris_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->iris_device_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Location)
  return target;
}

int Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Location)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string location_name = 2;
  if (this->location_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_name());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string mac_address = 4;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  // optional .BioService.CaptureDevice capture_device = 5;
  if (this->has_capture_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capture_device_);
  }

  // optional .BioService.AccessDevice access_device = 6;
  if (this->has_access_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->access_device_);
  }

  // optional .BioService.FingerprintDevice fingerprint_device = 7;
  if (this->has_fingerprint_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fingerprint_device_);
  }

  // optional .BioService.IrisDevice iris_device = 8;
  if (this->has_iris_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->iris_device_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.location_name().size() > 0) {

    location_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.has_capture_device()) {
    mutable_capture_device()->::BioService::CaptureDevice::MergeFrom(from.capture_device());
  }
  if (from.has_access_device()) {
    mutable_access_device()->::BioService::AccessDevice::MergeFrom(from.access_device());
  }
  if (from.has_fingerprint_device()) {
    mutable_fingerprint_device()->::BioService::FingerprintDevice::MergeFrom(from.fingerprint_device());
  }
  if (from.has_iris_device()) {
    mutable_iris_device()->::BioService::IrisDevice::MergeFrom(from.iris_device());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(id_, other->id_);
  location_name_.Swap(&other->location_name_);
  description_.Swap(&other->description_);
  mac_address_.Swap(&other->mac_address_);
  std::swap(capture_device_, other->capture_device_);
  std::swap(access_device_, other->access_device_);
  std::swap(fingerprint_device_, other->fingerprint_device_);
  std::swap(iris_device_, other->iris_device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional int64 id = 1;
void Location::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Location::id() const {
  // @@protoc_insertion_point(field_get:BioService.Location.id)
  return id_;
}
 void Location::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.id)
}

// optional string location_name = 2;
void Location::clear_location_name() {
  location_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Location::location_name() const {
  // @@protoc_insertion_point(field_get:BioService.Location.location_name)
  return location_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_location_name(const ::std::string& value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.location_name)
}
 void Location::set_location_name(const char* value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.location_name)
}
 void Location::set_location_name(const char* value, size_t size) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.location_name)
}
 ::std::string* Location::mutable_location_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.location_name)
  return location_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_location_name() {
  // @@protoc_insertion_point(field_release:BioService.Location.location_name)
  
  return location_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_allocated_location_name(::std::string* location_name) {
  if (location_name != NULL) {
    
  } else {
    
  }
  location_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.location_name)
}

// optional string description = 3;
void Location::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Location::description() const {
  // @@protoc_insertion_point(field_get:BioService.Location.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.description)
}
 void Location::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.description)
}
 void Location::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.description)
}
 ::std::string* Location::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_description() {
  // @@protoc_insertion_point(field_release:BioService.Location.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.description)
}

// optional string mac_address = 4;
void Location::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Location::mac_address() const {
  // @@protoc_insertion_point(field_get:BioService.Location.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.mac_address)
}
 void Location::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.mac_address)
}
 void Location::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.mac_address)
}
 ::std::string* Location::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_mac_address() {
  // @@protoc_insertion_point(field_release:BioService.Location.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.mac_address)
}

// optional .BioService.CaptureDevice capture_device = 5;
bool Location::has_capture_device() const {
  return !_is_default_instance_ && capture_device_ != NULL;
}
void Location::clear_capture_device() {
  if (GetArenaNoVirtual() == NULL && capture_device_ != NULL) delete capture_device_;
  capture_device_ = NULL;
}
const ::BioService::CaptureDevice& Location::capture_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.capture_device)
  return capture_device_ != NULL ? *capture_device_ : *default_instance_->capture_device_;
}
::BioService::CaptureDevice* Location::mutable_capture_device() {
  
  if (capture_device_ == NULL) {
    capture_device_ = new ::BioService::CaptureDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.capture_device)
  return capture_device_;
}
::BioService::CaptureDevice* Location::release_capture_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.capture_device)
  
  ::BioService::CaptureDevice* temp = capture_device_;
  capture_device_ = NULL;
  return temp;
}
void Location::set_allocated_capture_device(::BioService::CaptureDevice* capture_device) {
  delete capture_device_;
  capture_device_ = capture_device;
  if (capture_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.capture_device)
}

// optional .BioService.AccessDevice access_device = 6;
bool Location::has_access_device() const {
  return !_is_default_instance_ && access_device_ != NULL;
}
void Location::clear_access_device() {
  if (GetArenaNoVirtual() == NULL && access_device_ != NULL) delete access_device_;
  access_device_ = NULL;
}
const ::BioService::AccessDevice& Location::access_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.access_device)
  return access_device_ != NULL ? *access_device_ : *default_instance_->access_device_;
}
::BioService::AccessDevice* Location::mutable_access_device() {
  
  if (access_device_ == NULL) {
    access_device_ = new ::BioService::AccessDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.access_device)
  return access_device_;
}
::BioService::AccessDevice* Location::release_access_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.access_device)
  
  ::BioService::AccessDevice* temp = access_device_;
  access_device_ = NULL;
  return temp;
}
void Location::set_allocated_access_device(::BioService::AccessDevice* access_device) {
  delete access_device_;
  access_device_ = access_device;
  if (access_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.access_device)
}

// optional .BioService.FingerprintDevice fingerprint_device = 7;
bool Location::has_fingerprint_device() const {
  return !_is_default_instance_ && fingerprint_device_ != NULL;
}
void Location::clear_fingerprint_device() {
  if (GetArenaNoVirtual() == NULL && fingerprint_device_ != NULL) delete fingerprint_device_;
  fingerprint_device_ = NULL;
}
const ::BioService::FingerprintDevice& Location::fingerprint_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.fingerprint_device)
  return fingerprint_device_ != NULL ? *fingerprint_device_ : *default_instance_->fingerprint_device_;
}
::BioService::FingerprintDevice* Location::mutable_fingerprint_device() {
  
  if (fingerprint_device_ == NULL) {
    fingerprint_device_ = new ::BioService::FingerprintDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.fingerprint_device)
  return fingerprint_device_;
}
::BioService::FingerprintDevice* Location::release_fingerprint_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.fingerprint_device)
  
  ::BioService::FingerprintDevice* temp = fingerprint_device_;
  fingerprint_device_ = NULL;
  return temp;
}
void Location::set_allocated_fingerprint_device(::BioService::FingerprintDevice* fingerprint_device) {
  delete fingerprint_device_;
  fingerprint_device_ = fingerprint_device;
  if (fingerprint_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.fingerprint_device)
}

// optional .BioService.IrisDevice iris_device = 8;
bool Location::has_iris_device() const {
  return !_is_default_instance_ && iris_device_ != NULL;
}
void Location::clear_iris_device() {
  if (GetArenaNoVirtual() == NULL && iris_device_ != NULL) delete iris_device_;
  iris_device_ = NULL;
}
const ::BioService::IrisDevice& Location::iris_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.iris_device)
  return iris_device_ != NULL ? *iris_device_ : *default_instance_->iris_device_;
}
::BioService::IrisDevice* Location::mutable_iris_device() {
  
  if (iris_device_ == NULL) {
    iris_device_ = new ::BioService::IrisDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.iris_device)
  return iris_device_;
}
::BioService::IrisDevice* Location::release_iris_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.iris_device)
  
  ::BioService::IrisDevice* temp = iris_device_;
  iris_device_ = NULL;
  return temp;
}
void Location::set_allocated_iris_device(::BioService::IrisDevice* iris_device) {
  delete iris_device_;
  iris_device_ = iris_device;
  if (iris_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.iris_device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortraitCharacteristic::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortraitCharacteristic::PortraitCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PortraitCharacteristic)
}

void PortraitCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PortraitCharacteristic::PortraitCharacteristic(const PortraitCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PortraitCharacteristic)
}

void PortraitCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PortraitCharacteristic::~PortraitCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.PortraitCharacteristic)
  SharedDtor();
}

void PortraitCharacteristic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortraitCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortraitCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortraitCharacteristic_descriptor_;
}

const PortraitCharacteristic& PortraitCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PortraitCharacteristic* PortraitCharacteristic::default_instance_ = NULL;

PortraitCharacteristic* PortraitCharacteristic::New(::google::protobuf::Arena* arena) const {
  PortraitCharacteristic* n = new PortraitCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PortraitCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PortraitCharacteristic)
  faces_.Clear();
}

bool PortraitCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PortraitCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.FaceCharacteristic Faces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PortraitCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PortraitCharacteristic)
  return false;
#undef DO_
}

void PortraitCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PortraitCharacteristic)
  // repeated .BioService.FaceCharacteristic Faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PortraitCharacteristic)
}

::google::protobuf::uint8* PortraitCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PortraitCharacteristic)
  // repeated .BioService.FaceCharacteristic Faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PortraitCharacteristic)
  return target;
}

int PortraitCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PortraitCharacteristic)
  int total_size = 0;

  // repeated .BioService.FaceCharacteristic Faces = 1;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortraitCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PortraitCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PortraitCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PortraitCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PortraitCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PortraitCharacteristic)
    MergeFrom(*source);
  }
}

void PortraitCharacteristic::MergeFrom(const PortraitCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PortraitCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
}

void PortraitCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PortraitCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortraitCharacteristic::CopyFrom(const PortraitCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PortraitCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortraitCharacteristic::IsInitialized() const {

  return true;
}

void PortraitCharacteristic::Swap(PortraitCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortraitCharacteristic::InternalSwap(PortraitCharacteristic* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PortraitCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortraitCharacteristic_descriptor_;
  metadata.reflection = PortraitCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PortraitCharacteristic

// repeated .BioService.FaceCharacteristic Faces = 1;
int PortraitCharacteristic::faces_size() const {
  return faces_.size();
}
void PortraitCharacteristic::clear_faces() {
  faces_.Clear();
}
const ::BioService::FaceCharacteristic& PortraitCharacteristic::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PortraitCharacteristic.Faces)
  return faces_.Get(index);
}
::BioService::FaceCharacteristic* PortraitCharacteristic::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PortraitCharacteristic.Faces)
  return faces_.Mutable(index);
}
::BioService::FaceCharacteristic* PortraitCharacteristic::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.PortraitCharacteristic.Faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
PortraitCharacteristic::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PortraitCharacteristic.Faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
PortraitCharacteristic::faces() const {
  // @@protoc_insertion_point(field_list:BioService.PortraitCharacteristic.Faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceCharacteristic::kIdFieldNumber;
const int FaceCharacteristic::kBoxFieldNumber;
const int FaceCharacteristic::kConfidenceFieldNumber;
const int FaceCharacteristic::kPersonIdFieldNumber;
const int FaceCharacteristic::kPhotoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceCharacteristic::FaceCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FaceCharacteristic)
}

void FaceCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  box_ = const_cast< ::BioService::Box*>(&::BioService::Box::default_instance());
}

FaceCharacteristic::FaceCharacteristic(const FaceCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FaceCharacteristic)
}

void FaceCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  box_ = NULL;
  confidence_ = 0;
  person_id_ = GOOGLE_LONGLONG(0);
  photo_id_ = GOOGLE_LONGLONG(0);
}

FaceCharacteristic::~FaceCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.FaceCharacteristic)
  SharedDtor();
}

void FaceCharacteristic::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void FaceCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceCharacteristic_descriptor_;
}

const FaceCharacteristic& FaceCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FaceCharacteristic* FaceCharacteristic::default_instance_ = NULL;

FaceCharacteristic* FaceCharacteristic::New(::google::protobuf::Arena* arena) const {
  FaceCharacteristic* n = new FaceCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FaceCharacteristic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FaceCharacteristic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaceCharacteristic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(person_id_, confidence_);
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool FaceCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FaceCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // optional .BioService.Box box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_person_id;
        break;
      }

      // optional int64 person_id = 4;
      case 4: {
        if (tag == 32) {
         parse_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_photo_id;
        break;
      }

      // optional int64 photo_id = 5;
      case 5: {
        if (tag == 40) {
         parse_photo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FaceCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FaceCharacteristic)
  return false;
#undef DO_
}

void FaceCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FaceCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .BioService.Box box = 2;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->box_, output);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->person_id(), output);
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->photo_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FaceCharacteristic)
}

::google::protobuf::uint8* FaceCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FaceCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .BioService.Box box = 2;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->box_, target);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->person_id(), target);
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->photo_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FaceCharacteristic)
  return target;
}

int FaceCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FaceCharacteristic)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.Box box = 2;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->person_id());
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photo_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FaceCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FaceCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FaceCharacteristic)
    MergeFrom(*source);
  }
}

void FaceCharacteristic::MergeFrom(const FaceCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FaceCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_box()) {
    mutable_box()->::BioService::Box::MergeFrom(from.box());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.person_id() != 0) {
    set_person_id(from.person_id());
  }
  if (from.photo_id() != 0) {
    set_photo_id(from.photo_id());
  }
}

void FaceCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FaceCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceCharacteristic::CopyFrom(const FaceCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FaceCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceCharacteristic::IsInitialized() const {

  return true;
}

void FaceCharacteristic::Swap(FaceCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceCharacteristic::InternalSwap(FaceCharacteristic* other) {
  std::swap(id_, other->id_);
  std::swap(box_, other->box_);
  std::swap(confidence_, other->confidence_);
  std::swap(person_id_, other->person_id_);
  std::swap(photo_id_, other->photo_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceCharacteristic_descriptor_;
  metadata.reflection = FaceCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceCharacteristic

// optional int64 id = 1;
void FaceCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.id)
  return id_;
}
 void FaceCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.id)
}

// optional .BioService.Box box = 2;
bool FaceCharacteristic::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void FaceCharacteristic::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::BioService::Box& FaceCharacteristic::box() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::BioService::Box* FaceCharacteristic::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::BioService::Box;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.box)
  return box_;
}
::BioService::Box* FaceCharacteristic::release_box() {
  // @@protoc_insertion_point(field_release:BioService.FaceCharacteristic.box)
  
  ::BioService::Box* temp = box_;
  box_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_box(::BioService::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.box)
}

// optional float confidence = 3;
void FaceCharacteristic::clear_confidence() {
  confidence_ = 0;
}
 float FaceCharacteristic::confidence() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.confidence)
  return confidence_;
}
 void FaceCharacteristic::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.confidence)
}

// optional int64 person_id = 4;
void FaceCharacteristic::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.person_id)
  return person_id_;
}
 void FaceCharacteristic::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.person_id)
}

// optional int64 photo_id = 5;
void FaceCharacteristic::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.photo_id)
  return photo_id_;
}
 void FaceCharacteristic::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.photo_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:BioService.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Position)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Position)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Position)
  return target;
}

int Position::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Position)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional int32 x = 1;
void Position::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:BioService.Position.x)
  return x_;
}
 void Position::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:BioService.Position.x)
}

// optional int32 y = 2;
void Position::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:BioService.Position.y)
  return y_;
}
 void Position::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:BioService.Position.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Box::kBeginFieldNumber;
const int Box::kWidthFieldNumber;
const int Box::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Box::Box()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Box)
}

void Box::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  begin_ = const_cast< ::BioService::Position*>(&::BioService::Position::default_instance());
}

Box::Box(const Box& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Box)
}

void Box::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  begin_ = NULL;
  width_ = 0;
  height_ = 0;
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:BioService.Box)
  SharedDtor();
}

void Box::SharedDtor() {
  if (this != default_instance_) {
    delete begin_;
  }
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Box* Box::default_instance_ = NULL;

Box* Box::New(::google::protobuf::Arena* arena) const {
  Box* n = new Box;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Box)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Box, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Box*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  if (GetArenaNoVirtual() == NULL && begin_ != NULL) delete begin_;
  begin_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Position begin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Box)
  return false;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Box)
  // optional .BioService.Position begin = 1;
  if (this->has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->begin_, output);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Box)
}

::google::protobuf::uint8* Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Box)
  // optional .BioService.Position begin = 1;
  if (this->has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->begin_, target);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Box)
  return target;
}

int Box::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Box)
  int total_size = 0;

  // optional .BioService.Position begin = 1;
  if (this->has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->begin_);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Box)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Box* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Box>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Box)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Box)
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Box)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_begin()) {
    mutable_begin()->::BioService::Position::MergeFrom(from.begin());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {

  return true;
}

void Box::Swap(Box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Box::InternalSwap(Box* other) {
  std::swap(begin_, other->begin_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Box

// optional .BioService.Position begin = 1;
bool Box::has_begin() const {
  return !_is_default_instance_ && begin_ != NULL;
}
void Box::clear_begin() {
  if (GetArenaNoVirtual() == NULL && begin_ != NULL) delete begin_;
  begin_ = NULL;
}
const ::BioService::Position& Box::begin() const {
  // @@protoc_insertion_point(field_get:BioService.Box.begin)
  return begin_ != NULL ? *begin_ : *default_instance_->begin_;
}
::BioService::Position* Box::mutable_begin() {
  
  if (begin_ == NULL) {
    begin_ = new ::BioService::Position;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Box.begin)
  return begin_;
}
::BioService::Position* Box::release_begin() {
  // @@protoc_insertion_point(field_release:BioService.Box.begin)
  
  ::BioService::Position* temp = begin_;
  begin_ = NULL;
  return temp;
}
void Box::set_allocated_begin(::BioService::Position* begin) {
  delete begin_;
  begin_ = begin;
  if (begin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Box.begin)
}

// optional int32 width = 2;
void Box::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Box::width() const {
  // @@protoc_insertion_point(field_get:BioService.Box.width)
  return width_;
}
 void Box::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.Box.width)
}

// optional int32 height = 3;
void Box::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Box::height() const {
  // @@protoc_insertion_point(field_get:BioService.Box.height)
  return height_;
}
 void Box::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BioService.Box.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintCharacteristic::kIdFieldNumber;
const int FingerprintCharacteristic::kPositionFieldNumber;
const int FingerprintCharacteristic::kMinutiaesCountFieldNumber;
const int FingerprintCharacteristic::kPersonIdFieldNumber;
const int FingerprintCharacteristic::kPhotoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintCharacteristic::FingerprintCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintCharacteristic)
}

void FingerprintCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FingerprintCharacteristic::FingerprintCharacteristic(const FingerprintCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintCharacteristic)
}

void FingerprintCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  minutiaes_count_ = 0;
  person_id_ = GOOGLE_LONGLONG(0);
  photo_id_ = GOOGLE_LONGLONG(0);
}

FingerprintCharacteristic::~FingerprintCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintCharacteristic)
  SharedDtor();
}

void FingerprintCharacteristic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FingerprintCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintCharacteristic_descriptor_;
}

const FingerprintCharacteristic& FingerprintCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintCharacteristic* FingerprintCharacteristic::default_instance_ = NULL;

FingerprintCharacteristic* FingerprintCharacteristic::New(::google::protobuf::Arena* arena) const {
  FingerprintCharacteristic* n = new FingerprintCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintCharacteristic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FingerprintCharacteristic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FingerprintCharacteristic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, photo_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool FingerprintCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional .BioService.Finger position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::BioService::Finger >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_minutiaes_count;
        break;
      }

      // optional sfixed32 minutiaes_count = 3;
      case 3: {
        if (tag == 29) {
         parse_minutiaes_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &minutiaes_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_person_id;
        break;
      }

      // optional int64 person_id = 4;
      case 4: {
        if (tag == 32) {
         parse_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_photo_id;
        break;
      }

      // optional int64 photo_id = 5;
      case 5: {
        if (tag == 40) {
         parse_photo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintCharacteristic)
  return false;
#undef DO_
}

void FingerprintCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // optional sfixed32 minutiaes_count = 3;
  if (this->minutiaes_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->minutiaes_count(), output);
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->person_id(), output);
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->photo_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintCharacteristic)
}

::google::protobuf::uint8* FingerprintCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  // optional sfixed32 minutiaes_count = 3;
  if (this->minutiaes_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->minutiaes_count(), target);
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->person_id(), target);
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->photo_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintCharacteristic)
  return target;
}

int FingerprintCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintCharacteristic)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  // optional sfixed32 minutiaes_count = 3;
  if (this->minutiaes_count() != 0) {
    total_size += 1 + 4;
  }

  // optional int64 person_id = 4;
  if (this->person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->person_id());
  }

  // optional int64 photo_id = 5;
  if (this->photo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photo_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintCharacteristic)
    MergeFrom(*source);
  }
}

void FingerprintCharacteristic::MergeFrom(const FingerprintCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.minutiaes_count() != 0) {
    set_minutiaes_count(from.minutiaes_count());
  }
  if (from.person_id() != 0) {
    set_person_id(from.person_id());
  }
  if (from.photo_id() != 0) {
    set_photo_id(from.photo_id());
  }
}

void FingerprintCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintCharacteristic::CopyFrom(const FingerprintCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintCharacteristic::IsInitialized() const {

  return true;
}

void FingerprintCharacteristic::Swap(FingerprintCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintCharacteristic::InternalSwap(FingerprintCharacteristic* other) {
  std::swap(id_, other->id_);
  std::swap(position_, other->position_);
  std::swap(minutiaes_count_, other->minutiaes_count_);
  std::swap(person_id_, other->person_id_);
  std::swap(photo_id_, other->photo_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintCharacteristic_descriptor_;
  metadata.reflection = FingerprintCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintCharacteristic

// optional int64 id = 1;
void FingerprintCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.id)
  return id_;
}
 void FingerprintCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.id)
}

// optional .BioService.Finger position = 2;
void FingerprintCharacteristic::clear_position() {
  position_ = 0;
}
 ::BioService::Finger FingerprintCharacteristic::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.position)
  return static_cast< ::BioService::Finger >(position_);
}
 void FingerprintCharacteristic::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.position)
}

// optional sfixed32 minutiaes_count = 3;
void FingerprintCharacteristic::clear_minutiaes_count() {
  minutiaes_count_ = 0;
}
 ::google::protobuf::int32 FingerprintCharacteristic::minutiaes_count() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.minutiaes_count)
  return minutiaes_count_;
}
 void FingerprintCharacteristic::set_minutiaes_count(::google::protobuf::int32 value) {
  
  minutiaes_count_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.minutiaes_count)
}

// optional int64 person_id = 4;
void FingerprintCharacteristic::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintCharacteristic::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.person_id)
  return person_id_;
}
 void FingerprintCharacteristic::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.person_id)
}

// optional int64 photo_id = 5;
void FingerprintCharacteristic::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintCharacteristic::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.photo_id)
  return photo_id_;
}
 void FingerprintCharacteristic::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.photo_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Photo::kIdFieldNumber;
const int Photo::kPhotoUrlFieldNumber;
const int Photo::kBytestringFieldNumber;
const int Photo::kWidthFieldNumber;
const int Photo::kHeightFieldNumber;
const int Photo::kBiotypeFieldNumber;
const int Photo::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Photo::Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Photo)
}

void Photo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Photo::Photo(const Photo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Photo)
}

void Photo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  photo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  biotype_ = 0;
  owner_id_ = GOOGLE_LONGLONG(0);
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:BioService.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  photo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Photo_descriptor_;
}

const Photo& Photo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Photo* Photo::default_instance_ = NULL;

Photo* Photo::New(::google::protobuf::Arena* arena) const {
  Photo* n = new Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Photo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Photo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Photo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, biotype_);
  id_ = GOOGLE_LONGLONG(0);
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo_url;
        break;
      }

      // optional string photo_url = 2;
      case 2: {
        if (tag == 18) {
         parse_photo_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_url().data(), this->photo_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Photo.photo_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bytestring;
        break;
      }

      // optional bytes bytestring = 3;
      case 3: {
        if (tag == 26) {
         parse_bytestring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_biotype;
        break;
      }

      // optional .BioService.BiometricDataType biotype = 6;
      case 6: {
        if (tag == 48) {
         parse_biotype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_biotype(static_cast< ::BioService::BiometricDataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_owner_id;
        break;
      }

      // optional int64 owner_id = 7;
      case 7: {
        if (tag == 56) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Photo)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string photo_url = 2;
  if (this->photo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_url().data(), this->photo_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Photo.photo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->photo_url(), output);
  }

  // optional bytes bytestring = 3;
  if (this->bytestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bytestring(), output);
  }

  // optional int32 width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional .BioService.BiometricDataType biotype = 6;
  if (this->biotype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->biotype(), output);
  }

  // optional int64 owner_id = 7;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->owner_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Photo)
}

::google::protobuf::uint8* Photo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Photo)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string photo_url = 2;
  if (this->photo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_url().data(), this->photo_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Photo.photo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->photo_url(), target);
  }

  // optional bytes bytestring = 3;
  if (this->bytestring().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bytestring(), target);
  }

  // optional int32 width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional .BioService.BiometricDataType biotype = 6;
  if (this->biotype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->biotype(), target);
  }

  // optional int64 owner_id = 7;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->owner_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Photo)
  return target;
}

int Photo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Photo)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string photo_url = 2;
  if (this->photo_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photo_url());
  }

  // optional bytes bytestring = 3;
  if (this->bytestring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytestring());
  }

  // optional int32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional .BioService.BiometricDataType biotype = 6;
  if (this->biotype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->biotype());
  }

  // optional int64 owner_id = 7;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Photo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Photo)
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.photo_url().size() > 0) {

    photo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_url_);
  }
  if (from.bytestring().size() > 0) {

    bytestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytestring_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.biotype() != 0) {
    set_biotype(from.biotype());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {

  return true;
}

void Photo::Swap(Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photo::InternalSwap(Photo* other) {
  std::swap(id_, other->id_);
  photo_url_.Swap(&other->photo_url_);
  bytestring_.Swap(&other->bytestring_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(biotype_, other->biotype_);
  std::swap(owner_id_, other->owner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Photo_descriptor_;
  metadata.reflection = Photo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Photo

// optional int64 id = 1;
void Photo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.id)
  return id_;
}
 void Photo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.id)
}

// optional string photo_url = 2;
void Photo::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Photo::photo_url() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.photo_url)
  return photo_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.photo_url)
}
 void Photo::set_photo_url(const char* value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.photo_url)
}
 void Photo::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.photo_url)
}
 ::std::string* Photo::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Photo::release_photo_url() {
  // @@protoc_insertion_point(field_release:BioService.Photo.photo_url)
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.photo_url)
}

// optional bytes bytestring = 3;
void Photo::clear_bytestring() {
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Photo::bytestring() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.bytestring)
  return bytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_bytestring(const ::std::string& value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.bytestring)
}
 void Photo::set_bytestring(const char* value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.bytestring)
}
 void Photo::set_bytestring(const void* value, size_t size) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.bytestring)
}
 ::std::string* Photo::mutable_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.bytestring)
  return bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Photo::release_bytestring() {
  // @@protoc_insertion_point(field_release:BioService.Photo.bytestring)
  
  return bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_allocated_bytestring(::std::string* bytestring) {
  if (bytestring != NULL) {
    
  } else {
    
  }
  bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytestring);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.bytestring)
}

// optional int32 width = 4;
void Photo::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Photo::width() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.width)
  return width_;
}
 void Photo::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.width)
}

// optional int32 height = 5;
void Photo::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Photo::height() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.height)
  return height_;
}
 void Photo::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.height)
}

// optional .BioService.BiometricDataType biotype = 6;
void Photo::clear_biotype() {
  biotype_ = 0;
}
 ::BioService::BiometricDataType Photo::biotype() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.biotype)
  return static_cast< ::BioService::BiometricDataType >(biotype_);
}
 void Photo::set_biotype(::BioService::BiometricDataType value) {
  
  biotype_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.biotype)
}

// optional int64 owner_id = 7;
void Photo::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.owner_id)
  return owner_id_;
}
 void Photo::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.owner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visitor::kIdFieldNumber;
const int Visitor::kPersonIdFieldNumber;
const int Visitor::kLocationIdFieldNumber;
const int Visitor::kTimeFieldNumber;
const int Visitor::kCardNumberFieldNumber;
const int Visitor::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visitor::Visitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Visitor)
}

void Visitor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Visitor::Visitor(const Visitor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Visitor)
}

void Visitor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  person_id_ = GOOGLE_LONGLONG(0);
  location_id_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

Visitor::~Visitor() {
  // @@protoc_insertion_point(destructor:BioService.Visitor)
  SharedDtor();
}

void Visitor::SharedDtor() {
  card_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Visitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visitor_descriptor_;
}

const Visitor& Visitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Visitor* Visitor::default_instance_ = NULL;

Visitor* Visitor::New(::google::protobuf::Arena* arena) const {
  Visitor* n = new Visitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Visitor::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Visitor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Visitor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Visitor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, time_);
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Visitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Visitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_person_id;
        break;
      }

      // optional int64 person_id = 2;
      case 2: {
        if (tag == 16) {
         parse_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_location_id;
        break;
      }

      // optional int64 location_id = 3;
      case 3: {
        if (tag == 24) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_card_number;
        break;
      }

      // optional string card_number = 5;
      case 5: {
        if (tag == 42) {
         parse_card_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->card_number().data(), this->card_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Visitor.card_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .BioService.AccessState status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::BioService::AccessState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Visitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Visitor)
  return false;
#undef DO_
}

void Visitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Visitor)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 person_id = 2;
  if (this->person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->person_id(), output);
  }

  // optional int64 location_id = 3;
  if (this->location_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->location_id(), output);
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional string card_number = 5;
  if (this->card_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_number().data(), this->card_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Visitor.card_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->card_number(), output);
  }

  // optional .BioService.AccessState status = 6;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Visitor)
}

::google::protobuf::uint8* Visitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Visitor)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 person_id = 2;
  if (this->person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->person_id(), target);
  }

  // optional int64 location_id = 3;
  if (this->location_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->location_id(), target);
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional string card_number = 5;
  if (this->card_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_number().data(), this->card_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Visitor.card_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_number(), target);
  }

  // optional .BioService.AccessState status = 6;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Visitor)
  return target;
}

int Visitor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Visitor)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 person_id = 2;
  if (this->person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->person_id());
  }

  // optional int64 location_id = 3;
  if (this->location_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->location_id());
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional string card_number = 5;
  if (this->card_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());
  }

  // optional .BioService.AccessState status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Visitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Visitor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Visitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Visitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Visitor)
    MergeFrom(*source);
  }
}

void Visitor::MergeFrom(const Visitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Visitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.person_id() != 0) {
    set_person_id(from.person_id());
  }
  if (from.location_id() != 0) {
    set_location_id(from.location_id());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.card_number().size() > 0) {

    card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Visitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Visitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visitor::CopyFrom(const Visitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Visitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visitor::IsInitialized() const {

  return true;
}

void Visitor::Swap(Visitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visitor::InternalSwap(Visitor* other) {
  std::swap(id_, other->id_);
  std::swap(person_id_, other->person_id_);
  std::swap(location_id_, other->location_id_);
  std::swap(time_, other->time_);
  card_number_.Swap(&other->card_number_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Visitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visitor_descriptor_;
  metadata.reflection = Visitor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Visitor

// optional int64 id = 1;
void Visitor::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.id)
  return id_;
}
 void Visitor::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.id)
}

// optional int64 person_id = 2;
void Visitor::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.person_id)
  return person_id_;
}
 void Visitor::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.person_id)
}

// optional int64 location_id = 3;
void Visitor::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::location_id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.location_id)
  return location_id_;
}
 void Visitor::set_location_id(::google::protobuf::int64 value) {
  
  location_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.location_id)
}

// optional int64 time = 4;
void Visitor::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::time() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.time)
  return time_;
}
 void Visitor::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.time)
}

// optional string card_number = 5;
void Visitor::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Visitor::card_number() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.card_number)
  return card_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visitor::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Visitor.card_number)
}
 void Visitor::set_card_number(const char* value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Visitor.card_number)
}
 void Visitor::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Visitor.card_number)
}
 ::std::string* Visitor::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Visitor::release_card_number() {
  // @@protoc_insertion_point(field_release:BioService.Visitor.card_number)
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visitor::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.card_number)
}

// optional .BioService.AccessState status = 6;
void Visitor::clear_status() {
  status_ = 0;
}
 ::BioService::AccessState Visitor::status() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.status)
  return static_cast< ::BioService::AccessState >(status_);
}
 void Visitor::set_status(::BioService::AccessState value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisitorList::kVisitorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisitorList::VisitorList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.VisitorList)
}

void VisitorList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VisitorList::VisitorList(const VisitorList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.VisitorList)
}

void VisitorList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VisitorList::~VisitorList() {
  // @@protoc_insertion_point(destructor:BioService.VisitorList)
  SharedDtor();
}

void VisitorList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitorList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitorList_descriptor_;
}

const VisitorList& VisitorList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

VisitorList* VisitorList::default_instance_ = NULL;

VisitorList* VisitorList::New(::google::protobuf::Arena* arena) const {
  VisitorList* n = new VisitorList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisitorList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.VisitorList)
  visitors_.Clear();
}

bool VisitorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.VisitorList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Visitor visitors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_visitors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_visitors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_visitors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.VisitorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.VisitorList)
  return false;
#undef DO_
}

void VisitorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.VisitorList)
  // repeated .BioService.Visitor visitors = 1;
  for (unsigned int i = 0, n = this->visitors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visitors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.VisitorList)
}

::google::protobuf::uint8* VisitorList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.VisitorList)
  // repeated .BioService.Visitor visitors = 1;
  for (unsigned int i = 0, n = this->visitors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->visitors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.VisitorList)
  return target;
}

int VisitorList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.VisitorList)
  int total_size = 0;

  // repeated .BioService.Visitor visitors = 1;
  total_size += 1 * this->visitors_size();
  for (int i = 0; i < this->visitors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visitors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitorList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.VisitorList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VisitorList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisitorList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.VisitorList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.VisitorList)
    MergeFrom(*source);
  }
}

void VisitorList::MergeFrom(const VisitorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.VisitorList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  visitors_.MergeFrom(from.visitors_);
}

void VisitorList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.VisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitorList::CopyFrom(const VisitorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.VisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitorList::IsInitialized() const {

  return true;
}

void VisitorList::Swap(VisitorList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisitorList::InternalSwap(VisitorList* other) {
  visitors_.UnsafeArenaSwap(&other->visitors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisitorList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitorList_descriptor_;
  metadata.reflection = VisitorList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisitorList

// repeated .BioService.Visitor visitors = 1;
int VisitorList::visitors_size() const {
  return visitors_.size();
}
void VisitorList::clear_visitors() {
  visitors_.Clear();
}
const ::BioService::Visitor& VisitorList::visitors(int index) const {
  // @@protoc_insertion_point(field_get:BioService.VisitorList.visitors)
  return visitors_.Get(index);
}
::BioService::Visitor* VisitorList::mutable_visitors(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.VisitorList.visitors)
  return visitors_.Mutable(index);
}
::BioService::Visitor* VisitorList::add_visitors() {
  // @@protoc_insertion_point(field_add:BioService.VisitorList.visitors)
  return visitors_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Visitor >*
VisitorList::mutable_visitors() {
  // @@protoc_insertion_point(field_mutable_list:BioService.VisitorList.visitors)
  return &visitors_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >&
VisitorList::visitors() const {
  // @@protoc_insertion_point(field_list:BioService.VisitorList.visitors)
  return visitors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationList::kLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationList::LocationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.LocationList)
}

void LocationList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LocationList::LocationList(const LocationList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.LocationList)
}

void LocationList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

LocationList::~LocationList() {
  // @@protoc_insertion_point(destructor:BioService.LocationList)
  SharedDtor();
}

void LocationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationList_descriptor_;
}

const LocationList& LocationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

LocationList* LocationList::default_instance_ = NULL;

LocationList* LocationList::New(::google::protobuf::Arena* arena) const {
  LocationList* n = new LocationList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocationList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.LocationList)
  locations_.Clear();
}

bool LocationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.LocationList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Location locations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_locations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.LocationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.LocationList)
  return false;
#undef DO_
}

void LocationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.LocationList)
  // repeated .BioService.Location locations = 1;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->locations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.LocationList)
}

::google::protobuf::uint8* LocationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.LocationList)
  // repeated .BioService.Location locations = 1;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->locations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.LocationList)
  return target;
}

int LocationList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.LocationList)
  int total_size = 0;

  // repeated .BioService.Location locations = 1;
  total_size += 1 * this->locations_size();
  for (int i = 0; i < this->locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.LocationList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LocationList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.LocationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.LocationList)
    MergeFrom(*source);
  }
}

void LocationList::MergeFrom(const LocationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.LocationList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  locations_.MergeFrom(from.locations_);
}

void LocationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.LocationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationList::CopyFrom(const LocationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.LocationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationList::IsInitialized() const {

  return true;
}

void LocationList::Swap(LocationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationList::InternalSwap(LocationList* other) {
  locations_.UnsafeArenaSwap(&other->locations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationList_descriptor_;
  metadata.reflection = LocationList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationList

// repeated .BioService.Location locations = 1;
int LocationList::locations_size() const {
  return locations_.size();
}
void LocationList::clear_locations() {
  locations_.Clear();
}
const ::BioService::Location& LocationList::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.LocationList.locations)
  return locations_.Get(index);
}
::BioService::Location* LocationList::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.LocationList.locations)
  return locations_.Mutable(index);
}
::BioService::Location* LocationList::add_locations() {
  // @@protoc_insertion_point(field_add:BioService.LocationList.locations)
  return locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Location >*
LocationList::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.LocationList.locations)
  return &locations_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Location >&
LocationList::locations() const {
  // @@protoc_insertion_point(field_list:BioService.LocationList.locations)
  return locations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonList::kPersonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonList::PersonList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PersonList)
}

void PersonList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PersonList::PersonList(const PersonList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PersonList)
}

void PersonList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PersonList::~PersonList() {
  // @@protoc_insertion_point(destructor:BioService.PersonList)
  SharedDtor();
}

void PersonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonList_descriptor_;
}

const PersonList& PersonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PersonList* PersonList::default_instance_ = NULL;

PersonList* PersonList::New(::google::protobuf::Arena* arena) const {
  PersonList* n = new PersonList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PersonList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PersonList)
  persons_.Clear();
}

bool PersonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PersonList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Person persons = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_persons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_persons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_persons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PersonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PersonList)
  return false;
#undef DO_
}

void PersonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PersonList)
  // repeated .BioService.Person persons = 1;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->persons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PersonList)
}

::google::protobuf::uint8* PersonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PersonList)
  // repeated .BioService.Person persons = 1;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->persons(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PersonList)
  return target;
}

int PersonList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PersonList)
  int total_size = 0;

  // repeated .BioService.Person persons = 1;
  total_size += 1 * this->persons_size();
  for (int i = 0; i < this->persons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PersonList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PersonList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PersonList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PersonList)
    MergeFrom(*source);
  }
}

void PersonList::MergeFrom(const PersonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PersonList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  persons_.MergeFrom(from.persons_);
}

void PersonList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PersonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonList::CopyFrom(const PersonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PersonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonList::IsInitialized() const {

  return true;
}

void PersonList::Swap(PersonList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PersonList::InternalSwap(PersonList* other) {
  persons_.UnsafeArenaSwap(&other->persons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PersonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonList_descriptor_;
  metadata.reflection = PersonList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PersonList

// repeated .BioService.Person persons = 1;
int PersonList::persons_size() const {
  return persons_.size();
}
void PersonList::clear_persons() {
  persons_.Clear();
}
const ::BioService::Person& PersonList::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PersonList.persons)
  return persons_.Get(index);
}
::BioService::Person* PersonList::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PersonList.persons)
  return persons_.Mutable(index);
}
::BioService::Person* PersonList::add_persons() {
  // @@protoc_insertion_point(field_add:BioService.PersonList.persons)
  return persons_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Person >*
PersonList::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PersonList.persons)
  return &persons_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
PersonList::persons() const {
  // @@protoc_insertion_point(field_list:BioService.PersonList.persons)
  return persons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoList::kPhotosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoList::PhotoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PhotoList)
}

void PhotoList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PhotoList::PhotoList(const PhotoList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PhotoList)
}

void PhotoList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PhotoList::~PhotoList() {
  // @@protoc_insertion_point(destructor:BioService.PhotoList)
  SharedDtor();
}

void PhotoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoList_descriptor_;
}

const PhotoList& PhotoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PhotoList* PhotoList::default_instance_ = NULL;

PhotoList* PhotoList::New(::google::protobuf::Arena* arena) const {
  PhotoList* n = new PhotoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PhotoList)
  photos_.Clear();
}

bool PhotoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PhotoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Photo photos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PhotoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PhotoList)
  return false;
#undef DO_
}

void PhotoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PhotoList)
  // repeated .BioService.Photo photos = 1;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->photos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PhotoList)
}

::google::protobuf::uint8* PhotoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PhotoList)
  // repeated .BioService.Photo photos = 1;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->photos(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PhotoList)
  return target;
}

int PhotoList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PhotoList)
  int total_size = 0;

  // repeated .BioService.Photo photos = 1;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PhotoList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PhotoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PhotoList)
    MergeFrom(*source);
  }
}

void PhotoList::MergeFrom(const PhotoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PhotoList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  photos_.MergeFrom(from.photos_);
}

void PhotoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PhotoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoList::CopyFrom(const PhotoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PhotoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoList::IsInitialized() const {

  return true;
}

void PhotoList::Swap(PhotoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoList::InternalSwap(PhotoList* other) {
  photos_.UnsafeArenaSwap(&other->photos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoList_descriptor_;
  metadata.reflection = PhotoList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoList

// repeated .BioService.Photo photos = 1;
int PhotoList::photos_size() const {
  return photos_.size();
}
void PhotoList::clear_photos() {
  photos_.Clear();
}
const ::BioService::Photo& PhotoList::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PhotoList.photos)
  return photos_.Get(index);
}
::BioService::Photo* PhotoList::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PhotoList.photos)
  return photos_.Mutable(index);
}
::BioService::Photo* PhotoList::add_photos() {
  // @@protoc_insertion_point(field_add:BioService.PhotoList.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
PhotoList::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PhotoList.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
PhotoList::photos() const {
  // @@protoc_insertion_point(field_list:BioService.PhotoList.photos)
  return photos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardList::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardList::CardList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.CardList)
}

void CardList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CardList::CardList(const CardList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.CardList)
}

void CardList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CardList::~CardList() {
  // @@protoc_insertion_point(destructor:BioService.CardList)
  SharedDtor();
}

void CardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardList_descriptor_;
}

const CardList& CardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

CardList* CardList::default_instance_ = NULL;

CardList* CardList::New(::google::protobuf::Arena* arena) const {
  CardList* n = new CardList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.CardList)
  cards_.Clear();
}

bool CardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.CardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Card cards = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.CardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.CardList)
  return false;
#undef DO_
}

void CardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.CardList)
  // repeated .BioService.Card cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.CardList)
}

::google::protobuf::uint8* CardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.CardList)
  // repeated .BioService.Card cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.CardList)
  return target;
}

int CardList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.CardList)
  int total_size = 0;

  // repeated .BioService.Card cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.CardList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CardList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CardList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.CardList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.CardList)
    MergeFrom(*source);
  }
}

void CardList::MergeFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.CardList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
}

void CardList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardList::CopyFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardList::IsInitialized() const {

  return true;
}

void CardList::Swap(CardList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardList::InternalSwap(CardList* other) {
  cards_.UnsafeArenaSwap(&other->cards_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardList_descriptor_;
  metadata.reflection = CardList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardList

// repeated .BioService.Card cards = 1;
int CardList::cards_size() const {
  return cards_.size();
}
void CardList::clear_cards() {
  cards_.Clear();
}
const ::BioService::Card& CardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.CardList.cards)
  return cards_.Get(index);
}
::BioService::Card* CardList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.CardList.cards)
  return cards_.Mutable(index);
}
::BioService::Card* CardList::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.CardList.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Card >*
CardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.CardList.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
CardList::cards() const {
  // @@protoc_insertion_point(field_list:BioService.CardList.cards)
  return cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kGoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  good_ = false;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:BioService.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Response)
  good_ = false;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool good = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Response)
  // optional bool good = 1;
  if (this->good() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->good(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Response)
  // optional bool good = 1;
  if (this->good() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->good(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Response)
  int total_size = 0;

  // optional bool good = 1;
  if (this->good() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.good() != 0) {
    set_good(from.good());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(good_, other->good_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional bool good = 1;
void Response::clear_good() {
  good_ = false;
}
 bool Response::good() const {
  // @@protoc_insertion_point(field_get:BioService.Response.good)
  return good_;
}
 void Response::set_good(bool value) {
  
  good_ = value;
  // @@protoc_insertion_point(field_set:BioService.Response.good)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationData::kTargetImageFieldNumber;
const int VerificationData::kComparisonImageFieldNumber;
const int VerificationData::kComparisonPersonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationData::VerificationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.VerificationData)
}

void VerificationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
  comparison_image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

VerificationData::VerificationData(const VerificationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.VerificationData)
}

void VerificationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  target_image_ = NULL;
  comparison_image_ = NULL;
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}

VerificationData::~VerificationData() {
  // @@protoc_insertion_point(destructor:BioService.VerificationData)
  SharedDtor();
}

void VerificationData::SharedDtor() {
  if (this != default_instance_) {
    delete target_image_;
    delete comparison_image_;
  }
}

void VerificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerificationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerificationData_descriptor_;
}

const VerificationData& VerificationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

VerificationData* VerificationData::default_instance_ = NULL;

VerificationData* VerificationData::New(::google::protobuf::Arena* arena) const {
  VerificationData* n = new VerificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.VerificationData)
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}

bool VerificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.VerificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Photo target_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_comparison_image;
        break;
      }

      // optional .BioService.Photo comparison_image = 2;
      case 2: {
        if (tag == 18) {
         parse_comparison_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparison_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comparison_person_id;
        break;
      }

      // optional int64 comparison_person_id = 3;
      case 3: {
        if (tag == 24) {
         parse_comparison_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comparison_person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.VerificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.VerificationData)
  return false;
#undef DO_
}

void VerificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.VerificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_image_, output);
  }

  // optional .BioService.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->comparison_image_, output);
  }

  // optional int64 comparison_person_id = 3;
  if (this->comparison_person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->comparison_person_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.VerificationData)
}

::google::protobuf::uint8* VerificationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.VerificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->target_image_, target);
  }

  // optional .BioService.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->comparison_image_, target);
  }

  // optional int64 comparison_person_id = 3;
  if (this->comparison_person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->comparison_person_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.VerificationData)
  return target;
}

int VerificationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.VerificationData)
  int total_size = 0;

  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_image_);
  }

  // optional .BioService.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comparison_image_);
  }

  // optional int64 comparison_person_id = 3;
  if (this->comparison_person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->comparison_person_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerificationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.VerificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerificationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerificationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.VerificationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.VerificationData)
    MergeFrom(*source);
  }
}

void VerificationData::MergeFrom(const VerificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.VerificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_target_image()) {
    mutable_target_image()->::BioService::Photo::MergeFrom(from.target_image());
  }
  if (from.has_comparison_image()) {
    mutable_comparison_image()->::BioService::Photo::MergeFrom(from.comparison_image());
  }
  if (from.comparison_person_id() != 0) {
    set_comparison_person_id(from.comparison_person_id());
  }
}

void VerificationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.VerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationData::CopyFrom(const VerificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.VerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationData::IsInitialized() const {

  return true;
}

void VerificationData::Swap(VerificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationData::InternalSwap(VerificationData* other) {
  std::swap(target_image_, other->target_image_);
  std::swap(comparison_image_, other->comparison_image_);
  std::swap(comparison_person_id_, other->comparison_person_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerificationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerificationData_descriptor_;
  metadata.reflection = VerificationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerificationData

// optional .BioService.Photo target_image = 1;
bool VerificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
void VerificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
const ::BioService::Photo& VerificationData::target_image() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
::BioService::Photo* VerificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationData.target_image)
  return target_image_;
}
::BioService::Photo* VerificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:BioService.VerificationData.target_image)
  
  ::BioService::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
void VerificationData::set_allocated_target_image(::BioService::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationData.target_image)
}

// optional .BioService.Photo comparison_image = 2;
bool VerificationData::has_comparison_image() const {
  return !_is_default_instance_ && comparison_image_ != NULL;
}
void VerificationData::clear_comparison_image() {
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
}
const ::BioService::Photo& VerificationData::comparison_image() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.comparison_image)
  return comparison_image_ != NULL ? *comparison_image_ : *default_instance_->comparison_image_;
}
::BioService::Photo* VerificationData::mutable_comparison_image() {
  
  if (comparison_image_ == NULL) {
    comparison_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationData.comparison_image)
  return comparison_image_;
}
::BioService::Photo* VerificationData::release_comparison_image() {
  // @@protoc_insertion_point(field_release:BioService.VerificationData.comparison_image)
  
  ::BioService::Photo* temp = comparison_image_;
  comparison_image_ = NULL;
  return temp;
}
void VerificationData::set_allocated_comparison_image(::BioService::Photo* comparison_image) {
  delete comparison_image_;
  comparison_image_ = comparison_image;
  if (comparison_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationData.comparison_image)
}

// optional int64 comparison_person_id = 3;
void VerificationData::clear_comparison_person_id() {
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VerificationData::comparison_person_id() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.comparison_person_id)
  return comparison_person_id_;
}
 void VerificationData::set_comparison_person_id(::google::protobuf::int64 value) {
  
  comparison_person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.VerificationData.comparison_person_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentificationData::kTargetImageFieldNumber;
const int IdentificationData::kPopulationIdFieldNumber;
const int IdentificationData::kComparisonImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentificationData::IdentificationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.IdentificationData)
}

void IdentificationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

IdentificationData::IdentificationData(const IdentificationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.IdentificationData)
}

void IdentificationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  target_image_ = NULL;
  population_id_ = GOOGLE_LONGLONG(0);
}

IdentificationData::~IdentificationData() {
  // @@protoc_insertion_point(destructor:BioService.IdentificationData)
  SharedDtor();
}

void IdentificationData::SharedDtor() {
  if (this != default_instance_) {
    delete target_image_;
  }
}

void IdentificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentificationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdentificationData_descriptor_;
}

const IdentificationData& IdentificationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

IdentificationData* IdentificationData::default_instance_ = NULL;

IdentificationData* IdentificationData::New(::google::protobuf::Arena* arena) const {
  IdentificationData* n = new IdentificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdentificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.IdentificationData)
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
  population_id_ = GOOGLE_LONGLONG(0);
  comparison_images_.Clear();
}

bool IdentificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.IdentificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Photo target_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_population_id;
        break;
      }

      // optional int64 population_id = 2;
      case 2: {
        if (tag == 16) {
         parse_population_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &population_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_comparison_images;
        break;
      }

      // repeated .BioService.Photo comparison_images = 3;
      case 3: {
        if (tag == 26) {
         parse_comparison_images:
          DO_(input->IncrementRecursionDepth());
         parse_loop_comparison_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comparison_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_comparison_images;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.IdentificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.IdentificationData)
  return false;
#undef DO_
}

void IdentificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.IdentificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_image_, output);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->population_id(), output);
  }

  // repeated .BioService.Photo comparison_images = 3;
  for (unsigned int i = 0, n = this->comparison_images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comparison_images(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.IdentificationData)
}

::google::protobuf::uint8* IdentificationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.IdentificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->target_image_, target);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->population_id(), target);
  }

  // repeated .BioService.Photo comparison_images = 3;
  for (unsigned int i = 0, n = this->comparison_images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comparison_images(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.IdentificationData)
  return target;
}

int IdentificationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.IdentificationData)
  int total_size = 0;

  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_image_);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->population_id());
  }

  // repeated .BioService.Photo comparison_images = 3;
  total_size += 1 * this->comparison_images_size();
  for (int i = 0; i < this->comparison_images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comparison_images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentificationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.IdentificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IdentificationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentificationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.IdentificationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.IdentificationData)
    MergeFrom(*source);
  }
}

void IdentificationData::MergeFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.IdentificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  comparison_images_.MergeFrom(from.comparison_images_);
  if (from.has_target_image()) {
    mutable_target_image()->::BioService::Photo::MergeFrom(from.target_image());
  }
  if (from.population_id() != 0) {
    set_population_id(from.population_id());
  }
}

void IdentificationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentificationData::CopyFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentificationData::IsInitialized() const {

  return true;
}

void IdentificationData::Swap(IdentificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentificationData::InternalSwap(IdentificationData* other) {
  std::swap(target_image_, other->target_image_);
  std::swap(population_id_, other->population_id_);
  comparison_images_.UnsafeArenaSwap(&other->comparison_images_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdentificationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdentificationData_descriptor_;
  metadata.reflection = IdentificationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdentificationData

// optional .BioService.Photo target_image = 1;
bool IdentificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
void IdentificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
const ::BioService::Photo& IdentificationData::target_image() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
::BioService::Photo* IdentificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.target_image)
  return target_image_;
}
::BioService::Photo* IdentificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:BioService.IdentificationData.target_image)
  
  ::BioService::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
void IdentificationData::set_allocated_target_image(::BioService::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.IdentificationData.target_image)
}

// optional int64 population_id = 2;
void IdentificationData::clear_population_id() {
  population_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 IdentificationData::population_id() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.population_id)
  return population_id_;
}
 void IdentificationData::set_population_id(::google::protobuf::int64 value) {
  
  population_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.IdentificationData.population_id)
}

// repeated .BioService.Photo comparison_images = 3;
int IdentificationData::comparison_images_size() const {
  return comparison_images_.size();
}
void IdentificationData::clear_comparison_images() {
  comparison_images_.Clear();
}
const ::BioService::Photo& IdentificationData::comparison_images(int index) const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.comparison_images)
  return comparison_images_.Get(index);
}
::BioService::Photo* IdentificationData::mutable_comparison_images(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.comparison_images)
  return comparison_images_.Mutable(index);
}
::BioService::Photo* IdentificationData::add_comparison_images() {
  // @@protoc_insertion_point(field_add:BioService.IdentificationData.comparison_images)
  return comparison_images_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
IdentificationData::mutable_comparison_images() {
  // @@protoc_insertion_point(field_mutable_list:BioService.IdentificationData.comparison_images)
  return &comparison_images_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
IdentificationData::comparison_images() const {
  // @@protoc_insertion_point(field_list:BioService.IdentificationData.comparison_images)
  return comparison_images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kFaceIdFieldNumber;
const int Match::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Match)
}

void Match::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Match::Match(const Match& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Match)
}

void Match::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_id_ = GOOGLE_LONGLONG(0);
  match_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:BioService.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_descriptor_;
}

const Match& Match::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Match* Match::default_instance_ = NULL;

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Match)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Match, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Match*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(face_id_, match_);

#undef ZR_HELPER_
#undef ZR_

}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 face_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &face_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_match;
        break;
      }

      // optional float match = 3;
      case 3: {
        if (tag == 29) {
         parse_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Match)
  // optional int64 face_id = 2;
  if (this->face_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->face_id(), output);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->match(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Match)
}

::google::protobuf::uint8* Match::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Match)
  // optional int64 face_id = 2;
  if (this->face_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->face_id(), target);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->match(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Match)
  return target;
}

int Match::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Match)
  int total_size = 0;

  // optional int64 face_id = 2;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->face_id());
  }

  // optional float match = 3;
  if (this->match() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Match* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.face_id() != 0) {
    set_face_id(from.face_id());
  }
  if (from.match() != 0) {
    set_match(from.match());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {

  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  std::swap(face_id_, other->face_id_);
  std::swap(match_, other->match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_descriptor_;
  metadata.reflection = Match_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// optional int64 face_id = 2;
void Match::clear_face_id() {
  face_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Match::face_id() const {
  // @@protoc_insertion_point(field_get:BioService.Match.face_id)
  return face_id_;
}
 void Match::set_face_id(::google::protobuf::int64 value) {
  
  face_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Match.face_id)
}

// optional float match = 3;
void Match::clear_match() {
  match_ = 0;
}
 float Match::match() const {
  // @@protoc_insertion_point(field_get:BioService.Match.match)
  return match_;
}
 void Match::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.Match.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matches::kFaceIdFieldNumber;
const int Matches::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matches::Matches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Matches)
}

void Matches::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Matches::Matches(const Matches& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Matches)
}

void Matches::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_id_ = GOOGLE_LONGLONG(0);
}

Matches::~Matches() {
  // @@protoc_insertion_point(destructor:BioService.Matches)
  SharedDtor();
}

void Matches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matches_descriptor_;
}

const Matches& Matches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Matches* Matches::default_instance_ = NULL;

Matches* Matches::New(::google::protobuf::Arena* arena) const {
  Matches* n = new Matches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matches::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Matches)
  face_id_ = GOOGLE_LONGLONG(0);
  matches_.Clear();
}

bool Matches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Matches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 face_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &face_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matches;
        break;
      }

      // repeated .BioService.Match matches = 2;
      case 2: {
        if (tag == 18) {
         parse_matches:
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Matches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Matches)
  return false;
#undef DO_
}

void Matches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Matches)
  // optional int64 face_id = 1;
  if (this->face_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->face_id(), output);
  }

  // repeated .BioService.Match matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Matches)
}

::google::protobuf::uint8* Matches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Matches)
  // optional int64 face_id = 1;
  if (this->face_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->face_id(), target);
  }

  // repeated .BioService.Match matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Matches)
  return target;
}

int Matches::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Matches)
  int total_size = 0;

  // optional int64 face_id = 1;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->face_id());
  }

  // repeated .BioService.Match matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Matches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Matches* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Matches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Matches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Matches)
    MergeFrom(*source);
  }
}

void Matches::MergeFrom(const Matches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Matches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  matches_.MergeFrom(from.matches_);
  if (from.face_id() != 0) {
    set_face_id(from.face_id());
  }
}

void Matches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matches::CopyFrom(const Matches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matches::IsInitialized() const {

  return true;
}

void Matches::Swap(Matches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matches::InternalSwap(Matches* other) {
  std::swap(face_id_, other->face_id_);
  matches_.UnsafeArenaSwap(&other->matches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matches_descriptor_;
  metadata.reflection = Matches_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matches

// optional int64 face_id = 1;
void Matches::clear_face_id() {
  face_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Matches::face_id() const {
  // @@protoc_insertion_point(field_get:BioService.Matches.face_id)
  return face_id_;
}
 void Matches::set_face_id(::google::protobuf::int64 value) {
  
  face_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Matches.face_id)
}

// repeated .BioService.Match matches = 2;
int Matches::matches_size() const {
  return matches_.size();
}
void Matches::clear_matches() {
  matches_.Clear();
}
const ::BioService::Match& Matches::matches(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Matches.matches)
  return matches_.Get(index);
}
::BioService::Match* Matches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Matches.matches)
  return matches_.Mutable(index);
}
::BioService::Match* Matches::add_matches() {
  // @@protoc_insertion_point(field_add:BioService.Matches.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Match >*
Matches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Matches.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Match >&
Matches::matches() const {
  // @@protoc_insertion_point(field_list:BioService.Matches.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceSearchResponse::kPortraitsFieldNumber;
const int FaceSearchResponse::kMatchesFieldNumber;
const int FaceSearchResponse::kMessageFieldNumber;
const int FaceSearchResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceSearchResponse::FaceSearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FaceSearchResponse)
}

void FaceSearchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FaceSearchResponse::FaceSearchResponse(const FaceSearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FaceSearchResponse)
}

void FaceSearchResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exception_ = NULL;
}

FaceSearchResponse::~FaceSearchResponse() {
  // @@protoc_insertion_point(destructor:BioService.FaceSearchResponse)
  SharedDtor();
}

void FaceSearchResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void FaceSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceSearchResponse_descriptor_;
}

const FaceSearchResponse& FaceSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FaceSearchResponse* FaceSearchResponse::default_instance_ = NULL;

FaceSearchResponse* FaceSearchResponse::New(::google::protobuf::Arena* arena) const {
  FaceSearchResponse* n = new FaceSearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FaceSearchResponse)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  portraits_.Clear();
  matches_.Clear();
}

bool FaceSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FaceSearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.PortraitCharacteristic portraits = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_portraits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_portraits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_portraits;
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.Matches matches = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.FaceSearchResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 4;
      case 4: {
        if (tag == 34) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FaceSearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FaceSearchResponse)
  return false;
#undef DO_
}

void FaceSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FaceSearchResponse)
  // repeated .BioService.PortraitCharacteristic portraits = 1;
  for (unsigned int i = 0, n = this->portraits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->portraits(i), output);
  }

  // repeated .BioService.Matches matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FaceSearchResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FaceSearchResponse)
}

::google::protobuf::uint8* FaceSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FaceSearchResponse)
  // repeated .BioService.PortraitCharacteristic portraits = 1;
  for (unsigned int i = 0, n = this->portraits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->portraits(i), target);
  }

  // repeated .BioService.Matches matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FaceSearchResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FaceSearchResponse)
  return target;
}

int FaceSearchResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FaceSearchResponse)
  int total_size = 0;

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.PortraitCharacteristic portraits = 1;
  total_size += 1 * this->portraits_size();
  for (int i = 0; i < this->portraits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portraits(i));
  }

  // repeated .BioService.Matches matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FaceSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceSearchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceSearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FaceSearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FaceSearchResponse)
    MergeFrom(*source);
  }
}

void FaceSearchResponse::MergeFrom(const FaceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FaceSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  portraits_.MergeFrom(from.portraits_);
  matches_.MergeFrom(from.matches_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void FaceSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FaceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceSearchResponse::CopyFrom(const FaceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FaceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceSearchResponse::IsInitialized() const {

  return true;
}

void FaceSearchResponse::Swap(FaceSearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceSearchResponse::InternalSwap(FaceSearchResponse* other) {
  portraits_.UnsafeArenaSwap(&other->portraits_);
  matches_.UnsafeArenaSwap(&other->matches_);
  message_.Swap(&other->message_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceSearchResponse_descriptor_;
  metadata.reflection = FaceSearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceSearchResponse

// repeated .BioService.PortraitCharacteristic portraits = 1;
int FaceSearchResponse::portraits_size() const {
  return portraits_.size();
}
void FaceSearchResponse::clear_portraits() {
  portraits_.Clear();
}
const ::BioService::PortraitCharacteristic& FaceSearchResponse::portraits(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.portraits)
  return portraits_.Get(index);
}
::BioService::PortraitCharacteristic* FaceSearchResponse::mutable_portraits(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.portraits)
  return portraits_.Mutable(index);
}
::BioService::PortraitCharacteristic* FaceSearchResponse::add_portraits() {
  // @@protoc_insertion_point(field_add:BioService.FaceSearchResponse.portraits)
  return portraits_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
FaceSearchResponse::mutable_portraits() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FaceSearchResponse.portraits)
  return &portraits_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
FaceSearchResponse::portraits() const {
  // @@protoc_insertion_point(field_list:BioService.FaceSearchResponse.portraits)
  return portraits_;
}

// repeated .BioService.Matches matches = 2;
int FaceSearchResponse::matches_size() const {
  return matches_.size();
}
void FaceSearchResponse::clear_matches() {
  matches_.Clear();
}
const ::BioService::Matches& FaceSearchResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.matches)
  return matches_.Get(index);
}
::BioService::Matches* FaceSearchResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.matches)
  return matches_.Mutable(index);
}
::BioService::Matches* FaceSearchResponse::add_matches() {
  // @@protoc_insertion_point(field_add:BioService.FaceSearchResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Matches >*
FaceSearchResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FaceSearchResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Matches >&
FaceSearchResponse::matches() const {
  // @@protoc_insertion_point(field_list:BioService.FaceSearchResponse.matches)
  return matches_;
}

// optional string message = 3;
void FaceSearchResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaceSearchResponse::message() const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceSearchResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FaceSearchResponse.message)
}
 void FaceSearchResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FaceSearchResponse.message)
}
 void FaceSearchResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FaceSearchResponse.message)
}
 ::std::string* FaceSearchResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceSearchResponse::release_message() {
  // @@protoc_insertion_point(field_release:BioService.FaceSearchResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceSearchResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceSearchResponse.message)
}

// optional .BioService.ServiceException exception = 4;
bool FaceSearchResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FaceSearchResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FaceSearchResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FaceSearchResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.exception)
  return exception_;
}
::BioService::ServiceException* FaceSearchResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FaceSearchResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FaceSearchResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceSearchResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcquiredData::kImageFieldNumber;
const int AcquiredData::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcquiredData::AcquiredData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AcquiredData)
}

void AcquiredData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

AcquiredData::AcquiredData(const AcquiredData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AcquiredData)
}

void AcquiredData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  image_ = NULL;
  owner_id_ = GOOGLE_LONGLONG(0);
}

AcquiredData::~AcquiredData() {
  // @@protoc_insertion_point(destructor:BioService.AcquiredData)
  SharedDtor();
}

void AcquiredData::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
  }
}

void AcquiredData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcquiredData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcquiredData_descriptor_;
}

const AcquiredData& AcquiredData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AcquiredData* AcquiredData::default_instance_ = NULL;

AcquiredData* AcquiredData::New(::google::protobuf::Arena* arena) const {
  AcquiredData* n = new AcquiredData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcquiredData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AcquiredData)
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  owner_id_ = GOOGLE_LONGLONG(0);
}

bool AcquiredData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AcquiredData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Photo image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // optional int64 owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AcquiredData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AcquiredData)
  return false;
#undef DO_
}

void AcquiredData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AcquiredData)
  // optional .BioService.Photo image = 1;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // optional int64 owner_id = 2;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->owner_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AcquiredData)
}

::google::protobuf::uint8* AcquiredData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AcquiredData)
  // optional .BioService.Photo image = 1;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->image_, target);
  }

  // optional int64 owner_id = 2;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->owner_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AcquiredData)
  return target;
}

int AcquiredData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AcquiredData)
  int total_size = 0;

  // optional .BioService.Photo image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional int64 owner_id = 2;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcquiredData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcquiredData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AcquiredData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AcquiredData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AcquiredData)
    MergeFrom(*source);
  }
}

void AcquiredData::MergeFrom(const AcquiredData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_image()) {
    mutable_image()->::BioService::Photo::MergeFrom(from.image());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
}

void AcquiredData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquiredData::CopyFrom(const AcquiredData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquiredData::IsInitialized() const {

  return true;
}

void AcquiredData::Swap(AcquiredData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcquiredData::InternalSwap(AcquiredData* other) {
  std::swap(image_, other->image_);
  std::swap(owner_id_, other->owner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcquiredData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcquiredData_descriptor_;
  metadata.reflection = AcquiredData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcquiredData

// optional .BioService.Photo image = 1;
bool AcquiredData::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void AcquiredData::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::BioService::Photo& AcquiredData::image() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::BioService::Photo* AcquiredData::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquiredData.image)
  return image_;
}
::BioService::Photo* AcquiredData::release_image() {
  // @@protoc_insertion_point(field_release:BioService.AcquiredData.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
void AcquiredData::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquiredData.image)
}

// optional int64 owner_id = 2;
void AcquiredData::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AcquiredData::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.owner_id)
  return owner_id_;
}
 void AcquiredData::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.AcquiredData.owner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintAcquiredData::kDataFieldNumber;
const int FingerprintAcquiredData::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintAcquiredData::FingerprintAcquiredData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintAcquiredData)
}

void FingerprintAcquiredData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::BioService::AcquiredData*>(&::BioService::AcquiredData::default_instance());
}

FingerprintAcquiredData::FingerprintAcquiredData(const FingerprintAcquiredData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintAcquiredData)
}

void FingerprintAcquiredData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  data_ = NULL;
  position_ = 0;
}

FingerprintAcquiredData::~FingerprintAcquiredData() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintAcquiredData)
  SharedDtor();
}

void FingerprintAcquiredData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FingerprintAcquiredData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintAcquiredData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintAcquiredData_descriptor_;
}

const FingerprintAcquiredData& FingerprintAcquiredData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintAcquiredData* FingerprintAcquiredData::default_instance_ = NULL;

FingerprintAcquiredData* FingerprintAcquiredData::New(::google::protobuf::Arena* arena) const {
  FingerprintAcquiredData* n = new FingerprintAcquiredData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintAcquiredData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintAcquiredData)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  position_ = 0;
}

bool FingerprintAcquiredData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintAcquiredData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.AcquiredData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional .BioService.Finger position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::BioService::Finger >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintAcquiredData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintAcquiredData)
  return false;
#undef DO_
}

void FingerprintAcquiredData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintAcquiredData)
  // optional .BioService.AcquiredData data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintAcquiredData)
}

::google::protobuf::uint8* FingerprintAcquiredData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintAcquiredData)
  // optional .BioService.AcquiredData data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->data_, target);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintAcquiredData)
  return target;
}

int FingerprintAcquiredData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintAcquiredData)
  int total_size = 0;

  // optional .BioService.AcquiredData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintAcquiredData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintAcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintAcquiredData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintAcquiredData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintAcquiredData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintAcquiredData)
    MergeFrom(*source);
  }
}

void FingerprintAcquiredData::MergeFrom(const FingerprintAcquiredData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintAcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_data()) {
    mutable_data()->::BioService::AcquiredData::MergeFrom(from.data());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void FingerprintAcquiredData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintAcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintAcquiredData::CopyFrom(const FingerprintAcquiredData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintAcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintAcquiredData::IsInitialized() const {

  return true;
}

void FingerprintAcquiredData::Swap(FingerprintAcquiredData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintAcquiredData::InternalSwap(FingerprintAcquiredData* other) {
  std::swap(data_, other->data_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintAcquiredData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintAcquiredData_descriptor_;
  metadata.reflection = FingerprintAcquiredData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintAcquiredData

// optional .BioService.AcquiredData data = 1;
bool FingerprintAcquiredData::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void FingerprintAcquiredData::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::BioService::AcquiredData& FingerprintAcquiredData::data() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::BioService::AcquiredData* FingerprintAcquiredData::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::BioService::AcquiredData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintAcquiredData.data)
  return data_;
}
::BioService::AcquiredData* FingerprintAcquiredData::release_data() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintAcquiredData.data)
  
  ::BioService::AcquiredData* temp = data_;
  data_ = NULL;
  return temp;
}
void FingerprintAcquiredData::set_allocated_data(::BioService::AcquiredData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintAcquiredData.data)
}

// optional .BioService.Finger position = 2;
void FingerprintAcquiredData::clear_position() {
  position_ = 0;
}
 ::BioService::Finger FingerprintAcquiredData::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.position)
  return static_cast< ::BioService::Finger >(position_);
}
 void FingerprintAcquiredData::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintAcquiredData.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollmentFeedback::kCharacteristicIdFieldNumber;
const int EnrollmentFeedback::kPhotoIdFieldNumber;
const int EnrollmentFeedback::kQualityFieldNumber;
const int EnrollmentFeedback::kExceptionFieldNumber;
const int EnrollmentFeedback::kProgressFieldNumber;
const int EnrollmentFeedback::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollmentFeedback::EnrollmentFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.EnrollmentFeedback)
}

void EnrollmentFeedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

EnrollmentFeedback::EnrollmentFeedback(const EnrollmentFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.EnrollmentFeedback)
}

void EnrollmentFeedback::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  characteristic_id_ = GOOGLE_LONGLONG(0);
  photo_id_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  exception_ = NULL;
  progress_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EnrollmentFeedback::~EnrollmentFeedback() {
  // @@protoc_insertion_point(destructor:BioService.EnrollmentFeedback)
  SharedDtor();
}

void EnrollmentFeedback::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void EnrollmentFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnrollmentFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnrollmentFeedback_descriptor_;
}

const EnrollmentFeedback& EnrollmentFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

EnrollmentFeedback* EnrollmentFeedback::default_instance_ = NULL;

EnrollmentFeedback* EnrollmentFeedback::New(::google::protobuf::Arena* arena) const {
  EnrollmentFeedback* n = new EnrollmentFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnrollmentFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.EnrollmentFeedback)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnrollmentFeedback, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnrollmentFeedback*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(characteristic_id_, photo_id_);
  ZR_(quality_, progress_);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EnrollmentFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.EnrollmentFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 characteristic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &characteristic_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photo_id;
        break;
      }

      // optional int64 photo_id = 2;
      case 2: {
        if (tag == 16) {
         parse_photo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_quality;
        break;
      }

      // optional sfixed32 quality = 3;
      case 3: {
        if (tag == 29) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Exception;
        break;
      }

      // optional .BioService.ServiceException Exception = 4;
      case 4: {
        if (tag == 34) {
         parse_Exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_progress;
        break;
      }

      // optional sfixed32 progress = 5;
      case 5: {
        if (tag == 45) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &progress_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // optional string message = 6;
      case 6: {
        if (tag == 50) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.EnrollmentFeedback.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.EnrollmentFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.EnrollmentFeedback)
  return false;
#undef DO_
}

void EnrollmentFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.EnrollmentFeedback)
  // optional int64 characteristic_id = 1;
  if (this->characteristic_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->characteristic_id(), output);
  }

  // optional int64 photo_id = 2;
  if (this->photo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->photo_id(), output);
  }

  // optional sfixed32 quality = 3;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->quality(), output);
  }

  // optional .BioService.ServiceException Exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // optional sfixed32 progress = 5;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->progress(), output);
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.EnrollmentFeedback.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.EnrollmentFeedback)
}

::google::protobuf::uint8* EnrollmentFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.EnrollmentFeedback)
  // optional int64 characteristic_id = 1;
  if (this->characteristic_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->characteristic_id(), target);
  }

  // optional int64 photo_id = 2;
  if (this->photo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->photo_id(), target);
  }

  // optional sfixed32 quality = 3;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->quality(), target);
  }

  // optional .BioService.ServiceException Exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // optional sfixed32 progress = 5;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->progress(), target);
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.EnrollmentFeedback.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.EnrollmentFeedback)
  return target;
}

int EnrollmentFeedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.EnrollmentFeedback)
  int total_size = 0;

  // optional int64 characteristic_id = 1;
  if (this->characteristic_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->characteristic_id());
  }

  // optional int64 photo_id = 2;
  if (this->photo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photo_id());
  }

  // optional sfixed32 quality = 3;
  if (this->quality() != 0) {
    total_size += 1 + 4;
  }

  // optional .BioService.ServiceException Exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional sfixed32 progress = 5;
  if (this->progress() != 0) {
    total_size += 1 + 4;
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnrollmentFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.EnrollmentFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnrollmentFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnrollmentFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.EnrollmentFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.EnrollmentFeedback)
    MergeFrom(*source);
  }
}

void EnrollmentFeedback::MergeFrom(const EnrollmentFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.EnrollmentFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.characteristic_id() != 0) {
    set_characteristic_id(from.characteristic_id());
  }
  if (from.photo_id() != 0) {
    set_photo_id(from.photo_id());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void EnrollmentFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.EnrollmentFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentFeedback::CopyFrom(const EnrollmentFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.EnrollmentFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentFeedback::IsInitialized() const {

  return true;
}

void EnrollmentFeedback::Swap(EnrollmentFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollmentFeedback::InternalSwap(EnrollmentFeedback* other) {
  std::swap(characteristic_id_, other->characteristic_id_);
  std::swap(photo_id_, other->photo_id_);
  std::swap(quality_, other->quality_);
  std::swap(exception_, other->exception_);
  std::swap(progress_, other->progress_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnrollmentFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnrollmentFeedback_descriptor_;
  metadata.reflection = EnrollmentFeedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnrollmentFeedback

// optional int64 characteristic_id = 1;
void EnrollmentFeedback::clear_characteristic_id() {
  characteristic_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EnrollmentFeedback::characteristic_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.characteristic_id)
  return characteristic_id_;
}
 void EnrollmentFeedback::set_characteristic_id(::google::protobuf::int64 value) {
  
  characteristic_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.characteristic_id)
}

// optional int64 photo_id = 2;
void EnrollmentFeedback::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EnrollmentFeedback::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.photo_id)
  return photo_id_;
}
 void EnrollmentFeedback::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.photo_id)
}

// optional sfixed32 quality = 3;
void EnrollmentFeedback::clear_quality() {
  quality_ = 0;
}
 ::google::protobuf::int32 EnrollmentFeedback::quality() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.quality)
  return quality_;
}
 void EnrollmentFeedback::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.quality)
}

// optional .BioService.ServiceException Exception = 4;
bool EnrollmentFeedback::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void EnrollmentFeedback::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& EnrollmentFeedback::exception() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.Exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* EnrollmentFeedback::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.Exception)
  return exception_;
}
::BioService::ServiceException* EnrollmentFeedback::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.EnrollmentFeedback.Exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void EnrollmentFeedback::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.Exception)
}

// optional sfixed32 progress = 5;
void EnrollmentFeedback::clear_progress() {
  progress_ = 0;
}
 ::google::protobuf::int32 EnrollmentFeedback::progress() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.progress)
  return progress_;
}
 void EnrollmentFeedback::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.progress)
}

// optional string message = 6;
void EnrollmentFeedback::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EnrollmentFeedback::message() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnrollmentFeedback::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.message)
}
 void EnrollmentFeedback::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.EnrollmentFeedback.message)
}
 void EnrollmentFeedback::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.EnrollmentFeedback.message)
}
 ::std::string* EnrollmentFeedback::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnrollmentFeedback::release_message() {
  // @@protoc_insertion_point(field_release:BioService.EnrollmentFeedback.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnrollmentFeedback::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationFeedback::kEnrollmentFeedbackFieldNumber;
const int VerificationFeedback::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationFeedback::VerificationFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.VerificationFeedback)
}

void VerificationFeedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  enrollment_feedback_ = const_cast< ::BioService::EnrollmentFeedback*>(&::BioService::EnrollmentFeedback::default_instance());
}

VerificationFeedback::VerificationFeedback(const VerificationFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.VerificationFeedback)
}

void VerificationFeedback::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enrollment_feedback_ = NULL;
  match_ = 0;
}

VerificationFeedback::~VerificationFeedback() {
  // @@protoc_insertion_point(destructor:BioService.VerificationFeedback)
  SharedDtor();
}

void VerificationFeedback::SharedDtor() {
  if (this != default_instance_) {
    delete enrollment_feedback_;
  }
}

void VerificationFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerificationFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerificationFeedback_descriptor_;
}

const VerificationFeedback& VerificationFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

VerificationFeedback* VerificationFeedback::default_instance_ = NULL;

VerificationFeedback* VerificationFeedback::New(::google::protobuf::Arena* arena) const {
  VerificationFeedback* n = new VerificationFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerificationFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.VerificationFeedback)
  if (GetArenaNoVirtual() == NULL && enrollment_feedback_ != NULL) delete enrollment_feedback_;
  enrollment_feedback_ = NULL;
  match_ = 0;
}

bool VerificationFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.VerificationFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enrollment_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_match;
        break;
      }

      // optional float match = 2;
      case 2: {
        if (tag == 21) {
         parse_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.VerificationFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.VerificationFeedback)
  return false;
#undef DO_
}

void VerificationFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.VerificationFeedback)
  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  if (this->has_enrollment_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->enrollment_feedback_, output);
  }

  // optional float match = 2;
  if (this->match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->match(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.VerificationFeedback)
}

::google::protobuf::uint8* VerificationFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.VerificationFeedback)
  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  if (this->has_enrollment_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->enrollment_feedback_, target);
  }

  // optional float match = 2;
  if (this->match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->match(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.VerificationFeedback)
  return target;
}

int VerificationFeedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.VerificationFeedback)
  int total_size = 0;

  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  if (this->has_enrollment_feedback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enrollment_feedback_);
  }

  // optional float match = 2;
  if (this->match() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerificationFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.VerificationFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerificationFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerificationFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.VerificationFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.VerificationFeedback)
    MergeFrom(*source);
  }
}

void VerificationFeedback::MergeFrom(const VerificationFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.VerificationFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_enrollment_feedback()) {
    mutable_enrollment_feedback()->::BioService::EnrollmentFeedback::MergeFrom(from.enrollment_feedback());
  }
  if (from.match() != 0) {
    set_match(from.match());
  }
}

void VerificationFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.VerificationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationFeedback::CopyFrom(const VerificationFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.VerificationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationFeedback::IsInitialized() const {

  return true;
}

void VerificationFeedback::Swap(VerificationFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationFeedback::InternalSwap(VerificationFeedback* other) {
  std::swap(enrollment_feedback_, other->enrollment_feedback_);
  std::swap(match_, other->match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerificationFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerificationFeedback_descriptor_;
  metadata.reflection = VerificationFeedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerificationFeedback

// optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
bool VerificationFeedback::has_enrollment_feedback() const {
  return !_is_default_instance_ && enrollment_feedback_ != NULL;
}
void VerificationFeedback::clear_enrollment_feedback() {
  if (GetArenaNoVirtual() == NULL && enrollment_feedback_ != NULL) delete enrollment_feedback_;
  enrollment_feedback_ = NULL;
}
const ::BioService::EnrollmentFeedback& VerificationFeedback::enrollment_feedback() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_ != NULL ? *enrollment_feedback_ : *default_instance_->enrollment_feedback_;
}
::BioService::EnrollmentFeedback* VerificationFeedback::mutable_enrollment_feedback() {
  
  if (enrollment_feedback_ == NULL) {
    enrollment_feedback_ = new ::BioService::EnrollmentFeedback;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_;
}
::BioService::EnrollmentFeedback* VerificationFeedback::release_enrollment_feedback() {
  // @@protoc_insertion_point(field_release:BioService.VerificationFeedback.enrollment_feedback)
  
  ::BioService::EnrollmentFeedback* temp = enrollment_feedback_;
  enrollment_feedback_ = NULL;
  return temp;
}
void VerificationFeedback::set_allocated_enrollment_feedback(::BioService::EnrollmentFeedback* enrollment_feedback) {
  delete enrollment_feedback_;
  enrollment_feedback_ = enrollment_feedback;
  if (enrollment_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationFeedback.enrollment_feedback)
}

// optional float match = 2;
void VerificationFeedback::clear_match() {
  match_ = 0;
}
 float VerificationFeedback::match() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.match)
  return match_;
}
 void VerificationFeedback::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.VerificationFeedback.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GetPhotoRequest_PhotoResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPhotoRequest_PhotoResponseType_descriptor_;
}
bool GetPhotoRequest_PhotoResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetPhotoRequest_PhotoResponseType GetPhotoRequest::Undefined;
const GetPhotoRequest_PhotoResponseType GetPhotoRequest::Full;
const GetPhotoRequest_PhotoResponseType GetPhotoRequest::OnlyBytes;
const GetPhotoRequest_PhotoResponseType GetPhotoRequest::NoBytes;
const GetPhotoRequest_PhotoResponseType GetPhotoRequest::PhotoResponseType_MIN;
const GetPhotoRequest_PhotoResponseType GetPhotoRequest::PhotoResponseType_MAX;
const int GetPhotoRequest::PhotoResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhotoRequest::kWithBytesFieldNumber;
const int GetPhotoRequest::kPersonsFieldNumber;
const int GetPhotoRequest::kPhotosFieldNumber;
const int GetPhotoRequest::kItemsPerPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhotoRequest::GetPhotoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.GetPhotoRequest)
}

void GetPhotoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetPhotoRequest::GetPhotoRequest(const GetPhotoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.GetPhotoRequest)
}

void GetPhotoRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  with_bytes_ = 0;
  items_per_page_ = GOOGLE_LONGLONG(0);
}

GetPhotoRequest::~GetPhotoRequest() {
  // @@protoc_insertion_point(destructor:BioService.GetPhotoRequest)
  SharedDtor();
}

void GetPhotoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPhotoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPhotoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPhotoRequest_descriptor_;
}

const GetPhotoRequest& GetPhotoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

GetPhotoRequest* GetPhotoRequest::default_instance_ = NULL;

GetPhotoRequest* GetPhotoRequest::New(::google::protobuf::Arena* arena) const {
  GetPhotoRequest* n = new GetPhotoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPhotoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.GetPhotoRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetPhotoRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetPhotoRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(items_per_page_, with_bytes_);

#undef ZR_HELPER_
#undef ZR_

  persons_.Clear();
  photos_.Clear();
}

bool GetPhotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.GetPhotoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_with_bytes(static_cast< ::BioService::GetPhotoRequest_PhotoResponseType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persons;
        break;
      }

      // repeated int64 persons = 2;
      case 2: {
        if (tag == 18) {
         parse_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_persons())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_persons())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        break;
      }

      // repeated int64 photos = 3;
      case 3: {
        if (tag == 26) {
         parse_photos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_photos())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_photos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_items_per_page;
        break;
      }

      // optional int64 items_per_page = 4;
      case 4: {
        if (tag == 32) {
         parse_items_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &items_per_page_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.GetPhotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.GetPhotoRequest)
  return false;
#undef DO_
}

void GetPhotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.GetPhotoRequest)
  // optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
  if (this->with_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->with_bytes(), output);
  }

  // repeated int64 persons = 2;
  if (this->persons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_persons_cached_byte_size_);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->persons(i), output);
  }

  // repeated int64 photos = 3;
  if (this->photos_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_photos_cached_byte_size_);
  }
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->photos(i), output);
  }

  // optional int64 items_per_page = 4;
  if (this->items_per_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->items_per_page(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.GetPhotoRequest)
}

::google::protobuf::uint8* GetPhotoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.GetPhotoRequest)
  // optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
  if (this->with_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->with_bytes(), target);
  }

  // repeated int64 persons = 2;
  if (this->persons_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _persons_cached_byte_size_, target);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->persons(i), target);
  }

  // repeated int64 photos = 3;
  if (this->photos_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _photos_cached_byte_size_, target);
  }
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->photos(i), target);
  }

  // optional int64 items_per_page = 4;
  if (this->items_per_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->items_per_page(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.GetPhotoRequest)
  return target;
}

int GetPhotoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.GetPhotoRequest)
  int total_size = 0;

  // optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
  if (this->with_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->with_bytes());
  }

  // optional int64 items_per_page = 4;
  if (this->items_per_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->items_per_page());
  }

  // repeated int64 persons = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->persons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->persons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _persons_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 photos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->photos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->photos(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _photos_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPhotoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.GetPhotoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPhotoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhotoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.GetPhotoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.GetPhotoRequest)
    MergeFrom(*source);
  }
}

void GetPhotoRequest::MergeFrom(const GetPhotoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.GetPhotoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  persons_.MergeFrom(from.persons_);
  photos_.MergeFrom(from.photos_);
  if (from.with_bytes() != 0) {
    set_with_bytes(from.with_bytes());
  }
  if (from.items_per_page() != 0) {
    set_items_per_page(from.items_per_page());
  }
}

void GetPhotoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.GetPhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoRequest::CopyFrom(const GetPhotoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.GetPhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoRequest::IsInitialized() const {

  return true;
}

void GetPhotoRequest::Swap(GetPhotoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhotoRequest::InternalSwap(GetPhotoRequest* other) {
  std::swap(with_bytes_, other->with_bytes_);
  persons_.UnsafeArenaSwap(&other->persons_);
  photos_.UnsafeArenaSwap(&other->photos_);
  std::swap(items_per_page_, other->items_per_page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPhotoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPhotoRequest_descriptor_;
  metadata.reflection = GetPhotoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPhotoRequest

// optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
void GetPhotoRequest::clear_with_bytes() {
  with_bytes_ = 0;
}
 ::BioService::GetPhotoRequest_PhotoResponseType GetPhotoRequest::with_bytes() const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.with_bytes)
  return static_cast< ::BioService::GetPhotoRequest_PhotoResponseType >(with_bytes_);
}
 void GetPhotoRequest::set_with_bytes(::BioService::GetPhotoRequest_PhotoResponseType value) {
  
  with_bytes_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.with_bytes)
}

// repeated int64 persons = 2;
int GetPhotoRequest::persons_size() const {
  return persons_.size();
}
void GetPhotoRequest::clear_persons() {
  persons_.Clear();
}
 ::google::protobuf::int64 GetPhotoRequest::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.persons)
  return persons_.Get(index);
}
 void GetPhotoRequest::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.persons)
}
 void GetPhotoRequest::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetPhotoRequest.persons)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetPhotoRequest::persons() const {
  // @@protoc_insertion_point(field_list:BioService.GetPhotoRequest.persons)
  return persons_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetPhotoRequest::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetPhotoRequest.persons)
  return &persons_;
}

// repeated int64 photos = 3;
int GetPhotoRequest::photos_size() const {
  return photos_.size();
}
void GetPhotoRequest::clear_photos() {
  photos_.Clear();
}
 ::google::protobuf::int64 GetPhotoRequest::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.photos)
  return photos_.Get(index);
}
 void GetPhotoRequest::set_photos(int index, ::google::protobuf::int64 value) {
  photos_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.photos)
}
 void GetPhotoRequest::add_photos(::google::protobuf::int64 value) {
  photos_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetPhotoRequest.photos)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetPhotoRequest::photos() const {
  // @@protoc_insertion_point(field_list:BioService.GetPhotoRequest.photos)
  return photos_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetPhotoRequest::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetPhotoRequest.photos)
  return &photos_;
}

// optional int64 items_per_page = 4;
void GetPhotoRequest::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetPhotoRequest::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.items_per_page)
  return items_per_page_;
}
 void GetPhotoRequest::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.items_per_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPersonRequest::kIdsFieldNumber;
const int GetPersonRequest::kItemsPerPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPersonRequest::GetPersonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.GetPersonRequest)
}

void GetPersonRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetPersonRequest::GetPersonRequest(const GetPersonRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.GetPersonRequest)
}

void GetPersonRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  items_per_page_ = GOOGLE_LONGLONG(0);
}

GetPersonRequest::~GetPersonRequest() {
  // @@protoc_insertion_point(destructor:BioService.GetPersonRequest)
  SharedDtor();
}

void GetPersonRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPersonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPersonRequest_descriptor_;
}

const GetPersonRequest& GetPersonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

GetPersonRequest* GetPersonRequest::default_instance_ = NULL;

GetPersonRequest* GetPersonRequest::New(::google::protobuf::Arena* arena) const {
  GetPersonRequest* n = new GetPersonRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPersonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.GetPersonRequest)
  items_per_page_ = GOOGLE_LONGLONG(0);
  ids_.Clear();
}

bool GetPersonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.GetPersonRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_items_per_page;
        break;
      }

      // optional int64 items_per_page = 2;
      case 2: {
        if (tag == 16) {
         parse_items_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &items_per_page_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.GetPersonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.GetPersonRequest)
  return false;
#undef DO_
}

void GetPersonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.GetPersonRequest)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // optional int64 items_per_page = 2;
  if (this->items_per_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->items_per_page(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.GetPersonRequest)
}

::google::protobuf::uint8* GetPersonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.GetPersonRequest)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids(i), target);
  }

  // optional int64 items_per_page = 2;
  if (this->items_per_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->items_per_page(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.GetPersonRequest)
  return target;
}

int GetPersonRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.GetPersonRequest)
  int total_size = 0;

  // optional int64 items_per_page = 2;
  if (this->items_per_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->items_per_page());
  }

  // repeated int64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.GetPersonRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPersonRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPersonRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.GetPersonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.GetPersonRequest)
    MergeFrom(*source);
  }
}

void GetPersonRequest::MergeFrom(const GetPersonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.GetPersonRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
  if (from.items_per_page() != 0) {
    set_items_per_page(from.items_per_page());
  }
}

void GetPersonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.GetPersonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonRequest::CopyFrom(const GetPersonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.GetPersonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonRequest::IsInitialized() const {

  return true;
}

void GetPersonRequest::Swap(GetPersonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPersonRequest::InternalSwap(GetPersonRequest* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  std::swap(items_per_page_, other->items_per_page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPersonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPersonRequest_descriptor_;
  metadata.reflection = GetPersonRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPersonRequest

// repeated int64 ids = 1;
int GetPersonRequest::ids_size() const {
  return ids_.size();
}
void GetPersonRequest::clear_ids() {
  ids_.Clear();
}
 ::google::protobuf::int64 GetPersonRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetPersonRequest.ids)
  return ids_.Get(index);
}
 void GetPersonRequest::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetPersonRequest.ids)
}
 void GetPersonRequest::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetPersonRequest.ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetPersonRequest::ids() const {
  // @@protoc_insertion_point(field_list:BioService.GetPersonRequest.ids)
  return ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetPersonRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetPersonRequest.ids)
  return &ids_;
}

// optional int64 items_per_page = 2;
void GetPersonRequest::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetPersonRequest::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.GetPersonRequest.items_per_page)
  return items_per_page_;
}
 void GetPersonRequest::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetPersonRequest.items_per_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocationRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocationRequest::GetLocationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.GetLocationRequest)
}

void GetLocationRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetLocationRequest::GetLocationRequest(const GetLocationRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.GetLocationRequest)
}

void GetLocationRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
}

GetLocationRequest::~GetLocationRequest() {
  // @@protoc_insertion_point(destructor:BioService.GetLocationRequest)
  SharedDtor();
}

void GetLocationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLocationRequest_descriptor_;
}

const GetLocationRequest& GetLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

GetLocationRequest* GetLocationRequest::default_instance_ = NULL;

GetLocationRequest* GetLocationRequest::New(::google::protobuf::Arena* arena) const {
  GetLocationRequest* n = new GetLocationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.GetLocationRequest)
  count_ = GOOGLE_LONGLONG(0);
}

bool GetLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.GetLocationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.GetLocationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.GetLocationRequest)
  return false;
#undef DO_
}

void GetLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.GetLocationRequest)
  // optional int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.GetLocationRequest)
}

::google::protobuf::uint8* GetLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.GetLocationRequest)
  // optional int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.GetLocationRequest)
  return target;
}

int GetLocationRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.GetLocationRequest)
  int total_size = 0;

  // optional int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.GetLocationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetLocationRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.GetLocationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.GetLocationRequest)
    MergeFrom(*source);
  }
}

void GetLocationRequest::MergeFrom(const GetLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.GetLocationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void GetLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.GetLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationRequest::CopyFrom(const GetLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.GetLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationRequest::IsInitialized() const {

  return true;
}

void GetLocationRequest::Swap(GetLocationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocationRequest::InternalSwap(GetLocationRequest* other) {
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLocationRequest_descriptor_;
  metadata.reflection = GetLocationRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocationRequest

// optional int64 count = 1;
void GetLocationRequest::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetLocationRequest::count() const {
  // @@protoc_insertion_point(field_get:BioService.GetLocationRequest.count)
  return count_;
}
 void GetLocationRequest::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetLocationRequest.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVisitorRequest::kCountriesFieldNumber;
const int GetVisitorRequest::kLocationsFieldNumber;
const int GetVisitorRequest::kPersonsFieldNumber;
const int GetVisitorRequest::kDatetimeFromFieldNumber;
const int GetVisitorRequest::kDatetimeToFieldNumber;
const int GetVisitorRequest::kItemsPerPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVisitorRequest::GetVisitorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.GetVisitorRequest)
}

void GetVisitorRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetVisitorRequest::GetVisitorRequest(const GetVisitorRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.GetVisitorRequest)
}

void GetVisitorRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  datetime_from_ = GOOGLE_LONGLONG(0);
  datetime_to_ = GOOGLE_LONGLONG(0);
  items_per_page_ = GOOGLE_LONGLONG(0);
}

GetVisitorRequest::~GetVisitorRequest() {
  // @@protoc_insertion_point(destructor:BioService.GetVisitorRequest)
  SharedDtor();
}

void GetVisitorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetVisitorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVisitorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVisitorRequest_descriptor_;
}

const GetVisitorRequest& GetVisitorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

GetVisitorRequest* GetVisitorRequest::default_instance_ = NULL;

GetVisitorRequest* GetVisitorRequest::New(::google::protobuf::Arena* arena) const {
  GetVisitorRequest* n = new GetVisitorRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVisitorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.GetVisitorRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetVisitorRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetVisitorRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(datetime_from_, items_per_page_);

#undef ZR_HELPER_
#undef ZR_

  countries_.Clear();
  locations_.Clear();
  persons_.Clear();
}

bool GetVisitorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.GetVisitorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string countries = 2;
      case 2: {
        if (tag == 18) {
         parse_countries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_countries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->countries(this->countries_size() - 1).data(),
            this->countries(this->countries_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.GetVisitorRequest.countries"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countries;
        if (input->ExpectTag(26)) goto parse_locations;
        break;
      }

      // repeated int64 locations = 3;
      case 3: {
        if (tag == 26) {
         parse_locations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_locations())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_locations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_persons;
        break;
      }

      // repeated int64 persons = 4;
      case 4: {
        if (tag == 34) {
         parse_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_persons())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34, input, this->mutable_persons())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_datetime_from;
        break;
      }

      // optional int64 datetime_from = 5;
      case 5: {
        if (tag == 40) {
         parse_datetime_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_datetime_to;
        break;
      }

      // optional int64 datetime_to = 6;
      case 6: {
        if (tag == 48) {
         parse_datetime_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_to_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_items_per_page;
        break;
      }

      // optional int64 items_per_page = 7;
      case 7: {
        if (tag == 56) {
         parse_items_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &items_per_page_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.GetVisitorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.GetVisitorRequest)
  return false;
#undef DO_
}

void GetVisitorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.GetVisitorRequest)
  // repeated string countries = 2;
  for (int i = 0; i < this->countries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countries(i).data(), this->countries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.GetVisitorRequest.countries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->countries(i), output);
  }

  // repeated int64 locations = 3;
  if (this->locations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_locations_cached_byte_size_);
  }
  for (int i = 0; i < this->locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->locations(i), output);
  }

  // repeated int64 persons = 4;
  if (this->persons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_persons_cached_byte_size_);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->persons(i), output);
  }

  // optional int64 datetime_from = 5;
  if (this->datetime_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->datetime_from(), output);
  }

  // optional int64 datetime_to = 6;
  if (this->datetime_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->datetime_to(), output);
  }

  // optional int64 items_per_page = 7;
  if (this->items_per_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->items_per_page(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.GetVisitorRequest)
}

::google::protobuf::uint8* GetVisitorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.GetVisitorRequest)
  // repeated string countries = 2;
  for (int i = 0; i < this->countries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countries(i).data(), this->countries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.GetVisitorRequest.countries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->countries(i), target);
  }

  // repeated int64 locations = 3;
  if (this->locations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _locations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->locations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->locations(i), target);
  }

  // repeated int64 persons = 4;
  if (this->persons_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _persons_cached_byte_size_, target);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->persons(i), target);
  }

  // optional int64 datetime_from = 5;
  if (this->datetime_from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->datetime_from(), target);
  }

  // optional int64 datetime_to = 6;
  if (this->datetime_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->datetime_to(), target);
  }

  // optional int64 items_per_page = 7;
  if (this->items_per_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->items_per_page(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.GetVisitorRequest)
  return target;
}

int GetVisitorRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.GetVisitorRequest)
  int total_size = 0;

  // optional int64 datetime_from = 5;
  if (this->datetime_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datetime_from());
  }

  // optional int64 datetime_to = 6;
  if (this->datetime_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datetime_to());
  }

  // optional int64 items_per_page = 7;
  if (this->items_per_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->items_per_page());
  }

  // repeated string countries = 2;
  total_size += 1 * this->countries_size();
  for (int i = 0; i < this->countries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->countries(i));
  }

  // repeated int64 locations = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->locations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->locations(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _locations_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 persons = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->persons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->persons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _persons_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVisitorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.GetVisitorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetVisitorRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVisitorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.GetVisitorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.GetVisitorRequest)
    MergeFrom(*source);
  }
}

void GetVisitorRequest::MergeFrom(const GetVisitorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.GetVisitorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  countries_.MergeFrom(from.countries_);
  locations_.MergeFrom(from.locations_);
  persons_.MergeFrom(from.persons_);
  if (from.datetime_from() != 0) {
    set_datetime_from(from.datetime_from());
  }
  if (from.datetime_to() != 0) {
    set_datetime_to(from.datetime_to());
  }
  if (from.items_per_page() != 0) {
    set_items_per_page(from.items_per_page());
  }
}

void GetVisitorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.GetVisitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVisitorRequest::CopyFrom(const GetVisitorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.GetVisitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVisitorRequest::IsInitialized() const {

  return true;
}

void GetVisitorRequest::Swap(GetVisitorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVisitorRequest::InternalSwap(GetVisitorRequest* other) {
  countries_.UnsafeArenaSwap(&other->countries_);
  locations_.UnsafeArenaSwap(&other->locations_);
  persons_.UnsafeArenaSwap(&other->persons_);
  std::swap(datetime_from_, other->datetime_from_);
  std::swap(datetime_to_, other->datetime_to_);
  std::swap(items_per_page_, other->items_per_page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVisitorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVisitorRequest_descriptor_;
  metadata.reflection = GetVisitorRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetVisitorRequest

// repeated string countries = 2;
int GetVisitorRequest::countries_size() const {
  return countries_.size();
}
void GetVisitorRequest::clear_countries() {
  countries_.Clear();
}
 const ::std::string& GetVisitorRequest::countries(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.countries)
  return countries_.Get(index);
}
 ::std::string* GetVisitorRequest::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.GetVisitorRequest.countries)
  return countries_.Mutable(index);
}
 void GetVisitorRequest::set_countries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.countries)
  countries_.Mutable(index)->assign(value);
}
 void GetVisitorRequest::set_countries(int index, const char* value) {
  countries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BioService.GetVisitorRequest.countries)
}
 void GetVisitorRequest::set_countries(int index, const char* value, size_t size) {
  countries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BioService.GetVisitorRequest.countries)
}
 ::std::string* GetVisitorRequest::add_countries() {
  // @@protoc_insertion_point(field_add_mutable:BioService.GetVisitorRequest.countries)
  return countries_.Add();
}
 void GetVisitorRequest::add_countries(const ::std::string& value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BioService.GetVisitorRequest.countries)
}
 void GetVisitorRequest::add_countries(const char* value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BioService.GetVisitorRequest.countries)
}
 void GetVisitorRequest::add_countries(const char* value, size_t size) {
  countries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BioService.GetVisitorRequest.countries)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetVisitorRequest::countries() const {
  // @@protoc_insertion_point(field_list:BioService.GetVisitorRequest.countries)
  return countries_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetVisitorRequest::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetVisitorRequest.countries)
  return &countries_;
}

// repeated int64 locations = 3;
int GetVisitorRequest::locations_size() const {
  return locations_.size();
}
void GetVisitorRequest::clear_locations() {
  locations_.Clear();
}
 ::google::protobuf::int64 GetVisitorRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.locations)
  return locations_.Get(index);
}
 void GetVisitorRequest::set_locations(int index, ::google::protobuf::int64 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.locations)
}
 void GetVisitorRequest::add_locations(::google::protobuf::int64 value) {
  locations_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetVisitorRequest.locations)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetVisitorRequest::locations() const {
  // @@protoc_insertion_point(field_list:BioService.GetVisitorRequest.locations)
  return locations_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetVisitorRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetVisitorRequest.locations)
  return &locations_;
}

// repeated int64 persons = 4;
int GetVisitorRequest::persons_size() const {
  return persons_.size();
}
void GetVisitorRequest::clear_persons() {
  persons_.Clear();
}
 ::google::protobuf::int64 GetVisitorRequest::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.persons)
  return persons_.Get(index);
}
 void GetVisitorRequest::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.persons)
}
 void GetVisitorRequest::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetVisitorRequest.persons)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetVisitorRequest::persons() const {
  // @@protoc_insertion_point(field_list:BioService.GetVisitorRequest.persons)
  return persons_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetVisitorRequest::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetVisitorRequest.persons)
  return &persons_;
}

// optional int64 datetime_from = 5;
void GetVisitorRequest::clear_datetime_from() {
  datetime_from_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetVisitorRequest::datetime_from() const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.datetime_from)
  return datetime_from_;
}
 void GetVisitorRequest::set_datetime_from(::google::protobuf::int64 value) {
  
  datetime_from_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.datetime_from)
}

// optional int64 datetime_to = 6;
void GetVisitorRequest::clear_datetime_to() {
  datetime_to_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetVisitorRequest::datetime_to() const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.datetime_to)
  return datetime_to_;
}
 void GetVisitorRequest::set_datetime_to(::google::protobuf::int64 value) {
  
  datetime_to_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.datetime_to)
}

// optional int64 items_per_page = 7;
void GetVisitorRequest::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetVisitorRequest::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.items_per_page)
  return items_per_page_;
}
 void GetVisitorRequest::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.items_per_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecord::kMessageTypeFieldNumber;
const int LogRecord::kDetectedTimeFieldNumber;
const int LogRecord::kExceptionMessageFieldNumber;
const int LogRecord::kClassNameFieldNumber;
const int LogRecord::kFunctionNameFieldNumber;
const int LogRecord::kLineNumberFieldNumber;
const int LogRecord::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecord::LogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.LogRecord)
}

void LogRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogRecord::LogRecord(const LogRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.LogRecord)
}

void LogRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_type_ = 0;
  detected_time_ = GOOGLE_LONGLONG(0);
  exception_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_ = GOOGLE_LONGLONG(0);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:BioService.LogRecord)
  SharedDtor();
}

void LogRecord::SharedDtor() {
  exception_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecord_descriptor_;
}

const LogRecord& LogRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

LogRecord* LogRecord::default_instance_ = NULL;

LogRecord* LogRecord::New(::google::protobuf::Arena* arena) const {
  LogRecord* n = new LogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.LogRecord)
  message_type_ = 0;
  detected_time_ = GOOGLE_LONGLONG(0);
  exception_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_ = GOOGLE_LONGLONG(0);
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.LogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.MessageType message_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::BioService::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_detected_time;
        break;
      }

      // optional int64 detected_time = 2;
      case 2: {
        if (tag == 16) {
         parse_detected_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detected_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exception_message;
        break;
      }

      // optional string exception_message = 3;
      case 3: {
        if (tag == 26) {
         parse_exception_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exception_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exception_message().data(), this->exception_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.exception_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_class_name;
        break;
      }

      // optional string class_name = 4;
      case 4: {
        if (tag == 34) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.class_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_function_name;
        break;
      }

      // optional string function_name = 5;
      case 5: {
        if (tag == 42) {
         parse_function_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function_name().data(), this->function_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.function_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_line_number;
        break;
      }

      // optional int64 line_number = 6;
      case 6: {
        if (tag == 48) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (tag == 58) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.comment"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.LogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.LogRecord)
  return false;
#undef DO_
}

void LogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.LogRecord)
  // optional .BioService.MessageType message_type = 1;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional int64 detected_time = 2;
  if (this->detected_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->detected_time(), output);
  }

  // optional string exception_message = 3;
  if (this->exception_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exception_message().data(), this->exception_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.exception_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exception_message(), output);
  }

  // optional string class_name = 4;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->class_name(), output);
  }

  // optional string function_name = 5;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->function_name(), output);
  }

  // optional int64 line_number = 6;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->line_number(), output);
  }

  // optional string comment = 7;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->comment(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.LogRecord)
}

::google::protobuf::uint8* LogRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.LogRecord)
  // optional .BioService.MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // optional int64 detected_time = 2;
  if (this->detected_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->detected_time(), target);
  }

  // optional string exception_message = 3;
  if (this->exception_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exception_message().data(), this->exception_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.exception_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exception_message(), target);
  }

  // optional string class_name = 4;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_name(), target);
  }

  // optional string function_name = 5;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->function_name(), target);
  }

  // optional int64 line_number = 6;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->line_number(), target);
  }

  // optional string comment = 7;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.LogRecord)
  return target;
}

int LogRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.LogRecord)
  int total_size = 0;

  // optional .BioService.MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  // optional int64 detected_time = 2;
  if (this->detected_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->detected_time());
  }

  // optional string exception_message = 3;
  if (this->exception_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exception_message());
  }

  // optional string class_name = 4;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // optional string function_name = 5;
  if (this->function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function_name());
  }

  // optional int64 line_number = 6;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_number());
  }

  // optional string comment = 7;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.LogRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.LogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.LogRecord)
    MergeFrom(*source);
  }
}

void LogRecord::MergeFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.LogRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.detected_time() != 0) {
    set_detected_time(from.detected_time());
  }
  if (from.exception_message().size() > 0) {

    exception_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exception_message_);
  }
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.function_name().size() > 0) {

    function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
}

void LogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {

  return true;
}

void LogRecord::Swap(LogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecord::InternalSwap(LogRecord* other) {
  std::swap(message_type_, other->message_type_);
  std::swap(detected_time_, other->detected_time_);
  exception_message_.Swap(&other->exception_message_);
  class_name_.Swap(&other->class_name_);
  function_name_.Swap(&other->function_name_);
  std::swap(line_number_, other->line_number_);
  comment_.Swap(&other->comment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecord_descriptor_;
  metadata.reflection = LogRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecord

// optional .BioService.MessageType message_type = 1;
void LogRecord::clear_message_type() {
  message_type_ = 0;
}
 ::BioService::MessageType LogRecord::message_type() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.message_type)
  return static_cast< ::BioService::MessageType >(message_type_);
}
 void LogRecord::set_message_type(::BioService::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.message_type)
}

// optional int64 detected_time = 2;
void LogRecord::clear_detected_time() {
  detected_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogRecord::detected_time() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.detected_time)
  return detected_time_;
}
 void LogRecord::set_detected_time(::google::protobuf::int64 value) {
  
  detected_time_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.detected_time)
}

// optional string exception_message = 3;
void LogRecord::clear_exception_message() {
  exception_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::exception_message() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.exception_message)
  return exception_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_exception_message(const ::std::string& value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.exception_message)
}
 void LogRecord::set_exception_message(const char* value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.exception_message)
}
 void LogRecord::set_exception_message(const char* value, size_t size) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.exception_message)
}
 ::std::string* LogRecord::mutable_exception_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.exception_message)
  return exception_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_exception_message() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.exception_message)
  
  return exception_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_exception_message(::std::string* exception_message) {
  if (exception_message != NULL) {
    
  } else {
    
  }
  exception_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception_message);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.exception_message)
}

// optional string class_name = 4;
void LogRecord::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::class_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.class_name)
  return class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.class_name)
}
 void LogRecord::set_class_name(const char* value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.class_name)
}
 void LogRecord::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.class_name)
}
 ::std::string* LogRecord::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_class_name() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.class_name)
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.class_name)
}

// optional string function_name = 5;
void LogRecord::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::function_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.function_name)
  return function_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.function_name)
}
 void LogRecord::set_function_name(const char* value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.function_name)
}
 void LogRecord::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.function_name)
}
 ::std::string* LogRecord::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_function_name() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.function_name)
}

// optional int64 line_number = 6;
void LogRecord::clear_line_number() {
  line_number_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogRecord::line_number() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.line_number)
  return line_number_;
}
 void LogRecord::set_line_number(::google::protobuf::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.line_number)
}

// optional string comment = 7;
void LogRecord::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::comment() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.comment)
}
 void LogRecord::set_comment(const char* value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.comment)
}
 void LogRecord::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.comment)
}
 ::std::string* LogRecord::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_comment() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace BioService

// @@protoc_insertion_point(global_scope)
