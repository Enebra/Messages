// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto

#ifndef PROTOBUF_bio_5fservice_2eproto__INCLUDED
#define PROTOBUF_bio_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace BioService {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_bio_5fservice_2eproto();
void protobuf_AssignDesc_bio_5fservice_2eproto();
void protobuf_ShutdownFile_bio_5fservice_2eproto();

class AccessDevice;
class AcquiredData;
class AcquisitionResponse;
class Box;
class CaptureDevice;
class Card;
class CardList;
class EnrollmentFeedback;
class EntityIds;
class FaceCharacteristic;
class FaceSearchResponse;
class FingerprintAcquiredData;
class FingerprintCharacteristic;
class FingerprintDevice;
class GetLocationRequest;
class GetPersonRequest;
class GetPhotoRequest;
class GetVisitorRequest;
class IdentificationData;
class IrisDevice;
class Location;
class LocationList;
class LogRecord;
class Match;
class Matches;
class Person;
class PersonList;
class PersonResponse;
class Photo;
class PhotoList;
class PopulationCreationResponse;
class PortraitCharacteristic;
class Position;
class Response;
class ServiceException;
class VerificationData;
class VerificationFeedback;
class Visitor;
class VisitorList;

enum GetPhotoRequest_PhotoResponseType {
  GetPhotoRequest_PhotoResponseType_Undefined = 0,
  GetPhotoRequest_PhotoResponseType_Full = 1,
  GetPhotoRequest_PhotoResponseType_OnlyBytes = 2,
  GetPhotoRequest_PhotoResponseType_NoBytes = 3,
  GetPhotoRequest_PhotoResponseType_GetPhotoRequest_PhotoResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetPhotoRequest_PhotoResponseType_GetPhotoRequest_PhotoResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetPhotoRequest_PhotoResponseType_IsValid(int value);
const GetPhotoRequest_PhotoResponseType GetPhotoRequest_PhotoResponseType_PhotoResponseType_MIN = GetPhotoRequest_PhotoResponseType_Undefined;
const GetPhotoRequest_PhotoResponseType GetPhotoRequest_PhotoResponseType_PhotoResponseType_MAX = GetPhotoRequest_PhotoResponseType_NoBytes;
const int GetPhotoRequest_PhotoResponseType_PhotoResponseType_ARRAYSIZE = GetPhotoRequest_PhotoResponseType_PhotoResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetPhotoRequest_PhotoResponseType_descriptor();
inline const ::std::string& GetPhotoRequest_PhotoResponseType_Name(GetPhotoRequest_PhotoResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetPhotoRequest_PhotoResponseType_descriptor(), value);
}
inline bool GetPhotoRequest_PhotoResponseType_Parse(
    const ::std::string& name, GetPhotoRequest_PhotoResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetPhotoRequest_PhotoResponseType>(
    GetPhotoRequest_PhotoResponseType_descriptor(), name, value);
}
enum Gender {
  None = 0,
  Male = 1,
  Female = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = None;
const Gender Gender_MAX = Female;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum Rights {
  Custom = 0,
  Operator = 1,
  Manager = 2,
  Supervisor = 3,
  Rights_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Rights_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Rights_IsValid(int value);
const Rights Rights_MIN = Custom;
const Rights Rights_MAX = Supervisor;
const int Rights_ARRAYSIZE = Rights_MAX + 1;

const ::google::protobuf::EnumDescriptor* Rights_descriptor();
inline const ::std::string& Rights_Name(Rights value) {
  return ::google::protobuf::internal::NameOfEnum(
    Rights_descriptor(), value);
}
inline bool Rights_Parse(
    const ::std::string& name, Rights* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Rights>(
    Rights_descriptor(), name, value);
}
enum MessageType {
  Information = 0,
  Error = 1,
  Warning = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = Information;
const MessageType MessageType_MAX = Warning;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum IsoComplianceTemplate {
  Nothing = 0,
  OnlyOneFaceVisible = 1,
  goodVerticalFacePosition = 2,
  horizontallyCenteredFace = 3,
  widthOfHead = 4,
  lengthOfHead = 5,
  widthOfHeadBestPractice = 6,
  lengthOfHeadBestPractice = 7,
  resolution = 8,
  resolutionBestPractice = 9,
  imageWidthToHeightBestPractice = 10,
  goodExposure = 11,
  goodGrayScaleProfile = 12,
  hasNaturalSkinColour = 13,
  noHotSpots = 14,
  isBackgroundUniformBestPractice = 15,
  isFrontal = 16,
  isFrontalBestPractice = 17,
  isLightingUniform = 18,
  eyesOpenBestPractice = 19,
  eyesGazeFrontalBestPractice = 20,
  eyesNotRedBestPractice = 21,
  noTintedGlasses = 22,
  isSharp = 23,
  mouthClosedBestPractice = 24,
  IsoComplianceTemplate_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IsoComplianceTemplate_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IsoComplianceTemplate_IsValid(int value);
const IsoComplianceTemplate IsoComplianceTemplate_MIN = Nothing;
const IsoComplianceTemplate IsoComplianceTemplate_MAX = mouthClosedBestPractice;
const int IsoComplianceTemplate_ARRAYSIZE = IsoComplianceTemplate_MAX + 1;

const ::google::protobuf::EnumDescriptor* IsoComplianceTemplate_descriptor();
inline const ::std::string& IsoComplianceTemplate_Name(IsoComplianceTemplate value) {
  return ::google::protobuf::internal::NameOfEnum(
    IsoComplianceTemplate_descriptor(), value);
}
inline bool IsoComplianceTemplate_Parse(
    const ::std::string& name, IsoComplianceTemplate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IsoComplianceTemplate>(
    IsoComplianceTemplate_descriptor(), name, value);
}
enum ImageFormat {
  JPEG = 0,
  JPEG2000 = 1,
  PNG = 2,
  BMP = 3,
  PGM = 4,
  GRAYSCALE_8BIT = 5,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = JPEG;
const ImageFormat ImageFormat_MAX = GRAYSCALE_8BIT;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor();
inline const ::std::string& ImageFormat_Name(ImageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageFormat_descriptor(), value);
}
inline bool ImageFormat_Parse(
    const ::std::string& name, ImageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum EntityState {
  Unchanged = 0,
  Added = 1,
  Modified = 2,
  Deleted = 3,
  EntityState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntityState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntityState_IsValid(int value);
const EntityState EntityState_MIN = Unchanged;
const EntityState EntityState_MAX = Deleted;
const int EntityState_ARRAYSIZE = EntityState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityState_descriptor();
inline const ::std::string& EntityState_Name(EntityState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityState_descriptor(), value);
}
inline bool EntityState_Parse(
    const ::std::string& name, EntityState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityState>(
    EntityState_descriptor(), name, value);
}
enum Finger {
  Any = 0,
  RightThumb = 1,
  LeftThumb = 2,
  RightIndex = 3,
  LeftIndex = 4,
  RightMiddle = 5,
  LeftMiddle = 6,
  RightRing = 7,
  LeftRing = 8,
  RightLittle = 9,
  LeftLittle = 10,
  Finger_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Finger_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Finger_IsValid(int value);
const Finger Finger_MIN = Any;
const Finger Finger_MAX = LeftLittle;
const int Finger_ARRAYSIZE = Finger_MAX + 1;

const ::google::protobuf::EnumDescriptor* Finger_descriptor();
inline const ::std::string& Finger_Name(Finger value) {
  return ::google::protobuf::internal::NameOfEnum(
    Finger_descriptor(), value);
}
inline bool Finger_Parse(
    const ::std::string& name, Finger* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Finger>(
    Finger_descriptor(), name, value);
}
enum EyeType {
  NoneEye = 0,
  Left = 1,
  Right = 2,
  Both = 3,
  EyeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EyeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EyeType_IsValid(int value);
const EyeType EyeType_MIN = NoneEye;
const EyeType EyeType_MAX = Both;
const int EyeType_ARRAYSIZE = EyeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EyeType_descriptor();
inline const ::std::string& EyeType_Name(EyeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EyeType_descriptor(), value);
}
inline bool EyeType_Parse(
    const ::std::string& name, EyeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EyeType>(
    EyeType_descriptor(), name, value);
}
enum AccessState {
  NoneState = 0,
  Access = 1,
  Deny = 2,
  AccessState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AccessState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AccessState_IsValid(int value);
const AccessState AccessState_MIN = NoneState;
const AccessState AccessState_MAX = Deny;
const int AccessState_ARRAYSIZE = AccessState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessState_descriptor();
inline const ::std::string& AccessState_Name(AccessState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessState_descriptor(), value);
}
inline bool AccessState_Parse(
    const ::std::string& name, AccessState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessState>(
    AccessState_descriptor(), name, value);
}
enum BiometricDataType {
  NoneType = 0,
  Facial = 1,
  Fingerprint = 2,
  Iris = 3,
  All = 4,
  BiometricDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BiometricDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BiometricDataType_IsValid(int value);
const BiometricDataType BiometricDataType_MIN = NoneType;
const BiometricDataType BiometricDataType_MAX = All;
const int BiometricDataType_ARRAYSIZE = BiometricDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BiometricDataType_descriptor();
inline const ::std::string& BiometricDataType_Name(BiometricDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BiometricDataType_descriptor(), value);
}
inline bool BiometricDataType_Parse(
    const ::std::string& name, BiometricDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BiometricDataType>(
    BiometricDataType_descriptor(), name, value);
}
// ===================================================================

class ServiceException : public ::google::protobuf::Message {
 public:
  ServiceException();
  virtual ~ServiceException();

  ServiceException(const ServiceException& from);

  inline ServiceException& operator=(const ServiceException& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceException& default_instance();

  void Swap(ServiceException* other);

  // implements Message ----------------------------------------------

  inline ServiceException* New() const { return New(NULL); }

  ServiceException* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceException& from);
  void MergeFrom(const ServiceException& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceException* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_ok = 1;
  void clear_is_ok();
  static const int kIsOkFieldNumber = 1;
  bool is_ok() const;
  void set_is_ok(bool value);

  // optional int64 error_id = 2;
  void clear_error_id();
  static const int kErrorIdFieldNumber = 2;
  ::google::protobuf::int64 error_id() const;
  void set_error_id(::google::protobuf::int64 value);

  // optional string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BioService.ServiceException)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 error_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool is_ok_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ServiceException* default_instance_;
};
// -------------------------------------------------------------------

class PopulationCreationResponse : public ::google::protobuf::Message {
 public:
  PopulationCreationResponse();
  virtual ~PopulationCreationResponse();

  PopulationCreationResponse(const PopulationCreationResponse& from);

  inline PopulationCreationResponse& operator=(const PopulationCreationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PopulationCreationResponse& default_instance();

  void Swap(PopulationCreationResponse* other);

  // implements Message ----------------------------------------------

  inline PopulationCreationResponse* New() const { return New(NULL); }

  PopulationCreationResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PopulationCreationResponse& from);
  void MergeFrom(const PopulationCreationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PopulationCreationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  int portrait_size() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 2;
  const ::BioService::PortraitCharacteristic& portrait(int index) const;
  ::BioService::PortraitCharacteristic* mutable_portrait(int index);
  ::BioService::PortraitCharacteristic* add_portrait();
  ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
      mutable_portrait();
  const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
      portrait() const;

  // optional .BioService.ServiceException exception = 3;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 3;
  const ::BioService::ServiceException& exception() const;
  ::BioService::ServiceException* mutable_exception();
  ::BioService::ServiceException* release_exception();
  void set_allocated_exception(::BioService::ServiceException* exception);

  // @@protoc_insertion_point(class_scope:BioService.PopulationCreationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic > portrait_;
  ::BioService::ServiceException* exception_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PopulationCreationResponse* default_instance_;
};
// -------------------------------------------------------------------

class AcquisitionResponse : public ::google::protobuf::Message {
 public:
  AcquisitionResponse();
  virtual ~AcquisitionResponse();

  AcquisitionResponse(const AcquisitionResponse& from);

  inline AcquisitionResponse& operator=(const AcquisitionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcquisitionResponse& default_instance();

  void Swap(AcquisitionResponse* other);

  // implements Message ----------------------------------------------

  inline AcquisitionResponse* New() const { return New(NULL); }

  AcquisitionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcquisitionResponse& from);
  void MergeFrom(const AcquisitionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AcquisitionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.PortraitCharacteristic portrait = 1;
  bool has_portrait() const;
  void clear_portrait();
  static const int kPortraitFieldNumber = 1;
  const ::BioService::PortraitCharacteristic& portrait() const;
  ::BioService::PortraitCharacteristic* mutable_portrait();
  ::BioService::PortraitCharacteristic* release_portrait();
  void set_allocated_portrait(::BioService::PortraitCharacteristic* portrait);

  // optional .BioService.ServiceException exception = 2;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 2;
  const ::BioService::ServiceException& exception() const;
  ::BioService::ServiceException* mutable_exception();
  ::BioService::ServiceException* release_exception();
  void set_allocated_exception(::BioService::ServiceException* exception);

  // @@protoc_insertion_point(class_scope:BioService.AcquisitionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::PortraitCharacteristic* portrait_;
  ::BioService::ServiceException* exception_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AcquisitionResponse* default_instance_;
};
// -------------------------------------------------------------------

class EntityIds : public ::google::protobuf::Message {
 public:
  EntityIds();
  virtual ~EntityIds();

  EntityIds(const EntityIds& from);

  inline EntityIds& operator=(const EntityIds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityIds& default_instance();

  void Swap(EntityIds* other);

  // implements Message ----------------------------------------------

  inline EntityIds* New() const { return New(NULL); }

  EntityIds* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityIds& from);
  void MergeFrom(const EntityIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:BioService.EntityIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  mutable int _ids_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EntityIds* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string first_name = 2;
  void clear_first_name();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& first_name() const;
  void set_first_name(const ::std::string& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  ::std::string* mutable_first_name();
  ::std::string* release_first_name();
  void set_allocated_first_name(::std::string* first_name);

  // optional string last_name = 3;
  void clear_last_name();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& last_name() const;
  void set_last_name(const ::std::string& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  ::std::string* mutable_last_name();
  ::std::string* release_last_name();
  void set_allocated_last_name(::std::string* last_name);

  // optional .BioService.Photo thumbnail = 4;
  bool has_thumbnail() const;
  void clear_thumbnail();
  static const int kThumbnailFieldNumber = 4;
  const ::BioService::Photo& thumbnail() const;
  ::BioService::Photo* mutable_thumbnail();
  ::BioService::Photo* release_thumbnail();
  void set_allocated_thumbnail(::BioService::Photo* thumbnail);

  // repeated .BioService.Card cards = 5;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 5;
  const ::BioService::Card& cards(int index) const;
  ::BioService::Card* mutable_cards(int index);
  ::BioService::Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
      cards() const;

  // repeated .BioService.FaceCharacteristic faces = 6;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 6;
  const ::BioService::FaceCharacteristic& faces(int index) const;
  ::BioService::FaceCharacteristic* mutable_faces(int index);
  ::BioService::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
      faces() const;

  // @@protoc_insertion_point(class_scope:BioService.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr first_name_;
  ::google::protobuf::internal::ArenaStringPtr last_name_;
  ::BioService::Photo* thumbnail_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Card > cards_;
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic > faces_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class PersonResponse : public ::google::protobuf::Message {
 public:
  PersonResponse();
  virtual ~PersonResponse();

  PersonResponse(const PersonResponse& from);

  inline PersonResponse& operator=(const PersonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonResponse& default_instance();

  void Swap(PersonResponse* other);

  // implements Message ----------------------------------------------

  inline PersonResponse* New() const { return New(NULL); }

  PersonResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonResponse& from);
  void MergeFrom(const PersonResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Person person = 1;
  bool has_person() const;
  void clear_person();
  static const int kPersonFieldNumber = 1;
  const ::BioService::Person& person() const;
  ::BioService::Person* mutable_person();
  ::BioService::Person* release_person();
  void set_allocated_person(::BioService::Person* person);

  // optional .BioService.ServiceException exception = 2;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 2;
  const ::BioService::ServiceException& exception() const;
  ::BioService::ServiceException* mutable_exception();
  ::BioService::ServiceException* release_exception();
  void set_allocated_exception(::BioService::ServiceException* exception);

  // @@protoc_insertion_point(class_scope:BioService.PersonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Person* person_;
  ::BioService::ServiceException* exception_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PersonResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccessDevice : public ::google::protobuf::Message {
 public:
  AccessDevice();
  virtual ~AccessDevice();

  AccessDevice(const AccessDevice& from);

  inline AccessDevice& operator=(const AccessDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessDevice& default_instance();

  void Swap(AccessDevice* other);

  // implements Message ----------------------------------------------

  inline AccessDevice* New() const { return New(NULL); }

  AccessDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessDevice& from);
  void MergeFrom(const AccessDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_name = 1;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:BioService.AccessDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AccessDevice* default_instance_;
};
// -------------------------------------------------------------------

class CaptureDevice : public ::google::protobuf::Message {
 public:
  CaptureDevice();
  virtual ~CaptureDevice();

  CaptureDevice(const CaptureDevice& from);

  inline CaptureDevice& operator=(const CaptureDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptureDevice& default_instance();

  void Swap(CaptureDevice* other);

  // implements Message ----------------------------------------------

  inline CaptureDevice* New() const { return New(NULL); }

  CaptureDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaptureDevice& from);
  void MergeFrom(const CaptureDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptureDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_name = 1;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:BioService.CaptureDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CaptureDevice* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintDevice : public ::google::protobuf::Message {
 public:
  FingerprintDevice();
  virtual ~FingerprintDevice();

  FingerprintDevice(const FingerprintDevice& from);

  inline FingerprintDevice& operator=(const FingerprintDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintDevice& default_instance();

  void Swap(FingerprintDevice* other);

  // implements Message ----------------------------------------------

  inline FingerprintDevice* New() const { return New(NULL); }

  FingerprintDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintDevice& from);
  void MergeFrom(const FingerprintDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_name = 1;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintDevice* default_instance_;
};
// -------------------------------------------------------------------

class IrisDevice : public ::google::protobuf::Message {
 public:
  IrisDevice();
  virtual ~IrisDevice();

  IrisDevice(const IrisDevice& from);

  inline IrisDevice& operator=(const IrisDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IrisDevice& default_instance();

  void Swap(IrisDevice* other);

  // implements Message ----------------------------------------------

  inline IrisDevice* New() const { return New(NULL); }

  IrisDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IrisDevice& from);
  void MergeFrom(const IrisDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IrisDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_name = 1;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:BioService.IrisDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static IrisDevice* default_instance_;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string unique_identifier = 2;
  void clear_unique_identifier();
  static const int kUniqueIdentifierFieldNumber = 2;
  const ::std::string& unique_identifier() const;
  void set_unique_identifier(const ::std::string& value);
  void set_unique_identifier(const char* value);
  void set_unique_identifier(const char* value, size_t size);
  ::std::string* mutable_unique_identifier();
  ::std::string* release_unique_identifier();
  void set_allocated_unique_identifier(::std::string* unique_identifier);

  // @@protoc_insertion_point(class_scope:BioService.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr unique_identifier_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string location_name = 2;
  void clear_location_name();
  static const int kLocationNameFieldNumber = 2;
  const ::std::string& location_name() const;
  void set_location_name(const ::std::string& value);
  void set_location_name(const char* value);
  void set_location_name(const char* value, size_t size);
  ::std::string* mutable_location_name();
  ::std::string* release_location_name();
  void set_allocated_location_name(::std::string* location_name);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string mac_address = 4;
  void clear_mac_address();
  static const int kMacAddressFieldNumber = 4;
  const ::std::string& mac_address() const;
  void set_mac_address(const ::std::string& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  ::std::string* mutable_mac_address();
  ::std::string* release_mac_address();
  void set_allocated_mac_address(::std::string* mac_address);

  // optional .BioService.CaptureDevice capture_device = 5;
  bool has_capture_device() const;
  void clear_capture_device();
  static const int kCaptureDeviceFieldNumber = 5;
  const ::BioService::CaptureDevice& capture_device() const;
  ::BioService::CaptureDevice* mutable_capture_device();
  ::BioService::CaptureDevice* release_capture_device();
  void set_allocated_capture_device(::BioService::CaptureDevice* capture_device);

  // optional .BioService.AccessDevice access_device = 6;
  bool has_access_device() const;
  void clear_access_device();
  static const int kAccessDeviceFieldNumber = 6;
  const ::BioService::AccessDevice& access_device() const;
  ::BioService::AccessDevice* mutable_access_device();
  ::BioService::AccessDevice* release_access_device();
  void set_allocated_access_device(::BioService::AccessDevice* access_device);

  // optional .BioService.FingerprintDevice fingerprint_device = 7;
  bool has_fingerprint_device() const;
  void clear_fingerprint_device();
  static const int kFingerprintDeviceFieldNumber = 7;
  const ::BioService::FingerprintDevice& fingerprint_device() const;
  ::BioService::FingerprintDevice* mutable_fingerprint_device();
  ::BioService::FingerprintDevice* release_fingerprint_device();
  void set_allocated_fingerprint_device(::BioService::FingerprintDevice* fingerprint_device);

  // optional .BioService.IrisDevice iris_device = 8;
  bool has_iris_device() const;
  void clear_iris_device();
  static const int kIrisDeviceFieldNumber = 8;
  const ::BioService::IrisDevice& iris_device() const;
  ::BioService::IrisDevice* mutable_iris_device();
  ::BioService::IrisDevice* release_iris_device();
  void set_allocated_iris_device(::BioService::IrisDevice* iris_device);

  // @@protoc_insertion_point(class_scope:BioService.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr location_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr mac_address_;
  ::BioService::CaptureDevice* capture_device_;
  ::BioService::AccessDevice* access_device_;
  ::BioService::FingerprintDevice* fingerprint_device_;
  ::BioService::IrisDevice* iris_device_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class PortraitCharacteristic : public ::google::protobuf::Message {
 public:
  PortraitCharacteristic();
  virtual ~PortraitCharacteristic();

  PortraitCharacteristic(const PortraitCharacteristic& from);

  inline PortraitCharacteristic& operator=(const PortraitCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PortraitCharacteristic& default_instance();

  void Swap(PortraitCharacteristic* other);

  // implements Message ----------------------------------------------

  inline PortraitCharacteristic* New() const { return New(NULL); }

  PortraitCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PortraitCharacteristic& from);
  void MergeFrom(const PortraitCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PortraitCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.FaceCharacteristic Faces = 1;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 1;
  const ::BioService::FaceCharacteristic& faces(int index) const;
  ::BioService::FaceCharacteristic* mutable_faces(int index);
  ::BioService::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
      faces() const;

  // @@protoc_insertion_point(class_scope:BioService.PortraitCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic > faces_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PortraitCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class FaceCharacteristic : public ::google::protobuf::Message {
 public:
  FaceCharacteristic();
  virtual ~FaceCharacteristic();

  FaceCharacteristic(const FaceCharacteristic& from);

  inline FaceCharacteristic& operator=(const FaceCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceCharacteristic& default_instance();

  void Swap(FaceCharacteristic* other);

  // implements Message ----------------------------------------------

  inline FaceCharacteristic* New() const { return New(NULL); }

  FaceCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceCharacteristic& from);
  void MergeFrom(const FaceCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .BioService.Box box = 2;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 2;
  const ::BioService::Box& box() const;
  ::BioService::Box* mutable_box();
  ::BioService::Box* release_box();
  void set_allocated_box(::BioService::Box* box);

  // optional float confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // optional int64 person_id = 4;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 4;
  ::google::protobuf::int64 person_id() const;
  void set_person_id(::google::protobuf::int64 value);

  // optional int64 photo_id = 5;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 5;
  ::google::protobuf::int64 photo_id() const;
  void set_photo_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.FaceCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::BioService::Box* box_;
  ::google::protobuf::int64 person_id_;
  ::google::protobuf::int64 photo_id_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FaceCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  inline Position* New() const { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BioService.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class Box : public ::google::protobuf::Message {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box& default_instance();

  void Swap(Box* other);

  // implements Message ----------------------------------------------

  inline Box* New() const { return New(NULL); }

  Box* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Box* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Position begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  const ::BioService::Position& begin() const;
  ::BioService::Position* mutable_begin();
  ::BioService::Position* release_begin();
  void set_allocated_begin(::BioService::Position* begin);

  // optional int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BioService.Box)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Position* begin_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Box* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintCharacteristic : public ::google::protobuf::Message {
 public:
  FingerprintCharacteristic();
  virtual ~FingerprintCharacteristic();

  FingerprintCharacteristic(const FingerprintCharacteristic& from);

  inline FingerprintCharacteristic& operator=(const FingerprintCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintCharacteristic& default_instance();

  void Swap(FingerprintCharacteristic* other);

  // implements Message ----------------------------------------------

  inline FingerprintCharacteristic* New() const { return New(NULL); }

  FingerprintCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintCharacteristic& from);
  void MergeFrom(const FingerprintCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .BioService.Finger position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::BioService::Finger position() const;
  void set_position(::BioService::Finger value);

  // optional sfixed32 minutiaes_count = 3;
  void clear_minutiaes_count();
  static const int kMinutiaesCountFieldNumber = 3;
  ::google::protobuf::int32 minutiaes_count() const;
  void set_minutiaes_count(::google::protobuf::int32 value);

  // optional int64 person_id = 4;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 4;
  ::google::protobuf::int64 person_id() const;
  void set_person_id(::google::protobuf::int64 value);

  // optional int64 photo_id = 5;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 5;
  ::google::protobuf::int64 photo_id() const;
  void set_photo_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  int position_;
  ::google::protobuf::int32 minutiaes_count_;
  ::google::protobuf::int64 person_id_;
  ::google::protobuf::int64 photo_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class Photo : public ::google::protobuf::Message {
 public:
  Photo();
  virtual ~Photo();

  Photo(const Photo& from);

  inline Photo& operator=(const Photo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Photo& default_instance();

  void Swap(Photo* other);

  // implements Message ----------------------------------------------

  inline Photo* New() const { return New(NULL); }

  Photo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Photo& from);
  void MergeFrom(const Photo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Photo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string photo_url = 2;
  void clear_photo_url();
  static const int kPhotoUrlFieldNumber = 2;
  const ::std::string& photo_url() const;
  void set_photo_url(const ::std::string& value);
  void set_photo_url(const char* value);
  void set_photo_url(const char* value, size_t size);
  ::std::string* mutable_photo_url();
  ::std::string* release_photo_url();
  void set_allocated_photo_url(::std::string* photo_url);

  // optional bytes bytestring = 3;
  void clear_bytestring();
  static const int kBytestringFieldNumber = 3;
  const ::std::string& bytestring() const;
  void set_bytestring(const ::std::string& value);
  void set_bytestring(const char* value);
  void set_bytestring(const void* value, size_t size);
  ::std::string* mutable_bytestring();
  ::std::string* release_bytestring();
  void set_allocated_bytestring(::std::string* bytestring);

  // optional int32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional .BioService.BiometricDataType biotype = 6;
  void clear_biotype();
  static const int kBiotypeFieldNumber = 6;
  ::BioService::BiometricDataType biotype() const;
  void set_biotype(::BioService::BiometricDataType value);

  // optional int64 owner_id = 7;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 7;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.Photo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr photo_url_;
  ::google::protobuf::internal::ArenaStringPtr bytestring_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int64 owner_id_;
  int biotype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Photo* default_instance_;
};
// -------------------------------------------------------------------

class Visitor : public ::google::protobuf::Message {
 public:
  Visitor();
  virtual ~Visitor();

  Visitor(const Visitor& from);

  inline Visitor& operator=(const Visitor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Visitor& default_instance();

  void Swap(Visitor* other);

  // implements Message ----------------------------------------------

  inline Visitor* New() const { return New(NULL); }

  Visitor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Visitor& from);
  void MergeFrom(const Visitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Visitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 person_id = 2;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 2;
  ::google::protobuf::int64 person_id() const;
  void set_person_id(::google::protobuf::int64 value);

  // optional int64 location_id = 3;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 3;
  ::google::protobuf::int64 location_id() const;
  void set_location_id(::google::protobuf::int64 value);

  // optional int64 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional string card_number = 5;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 5;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // optional .BioService.AccessState status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::BioService::AccessState status() const;
  void set_status(::BioService::AccessState value);

  // @@protoc_insertion_point(class_scope:BioService.Visitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 person_id_;
  ::google::protobuf::int64 location_id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Visitor* default_instance_;
};
// -------------------------------------------------------------------

class VisitorList : public ::google::protobuf::Message {
 public:
  VisitorList();
  virtual ~VisitorList();

  VisitorList(const VisitorList& from);

  inline VisitorList& operator=(const VisitorList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisitorList& default_instance();

  void Swap(VisitorList* other);

  // implements Message ----------------------------------------------

  inline VisitorList* New() const { return New(NULL); }

  VisitorList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisitorList& from);
  void MergeFrom(const VisitorList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisitorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Visitor visitors = 1;
  int visitors_size() const;
  void clear_visitors();
  static const int kVisitorsFieldNumber = 1;
  const ::BioService::Visitor& visitors(int index) const;
  ::BioService::Visitor* mutable_visitors(int index);
  ::BioService::Visitor* add_visitors();
  ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >*
      mutable_visitors();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >&
      visitors() const;

  // @@protoc_insertion_point(class_scope:BioService.VisitorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Visitor > visitors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VisitorList* default_instance_;
};
// -------------------------------------------------------------------

class LocationList : public ::google::protobuf::Message {
 public:
  LocationList();
  virtual ~LocationList();

  LocationList(const LocationList& from);

  inline LocationList& operator=(const LocationList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationList& default_instance();

  void Swap(LocationList* other);

  // implements Message ----------------------------------------------

  inline LocationList* New() const { return New(NULL); }

  LocationList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationList& from);
  void MergeFrom(const LocationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Location locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  const ::BioService::Location& locations(int index) const;
  ::BioService::Location* mutable_locations(int index);
  ::BioService::Location* add_locations();
  ::google::protobuf::RepeatedPtrField< ::BioService::Location >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Location >&
      locations() const;

  // @@protoc_insertion_point(class_scope:BioService.LocationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Location > locations_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static LocationList* default_instance_;
};
// -------------------------------------------------------------------

class PersonList : public ::google::protobuf::Message {
 public:
  PersonList();
  virtual ~PersonList();

  PersonList(const PersonList& from);

  inline PersonList& operator=(const PersonList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonList& default_instance();

  void Swap(PersonList* other);

  // implements Message ----------------------------------------------

  inline PersonList* New() const { return New(NULL); }

  PersonList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonList& from);
  void MergeFrom(const PersonList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersonList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Person persons = 1;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 1;
  const ::BioService::Person& persons(int index) const;
  ::BioService::Person* mutable_persons(int index);
  ::BioService::Person* add_persons();
  ::google::protobuf::RepeatedPtrField< ::BioService::Person >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:BioService.PersonList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Person > persons_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PersonList* default_instance_;
};
// -------------------------------------------------------------------

class PhotoList : public ::google::protobuf::Message {
 public:
  PhotoList();
  virtual ~PhotoList();

  PhotoList(const PhotoList& from);

  inline PhotoList& operator=(const PhotoList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoList& default_instance();

  void Swap(PhotoList* other);

  // implements Message ----------------------------------------------

  inline PhotoList* New() const { return New(NULL); }

  PhotoList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoList& from);
  void MergeFrom(const PhotoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Photo photos = 1;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 1;
  const ::BioService::Photo& photos(int index) const;
  ::BioService::Photo* mutable_photos(int index);
  ::BioService::Photo* add_photos();
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
      mutable_photos();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
      photos() const;

  // @@protoc_insertion_point(class_scope:BioService.PhotoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo > photos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PhotoList* default_instance_;
};
// -------------------------------------------------------------------

class CardList : public ::google::protobuf::Message {
 public:
  CardList();
  virtual ~CardList();

  CardList(const CardList& from);

  inline CardList& operator=(const CardList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardList& default_instance();

  void Swap(CardList* other);

  // implements Message ----------------------------------------------

  inline CardList* New() const { return New(NULL); }

  CardList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardList& from);
  void MergeFrom(const CardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CardList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Card cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  const ::BioService::Card& cards(int index) const;
  ::BioService::Card* mutable_cards(int index);
  ::BioService::Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:BioService.CardList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Card > cards_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CardList* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool good = 1;
  void clear_good();
  static const int kGoodFieldNumber = 1;
  bool good() const;
  void set_good(bool value);

  // @@protoc_insertion_point(class_scope:BioService.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool good_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class VerificationData : public ::google::protobuf::Message {
 public:
  VerificationData();
  virtual ~VerificationData();

  VerificationData(const VerificationData& from);

  inline VerificationData& operator=(const VerificationData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerificationData& default_instance();

  void Swap(VerificationData* other);

  // implements Message ----------------------------------------------

  inline VerificationData* New() const { return New(NULL); }

  VerificationData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerificationData& from);
  void MergeFrom(const VerificationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VerificationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Photo target_image = 1;
  bool has_target_image() const;
  void clear_target_image();
  static const int kTargetImageFieldNumber = 1;
  const ::BioService::Photo& target_image() const;
  ::BioService::Photo* mutable_target_image();
  ::BioService::Photo* release_target_image();
  void set_allocated_target_image(::BioService::Photo* target_image);

  // optional .BioService.Photo comparison_image = 2;
  bool has_comparison_image() const;
  void clear_comparison_image();
  static const int kComparisonImageFieldNumber = 2;
  const ::BioService::Photo& comparison_image() const;
  ::BioService::Photo* mutable_comparison_image();
  ::BioService::Photo* release_comparison_image();
  void set_allocated_comparison_image(::BioService::Photo* comparison_image);

  // optional int64 comparison_person_id = 3;
  void clear_comparison_person_id();
  static const int kComparisonPersonIdFieldNumber = 3;
  ::google::protobuf::int64 comparison_person_id() const;
  void set_comparison_person_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.VerificationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Photo* target_image_;
  ::BioService::Photo* comparison_image_;
  ::google::protobuf::int64 comparison_person_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VerificationData* default_instance_;
};
// -------------------------------------------------------------------

class IdentificationData : public ::google::protobuf::Message {
 public:
  IdentificationData();
  virtual ~IdentificationData();

  IdentificationData(const IdentificationData& from);

  inline IdentificationData& operator=(const IdentificationData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentificationData& default_instance();

  void Swap(IdentificationData* other);

  // implements Message ----------------------------------------------

  inline IdentificationData* New() const { return New(NULL); }

  IdentificationData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentificationData& from);
  void MergeFrom(const IdentificationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IdentificationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Photo target_image = 1;
  bool has_target_image() const;
  void clear_target_image();
  static const int kTargetImageFieldNumber = 1;
  const ::BioService::Photo& target_image() const;
  ::BioService::Photo* mutable_target_image();
  ::BioService::Photo* release_target_image();
  void set_allocated_target_image(::BioService::Photo* target_image);

  // optional int64 population_id = 2;
  void clear_population_id();
  static const int kPopulationIdFieldNumber = 2;
  ::google::protobuf::int64 population_id() const;
  void set_population_id(::google::protobuf::int64 value);

  // repeated .BioService.Photo comparison_images = 3;
  int comparison_images_size() const;
  void clear_comparison_images();
  static const int kComparisonImagesFieldNumber = 3;
  const ::BioService::Photo& comparison_images(int index) const;
  ::BioService::Photo* mutable_comparison_images(int index);
  ::BioService::Photo* add_comparison_images();
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
      mutable_comparison_images();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
      comparison_images() const;

  // @@protoc_insertion_point(class_scope:BioService.IdentificationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Photo* target_image_;
  ::google::protobuf::int64 population_id_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo > comparison_images_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static IdentificationData* default_instance_;
};
// -------------------------------------------------------------------

class Match : public ::google::protobuf::Message {
 public:
  Match();
  virtual ~Match();

  Match(const Match& from);

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match& default_instance();

  void Swap(Match* other);

  // implements Message ----------------------------------------------

  inline Match* New() const { return New(NULL); }

  Match* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Match* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 face_id = 2;
  void clear_face_id();
  static const int kFaceIdFieldNumber = 2;
  ::google::protobuf::int64 face_id() const;
  void set_face_id(::google::protobuf::int64 value);

  // optional float match = 3;
  void clear_match();
  static const int kMatchFieldNumber = 3;
  float match() const;
  void set_match(float value);

  // @@protoc_insertion_point(class_scope:BioService.Match)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 face_id_;
  float match_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Match* default_instance_;
};
// -------------------------------------------------------------------

class Matches : public ::google::protobuf::Message {
 public:
  Matches();
  virtual ~Matches();

  Matches(const Matches& from);

  inline Matches& operator=(const Matches& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matches& default_instance();

  void Swap(Matches* other);

  // implements Message ----------------------------------------------

  inline Matches* New() const { return New(NULL); }

  Matches* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matches& from);
  void MergeFrom(const Matches& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Matches* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 face_id = 1;
  void clear_face_id();
  static const int kFaceIdFieldNumber = 1;
  ::google::protobuf::int64 face_id() const;
  void set_face_id(::google::protobuf::int64 value);

  // repeated .BioService.Match matches = 2;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 2;
  const ::BioService::Match& matches(int index) const;
  ::BioService::Match* mutable_matches(int index);
  ::BioService::Match* add_matches();
  ::google::protobuf::RepeatedPtrField< ::BioService::Match >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Match >&
      matches() const;

  // @@protoc_insertion_point(class_scope:BioService.Matches)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 face_id_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Match > matches_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Matches* default_instance_;
};
// -------------------------------------------------------------------

class FaceSearchResponse : public ::google::protobuf::Message {
 public:
  FaceSearchResponse();
  virtual ~FaceSearchResponse();

  FaceSearchResponse(const FaceSearchResponse& from);

  inline FaceSearchResponse& operator=(const FaceSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceSearchResponse& default_instance();

  void Swap(FaceSearchResponse* other);

  // implements Message ----------------------------------------------

  inline FaceSearchResponse* New() const { return New(NULL); }

  FaceSearchResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceSearchResponse& from);
  void MergeFrom(const FaceSearchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceSearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.PortraitCharacteristic portraits = 1;
  int portraits_size() const;
  void clear_portraits();
  static const int kPortraitsFieldNumber = 1;
  const ::BioService::PortraitCharacteristic& portraits(int index) const;
  ::BioService::PortraitCharacteristic* mutable_portraits(int index);
  ::BioService::PortraitCharacteristic* add_portraits();
  ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
      mutable_portraits();
  const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
      portraits() const;

  // repeated .BioService.Matches matches = 2;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 2;
  const ::BioService::Matches& matches(int index) const;
  ::BioService::Matches* mutable_matches(int index);
  ::BioService::Matches* add_matches();
  ::google::protobuf::RepeatedPtrField< ::BioService::Matches >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Matches >&
      matches() const;

  // optional string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .BioService.ServiceException exception = 4;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 4;
  const ::BioService::ServiceException& exception() const;
  ::BioService::ServiceException* mutable_exception();
  ::BioService::ServiceException* release_exception();
  void set_allocated_exception(::BioService::ServiceException* exception);

  // @@protoc_insertion_point(class_scope:BioService.FaceSearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic > portraits_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Matches > matches_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::BioService::ServiceException* exception_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FaceSearchResponse* default_instance_;
};
// -------------------------------------------------------------------

class AcquiredData : public ::google::protobuf::Message {
 public:
  AcquiredData();
  virtual ~AcquiredData();

  AcquiredData(const AcquiredData& from);

  inline AcquiredData& operator=(const AcquiredData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcquiredData& default_instance();

  void Swap(AcquiredData* other);

  // implements Message ----------------------------------------------

  inline AcquiredData* New() const { return New(NULL); }

  AcquiredData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcquiredData& from);
  void MergeFrom(const AcquiredData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AcquiredData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Photo image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::BioService::Photo& image() const;
  ::BioService::Photo* mutable_image();
  ::BioService::Photo* release_image();
  void set_allocated_image(::BioService::Photo* image);

  // optional int64 owner_id = 2;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.AcquiredData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Photo* image_;
  ::google::protobuf::int64 owner_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AcquiredData* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintAcquiredData : public ::google::protobuf::Message {
 public:
  FingerprintAcquiredData();
  virtual ~FingerprintAcquiredData();

  FingerprintAcquiredData(const FingerprintAcquiredData& from);

  inline FingerprintAcquiredData& operator=(const FingerprintAcquiredData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintAcquiredData& default_instance();

  void Swap(FingerprintAcquiredData* other);

  // implements Message ----------------------------------------------

  inline FingerprintAcquiredData* New() const { return New(NULL); }

  FingerprintAcquiredData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintAcquiredData& from);
  void MergeFrom(const FingerprintAcquiredData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintAcquiredData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.AcquiredData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::BioService::AcquiredData& data() const;
  ::BioService::AcquiredData* mutable_data();
  ::BioService::AcquiredData* release_data();
  void set_allocated_data(::BioService::AcquiredData* data);

  // optional .BioService.Finger position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::BioService::Finger position() const;
  void set_position(::BioService::Finger value);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintAcquiredData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::AcquiredData* data_;
  int position_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintAcquiredData* default_instance_;
};
// -------------------------------------------------------------------

class EnrollmentFeedback : public ::google::protobuf::Message {
 public:
  EnrollmentFeedback();
  virtual ~EnrollmentFeedback();

  EnrollmentFeedback(const EnrollmentFeedback& from);

  inline EnrollmentFeedback& operator=(const EnrollmentFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnrollmentFeedback& default_instance();

  void Swap(EnrollmentFeedback* other);

  // implements Message ----------------------------------------------

  inline EnrollmentFeedback* New() const { return New(NULL); }

  EnrollmentFeedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnrollmentFeedback& from);
  void MergeFrom(const EnrollmentFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnrollmentFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 characteristic_id = 1;
  void clear_characteristic_id();
  static const int kCharacteristicIdFieldNumber = 1;
  ::google::protobuf::int64 characteristic_id() const;
  void set_characteristic_id(::google::protobuf::int64 value);

  // optional int64 photo_id = 2;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 2;
  ::google::protobuf::int64 photo_id() const;
  void set_photo_id(::google::protobuf::int64 value);

  // optional sfixed32 quality = 3;
  void clear_quality();
  static const int kQualityFieldNumber = 3;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // optional .BioService.ServiceException Exception = 4;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 4;
  const ::BioService::ServiceException& exception() const;
  ::BioService::ServiceException* mutable_exception();
  ::BioService::ServiceException* release_exception();
  void set_allocated_exception(::BioService::ServiceException* exception);

  // optional sfixed32 progress = 5;
  void clear_progress();
  static const int kProgressFieldNumber = 5;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // optional string message = 6;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BioService.EnrollmentFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 characteristic_id_;
  ::google::protobuf::int64 photo_id_;
  ::BioService::ServiceException* exception_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 progress_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EnrollmentFeedback* default_instance_;
};
// -------------------------------------------------------------------

class VerificationFeedback : public ::google::protobuf::Message {
 public:
  VerificationFeedback();
  virtual ~VerificationFeedback();

  VerificationFeedback(const VerificationFeedback& from);

  inline VerificationFeedback& operator=(const VerificationFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerificationFeedback& default_instance();

  void Swap(VerificationFeedback* other);

  // implements Message ----------------------------------------------

  inline VerificationFeedback* New() const { return New(NULL); }

  VerificationFeedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerificationFeedback& from);
  void MergeFrom(const VerificationFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VerificationFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  bool has_enrollment_feedback() const;
  void clear_enrollment_feedback();
  static const int kEnrollmentFeedbackFieldNumber = 1;
  const ::BioService::EnrollmentFeedback& enrollment_feedback() const;
  ::BioService::EnrollmentFeedback* mutable_enrollment_feedback();
  ::BioService::EnrollmentFeedback* release_enrollment_feedback();
  void set_allocated_enrollment_feedback(::BioService::EnrollmentFeedback* enrollment_feedback);

  // optional float match = 2;
  void clear_match();
  static const int kMatchFieldNumber = 2;
  float match() const;
  void set_match(float value);

  // @@protoc_insertion_point(class_scope:BioService.VerificationFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::EnrollmentFeedback* enrollment_feedback_;
  float match_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VerificationFeedback* default_instance_;
};
// -------------------------------------------------------------------

class GetPhotoRequest : public ::google::protobuf::Message {
 public:
  GetPhotoRequest();
  virtual ~GetPhotoRequest();

  GetPhotoRequest(const GetPhotoRequest& from);

  inline GetPhotoRequest& operator=(const GetPhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoRequest& default_instance();

  void Swap(GetPhotoRequest* other);

  // implements Message ----------------------------------------------

  inline GetPhotoRequest* New() const { return New(NULL); }

  GetPhotoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPhotoRequest& from);
  void MergeFrom(const GetPhotoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPhotoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetPhotoRequest_PhotoResponseType PhotoResponseType;
  static const PhotoResponseType Undefined =
    GetPhotoRequest_PhotoResponseType_Undefined;
  static const PhotoResponseType Full =
    GetPhotoRequest_PhotoResponseType_Full;
  static const PhotoResponseType OnlyBytes =
    GetPhotoRequest_PhotoResponseType_OnlyBytes;
  static const PhotoResponseType NoBytes =
    GetPhotoRequest_PhotoResponseType_NoBytes;
  static inline bool PhotoResponseType_IsValid(int value) {
    return GetPhotoRequest_PhotoResponseType_IsValid(value);
  }
  static const PhotoResponseType PhotoResponseType_MIN =
    GetPhotoRequest_PhotoResponseType_PhotoResponseType_MIN;
  static const PhotoResponseType PhotoResponseType_MAX =
    GetPhotoRequest_PhotoResponseType_PhotoResponseType_MAX;
  static const int PhotoResponseType_ARRAYSIZE =
    GetPhotoRequest_PhotoResponseType_PhotoResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhotoResponseType_descriptor() {
    return GetPhotoRequest_PhotoResponseType_descriptor();
  }
  static inline const ::std::string& PhotoResponseType_Name(PhotoResponseType value) {
    return GetPhotoRequest_PhotoResponseType_Name(value);
  }
  static inline bool PhotoResponseType_Parse(const ::std::string& name,
      PhotoResponseType* value) {
    return GetPhotoRequest_PhotoResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
  void clear_with_bytes();
  static const int kWithBytesFieldNumber = 1;
  ::BioService::GetPhotoRequest_PhotoResponseType with_bytes() const;
  void set_with_bytes(::BioService::GetPhotoRequest_PhotoResponseType value);

  // repeated int64 persons = 2;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 2;
  ::google::protobuf::int64 persons(int index) const;
  void set_persons(int index, ::google::protobuf::int64 value);
  void add_persons(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      persons() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_persons();

  // repeated int64 photos = 3;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 3;
  ::google::protobuf::int64 photos(int index) const;
  void set_photos(int index, ::google::protobuf::int64 value);
  void add_photos(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      photos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_photos();

  // optional int64 items_per_page = 4;
  void clear_items_per_page();
  static const int kItemsPerPageFieldNumber = 4;
  ::google::protobuf::int64 items_per_page() const;
  void set_items_per_page(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.GetPhotoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > persons_;
  mutable int _persons_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > photos_;
  mutable int _photos_cached_byte_size_;
  ::google::protobuf::int64 items_per_page_;
  int with_bytes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetPhotoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPersonRequest : public ::google::protobuf::Message {
 public:
  GetPersonRequest();
  virtual ~GetPersonRequest();

  GetPersonRequest(const GetPersonRequest& from);

  inline GetPersonRequest& operator=(const GetPersonRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPersonRequest& default_instance();

  void Swap(GetPersonRequest* other);

  // implements Message ----------------------------------------------

  inline GetPersonRequest* New() const { return New(NULL); }

  GetPersonRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPersonRequest& from);
  void MergeFrom(const GetPersonRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPersonRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // optional int64 items_per_page = 2;
  void clear_items_per_page();
  static const int kItemsPerPageFieldNumber = 2;
  ::google::protobuf::int64 items_per_page() const;
  void set_items_per_page(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.GetPersonRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  mutable int _ids_cached_byte_size_;
  ::google::protobuf::int64 items_per_page_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetPersonRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetLocationRequest : public ::google::protobuf::Message {
 public:
  GetLocationRequest();
  virtual ~GetLocationRequest();

  GetLocationRequest(const GetLocationRequest& from);

  inline GetLocationRequest& operator=(const GetLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocationRequest& default_instance();

  void Swap(GetLocationRequest* other);

  // implements Message ----------------------------------------------

  inline GetLocationRequest* New() const { return New(NULL); }

  GetLocationRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLocationRequest& from);
  void MergeFrom(const GetLocationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.GetLocationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetLocationRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetVisitorRequest : public ::google::protobuf::Message {
 public:
  GetVisitorRequest();
  virtual ~GetVisitorRequest();

  GetVisitorRequest(const GetVisitorRequest& from);

  inline GetVisitorRequest& operator=(const GetVisitorRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVisitorRequest& default_instance();

  void Swap(GetVisitorRequest* other);

  // implements Message ----------------------------------------------

  inline GetVisitorRequest* New() const { return New(NULL); }

  GetVisitorRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetVisitorRequest& from);
  void MergeFrom(const GetVisitorRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetVisitorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string countries = 2;
  int countries_size() const;
  void clear_countries();
  static const int kCountriesFieldNumber = 2;
  const ::std::string& countries(int index) const;
  ::std::string* mutable_countries(int index);
  void set_countries(int index, const ::std::string& value);
  void set_countries(int index, const char* value);
  void set_countries(int index, const char* value, size_t size);
  ::std::string* add_countries();
  void add_countries(const ::std::string& value);
  void add_countries(const char* value);
  void add_countries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& countries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_countries();

  // repeated int64 locations = 3;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 3;
  ::google::protobuf::int64 locations(int index) const;
  void set_locations(int index, ::google::protobuf::int64 value);
  void add_locations(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      locations() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_locations();

  // repeated int64 persons = 4;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 4;
  ::google::protobuf::int64 persons(int index) const;
  void set_persons(int index, ::google::protobuf::int64 value);
  void add_persons(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      persons() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_persons();

  // optional int64 datetime_from = 5;
  void clear_datetime_from();
  static const int kDatetimeFromFieldNumber = 5;
  ::google::protobuf::int64 datetime_from() const;
  void set_datetime_from(::google::protobuf::int64 value);

  // optional int64 datetime_to = 6;
  void clear_datetime_to();
  static const int kDatetimeToFieldNumber = 6;
  ::google::protobuf::int64 datetime_to() const;
  void set_datetime_to(::google::protobuf::int64 value);

  // optional int64 items_per_page = 7;
  void clear_items_per_page();
  static const int kItemsPerPageFieldNumber = 7;
  ::google::protobuf::int64 items_per_page() const;
  void set_items_per_page(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.GetVisitorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> countries_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > locations_;
  mutable int _locations_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > persons_;
  mutable int _persons_cached_byte_size_;
  ::google::protobuf::int64 datetime_from_;
  ::google::protobuf::int64 datetime_to_;
  ::google::protobuf::int64 items_per_page_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetVisitorRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogRecord : public ::google::protobuf::Message {
 public:
  LogRecord();
  virtual ~LogRecord();

  LogRecord(const LogRecord& from);

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord& default_instance();

  void Swap(LogRecord* other);

  // implements Message ----------------------------------------------

  inline LogRecord* New() const { return New(NULL); }

  LogRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.MessageType message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::BioService::MessageType message_type() const;
  void set_message_type(::BioService::MessageType value);

  // optional int64 detected_time = 2;
  void clear_detected_time();
  static const int kDetectedTimeFieldNumber = 2;
  ::google::protobuf::int64 detected_time() const;
  void set_detected_time(::google::protobuf::int64 value);

  // optional string exception_message = 3;
  void clear_exception_message();
  static const int kExceptionMessageFieldNumber = 3;
  const ::std::string& exception_message() const;
  void set_exception_message(const ::std::string& value);
  void set_exception_message(const char* value);
  void set_exception_message(const char* value, size_t size);
  ::std::string* mutable_exception_message();
  ::std::string* release_exception_message();
  void set_allocated_exception_message(::std::string* exception_message);

  // optional string class_name = 4;
  void clear_class_name();
  static const int kClassNameFieldNumber = 4;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // optional string function_name = 5;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 5;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // optional int64 line_number = 6;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 6;
  ::google::protobuf::int64 line_number() const;
  void set_line_number(::google::protobuf::int64 value);

  // optional string comment = 7;
  void clear_comment();
  static const int kCommentFieldNumber = 7;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:BioService.LogRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 detected_time_;
  ::google::protobuf::internal::ArenaStringPtr exception_message_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::int64 line_number_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  int message_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static LogRecord* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceException

// optional bool is_ok = 1;
inline void ServiceException::clear_is_ok() {
  is_ok_ = false;
}
inline bool ServiceException::is_ok() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.is_ok)
  return is_ok_;
}
inline void ServiceException::set_is_ok(bool value) {
  
  is_ok_ = value;
  // @@protoc_insertion_point(field_set:BioService.ServiceException.is_ok)
}

// optional int64 error_id = 2;
inline void ServiceException::clear_error_id() {
  error_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ServiceException::error_id() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.error_id)
  return error_id_;
}
inline void ServiceException::set_error_id(::google::protobuf::int64 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.ServiceException.error_id)
}

// optional string message = 3;
inline void ServiceException::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceException::message() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceException::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.ServiceException.message)
}
inline void ServiceException::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.ServiceException.message)
}
inline void ServiceException::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.ServiceException.message)
}
inline ::std::string* ServiceException::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.ServiceException.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceException::release_message() {
  // @@protoc_insertion_point(field_release:BioService.ServiceException.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceException::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.ServiceException.message)
}

// -------------------------------------------------------------------

// PopulationCreationResponse

// optional int64 id = 1;
inline void PopulationCreationResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PopulationCreationResponse::id() const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.id)
  return id_;
}
inline void PopulationCreationResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.PopulationCreationResponse.id)
}

// repeated .BioService.PortraitCharacteristic portrait = 2;
inline int PopulationCreationResponse::portrait_size() const {
  return portrait_.size();
}
inline void PopulationCreationResponse::clear_portrait() {
  portrait_.Clear();
}
inline const ::BioService::PortraitCharacteristic& PopulationCreationResponse::portrait(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.portrait)
  return portrait_.Get(index);
}
inline ::BioService::PortraitCharacteristic* PopulationCreationResponse::mutable_portrait(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PopulationCreationResponse.portrait)
  return portrait_.Mutable(index);
}
inline ::BioService::PortraitCharacteristic* PopulationCreationResponse::add_portrait() {
  // @@protoc_insertion_point(field_add:BioService.PopulationCreationResponse.portrait)
  return portrait_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
PopulationCreationResponse::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PopulationCreationResponse.portrait)
  return &portrait_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
PopulationCreationResponse::portrait() const {
  // @@protoc_insertion_point(field_list:BioService.PopulationCreationResponse.portrait)
  return portrait_;
}

// optional .BioService.ServiceException exception = 3;
inline bool PopulationCreationResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
inline void PopulationCreationResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
inline const ::BioService::ServiceException& PopulationCreationResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::BioService::ServiceException* PopulationCreationResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PopulationCreationResponse.exception)
  return exception_;
}
inline ::BioService::ServiceException* PopulationCreationResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.PopulationCreationResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void PopulationCreationResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PopulationCreationResponse.exception)
}

// -------------------------------------------------------------------

// AcquisitionResponse

// optional .BioService.PortraitCharacteristic portrait = 1;
inline bool AcquisitionResponse::has_portrait() const {
  return !_is_default_instance_ && portrait_ != NULL;
}
inline void AcquisitionResponse::clear_portrait() {
  if (GetArenaNoVirtual() == NULL && portrait_ != NULL) delete portrait_;
  portrait_ = NULL;
}
inline const ::BioService::PortraitCharacteristic& AcquisitionResponse::portrait() const {
  // @@protoc_insertion_point(field_get:BioService.AcquisitionResponse.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
inline ::BioService::PortraitCharacteristic* AcquisitionResponse::mutable_portrait() {
  
  if (portrait_ == NULL) {
    portrait_ = new ::BioService::PortraitCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquisitionResponse.portrait)
  return portrait_;
}
inline ::BioService::PortraitCharacteristic* AcquisitionResponse::release_portrait() {
  // @@protoc_insertion_point(field_release:BioService.AcquisitionResponse.portrait)
  
  ::BioService::PortraitCharacteristic* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
inline void AcquisitionResponse::set_allocated_portrait(::BioService::PortraitCharacteristic* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquisitionResponse.portrait)
}

// optional .BioService.ServiceException exception = 2;
inline bool AcquisitionResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
inline void AcquisitionResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
inline const ::BioService::ServiceException& AcquisitionResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.AcquisitionResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::BioService::ServiceException* AcquisitionResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquisitionResponse.exception)
  return exception_;
}
inline ::BioService::ServiceException* AcquisitionResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.AcquisitionResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void AcquisitionResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquisitionResponse.exception)
}

// -------------------------------------------------------------------

// EntityIds

// repeated int64 ids = 1;
inline int EntityIds::ids_size() const {
  return ids_.size();
}
inline void EntityIds::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 EntityIds::ids(int index) const {
  // @@protoc_insertion_point(field_get:BioService.EntityIds.ids)
  return ids_.Get(index);
}
inline void EntityIds::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.EntityIds.ids)
}
inline void EntityIds::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.EntityIds.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EntityIds::ids() const {
  // @@protoc_insertion_point(field_list:BioService.EntityIds.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EntityIds::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:BioService.EntityIds.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// Person

// optional int64 id = 1;
inline void Person::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Person::id() const {
  // @@protoc_insertion_point(field_get:BioService.Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.id)
}

// optional string first_name = 2;
inline void Person::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::first_name() const {
  // @@protoc_insertion_point(field_get:BioService.Person.first_name)
  return first_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_first_name(const ::std::string& value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.first_name)
}
inline void Person::set_first_name(const char* value) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.first_name)
}
inline void Person::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.first_name)
}
inline ::std::string* Person::mutable_first_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_first_name() {
  // @@protoc_insertion_point(field_release:BioService.Person.first_name)
  
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.first_name)
}

// optional string last_name = 3;
inline void Person::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::last_name() const {
  // @@protoc_insertion_point(field_get:BioService.Person.last_name)
  return last_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_last_name(const ::std::string& value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.last_name)
}
inline void Person::set_last_name(const char* value) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.last_name)
}
inline void Person::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.last_name)
}
inline ::std::string* Person::mutable_last_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_last_name() {
  // @@protoc_insertion_point(field_release:BioService.Person.last_name)
  
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.last_name)
}

// optional .BioService.Photo thumbnail = 4;
inline bool Person::has_thumbnail() const {
  return !_is_default_instance_ && thumbnail_ != NULL;
}
inline void Person::clear_thumbnail() {
  if (GetArenaNoVirtual() == NULL && thumbnail_ != NULL) delete thumbnail_;
  thumbnail_ = NULL;
}
inline const ::BioService::Photo& Person::thumbnail() const {
  // @@protoc_insertion_point(field_get:BioService.Person.thumbnail)
  return thumbnail_ != NULL ? *thumbnail_ : *default_instance_->thumbnail_;
}
inline ::BioService::Photo* Person::mutable_thumbnail() {
  
  if (thumbnail_ == NULL) {
    thumbnail_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.thumbnail)
  return thumbnail_;
}
inline ::BioService::Photo* Person::release_thumbnail() {
  // @@protoc_insertion_point(field_release:BioService.Person.thumbnail)
  
  ::BioService::Photo* temp = thumbnail_;
  thumbnail_ = NULL;
  return temp;
}
inline void Person::set_allocated_thumbnail(::BioService::Photo* thumbnail) {
  delete thumbnail_;
  thumbnail_ = thumbnail;
  if (thumbnail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.thumbnail)
}

// repeated .BioService.Card cards = 5;
inline int Person::cards_size() const {
  return cards_.size();
}
inline void Person::clear_cards() {
  cards_.Clear();
}
inline const ::BioService::Card& Person::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.cards)
  return cards_.Get(index);
}
inline ::BioService::Card* Person::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.cards)
  return cards_.Mutable(index);
}
inline ::BioService::Card* Person::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.Person.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
Person::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
Person::cards() const {
  // @@protoc_insertion_point(field_list:BioService.Person.cards)
  return cards_;
}

// repeated .BioService.FaceCharacteristic faces = 6;
inline int Person::faces_size() const {
  return faces_.size();
}
inline void Person::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::FaceCharacteristic& Person::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.faces)
  return faces_.Get(index);
}
inline ::BioService::FaceCharacteristic* Person::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.faces)
  return faces_.Mutable(index);
}
inline ::BioService::FaceCharacteristic* Person::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.Person.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
Person::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
Person::faces() const {
  // @@protoc_insertion_point(field_list:BioService.Person.faces)
  return faces_;
}

// -------------------------------------------------------------------

// PersonResponse

// optional .BioService.Person person = 1;
inline bool PersonResponse::has_person() const {
  return !_is_default_instance_ && person_ != NULL;
}
inline void PersonResponse::clear_person() {
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
}
inline const ::BioService::Person& PersonResponse::person() const {
  // @@protoc_insertion_point(field_get:BioService.PersonResponse.person)
  return person_ != NULL ? *person_ : *default_instance_->person_;
}
inline ::BioService::Person* PersonResponse::mutable_person() {
  
  if (person_ == NULL) {
    person_ = new ::BioService::Person;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PersonResponse.person)
  return person_;
}
inline ::BioService::Person* PersonResponse::release_person() {
  // @@protoc_insertion_point(field_release:BioService.PersonResponse.person)
  
  ::BioService::Person* temp = person_;
  person_ = NULL;
  return temp;
}
inline void PersonResponse::set_allocated_person(::BioService::Person* person) {
  delete person_;
  person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PersonResponse.person)
}

// optional .BioService.ServiceException exception = 2;
inline bool PersonResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
inline void PersonResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
inline const ::BioService::ServiceException& PersonResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.PersonResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::BioService::ServiceException* PersonResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PersonResponse.exception)
  return exception_;
}
inline ::BioService::ServiceException* PersonResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.PersonResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void PersonResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PersonResponse.exception)
}

// -------------------------------------------------------------------

// AccessDevice

// optional string device_name = 1;
inline void AccessDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.device_name)
}
inline void AccessDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.AccessDevice.device_name)
}
inline void AccessDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.AccessDevice.device_name)
}
inline ::std::string* AccessDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.AccessDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.AccessDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.AccessDevice.device_name)
}

// -------------------------------------------------------------------

// CaptureDevice

// optional string device_name = 1;
inline void CaptureDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaptureDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptureDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.device_name)
}
inline void CaptureDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.CaptureDevice.device_name)
}
inline void CaptureDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.CaptureDevice.device_name)
}
inline ::std::string* CaptureDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.CaptureDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaptureDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.CaptureDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptureDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.CaptureDevice.device_name)
}

// -------------------------------------------------------------------

// FingerprintDevice

// optional string device_name = 1;
inline void FingerprintDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FingerprintDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FingerprintDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.device_name)
}
inline void FingerprintDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintDevice.device_name)
}
inline void FingerprintDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintDevice.device_name)
}
inline ::std::string* FingerprintDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FingerprintDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FingerprintDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.device_name)
}

// -------------------------------------------------------------------

// IrisDevice

// optional string device_name = 1;
inline void IrisDevice::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IrisDevice::device_name() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IrisDevice::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.device_name)
}
inline void IrisDevice::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.IrisDevice.device_name)
}
inline void IrisDevice::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.IrisDevice.device_name)
}
inline ::std::string* IrisDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IrisDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:BioService.IrisDevice.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IrisDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.device_name)
}

// -------------------------------------------------------------------

// Card

// optional int64 id = 1;
inline void Card::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Card::id() const {
  // @@protoc_insertion_point(field_get:BioService.Card.id)
  return id_;
}
inline void Card::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.id)
}

// optional string unique_identifier = 2;
inline void Card::clear_unique_identifier() {
  unique_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::unique_identifier() const {
  // @@protoc_insertion_point(field_get:BioService.Card.unique_identifier)
  return unique_identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_unique_identifier(const ::std::string& value) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Card.unique_identifier)
}
inline void Card::set_unique_identifier(const char* value) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Card.unique_identifier)
}
inline void Card::set_unique_identifier(const char* value, size_t size) {
  
  unique_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Card.unique_identifier)
}
inline ::std::string* Card::mutable_unique_identifier() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Card.unique_identifier)
  return unique_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:BioService.Card.unique_identifier)
  
  return unique_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_unique_identifier(::std::string* unique_identifier) {
  if (unique_identifier != NULL) {
    
  } else {
    
  }
  unique_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_identifier);
  // @@protoc_insertion_point(field_set_allocated:BioService.Card.unique_identifier)
}

// -------------------------------------------------------------------

// Location

// optional int64 id = 1;
inline void Location::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Location::id() const {
  // @@protoc_insertion_point(field_get:BioService.Location.id)
  return id_;
}
inline void Location::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.id)
}

// optional string location_name = 2;
inline void Location::clear_location_name() {
  location_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::location_name() const {
  // @@protoc_insertion_point(field_get:BioService.Location.location_name)
  return location_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_location_name(const ::std::string& value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.location_name)
}
inline void Location::set_location_name(const char* value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.location_name)
}
inline void Location::set_location_name(const char* value, size_t size) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.location_name)
}
inline ::std::string* Location::mutable_location_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.location_name)
  return location_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_location_name() {
  // @@protoc_insertion_point(field_release:BioService.Location.location_name)
  
  return location_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_location_name(::std::string* location_name) {
  if (location_name != NULL) {
    
  } else {
    
  }
  location_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.location_name)
}

// optional string description = 3;
inline void Location::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::description() const {
  // @@protoc_insertion_point(field_get:BioService.Location.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.description)
}
inline void Location::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.description)
}
inline void Location::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.description)
}
inline ::std::string* Location::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_description() {
  // @@protoc_insertion_point(field_release:BioService.Location.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.description)
}

// optional string mac_address = 4;
inline void Location::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::mac_address() const {
  // @@protoc_insertion_point(field_get:BioService.Location.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.mac_address)
}
inline void Location::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.mac_address)
}
inline void Location::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.mac_address)
}
inline ::std::string* Location::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_mac_address() {
  // @@protoc_insertion_point(field_release:BioService.Location.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.mac_address)
}

// optional .BioService.CaptureDevice capture_device = 5;
inline bool Location::has_capture_device() const {
  return !_is_default_instance_ && capture_device_ != NULL;
}
inline void Location::clear_capture_device() {
  if (GetArenaNoVirtual() == NULL && capture_device_ != NULL) delete capture_device_;
  capture_device_ = NULL;
}
inline const ::BioService::CaptureDevice& Location::capture_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.capture_device)
  return capture_device_ != NULL ? *capture_device_ : *default_instance_->capture_device_;
}
inline ::BioService::CaptureDevice* Location::mutable_capture_device() {
  
  if (capture_device_ == NULL) {
    capture_device_ = new ::BioService::CaptureDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.capture_device)
  return capture_device_;
}
inline ::BioService::CaptureDevice* Location::release_capture_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.capture_device)
  
  ::BioService::CaptureDevice* temp = capture_device_;
  capture_device_ = NULL;
  return temp;
}
inline void Location::set_allocated_capture_device(::BioService::CaptureDevice* capture_device) {
  delete capture_device_;
  capture_device_ = capture_device;
  if (capture_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.capture_device)
}

// optional .BioService.AccessDevice access_device = 6;
inline bool Location::has_access_device() const {
  return !_is_default_instance_ && access_device_ != NULL;
}
inline void Location::clear_access_device() {
  if (GetArenaNoVirtual() == NULL && access_device_ != NULL) delete access_device_;
  access_device_ = NULL;
}
inline const ::BioService::AccessDevice& Location::access_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.access_device)
  return access_device_ != NULL ? *access_device_ : *default_instance_->access_device_;
}
inline ::BioService::AccessDevice* Location::mutable_access_device() {
  
  if (access_device_ == NULL) {
    access_device_ = new ::BioService::AccessDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.access_device)
  return access_device_;
}
inline ::BioService::AccessDevice* Location::release_access_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.access_device)
  
  ::BioService::AccessDevice* temp = access_device_;
  access_device_ = NULL;
  return temp;
}
inline void Location::set_allocated_access_device(::BioService::AccessDevice* access_device) {
  delete access_device_;
  access_device_ = access_device;
  if (access_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.access_device)
}

// optional .BioService.FingerprintDevice fingerprint_device = 7;
inline bool Location::has_fingerprint_device() const {
  return !_is_default_instance_ && fingerprint_device_ != NULL;
}
inline void Location::clear_fingerprint_device() {
  if (GetArenaNoVirtual() == NULL && fingerprint_device_ != NULL) delete fingerprint_device_;
  fingerprint_device_ = NULL;
}
inline const ::BioService::FingerprintDevice& Location::fingerprint_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.fingerprint_device)
  return fingerprint_device_ != NULL ? *fingerprint_device_ : *default_instance_->fingerprint_device_;
}
inline ::BioService::FingerprintDevice* Location::mutable_fingerprint_device() {
  
  if (fingerprint_device_ == NULL) {
    fingerprint_device_ = new ::BioService::FingerprintDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.fingerprint_device)
  return fingerprint_device_;
}
inline ::BioService::FingerprintDevice* Location::release_fingerprint_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.fingerprint_device)
  
  ::BioService::FingerprintDevice* temp = fingerprint_device_;
  fingerprint_device_ = NULL;
  return temp;
}
inline void Location::set_allocated_fingerprint_device(::BioService::FingerprintDevice* fingerprint_device) {
  delete fingerprint_device_;
  fingerprint_device_ = fingerprint_device;
  if (fingerprint_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.fingerprint_device)
}

// optional .BioService.IrisDevice iris_device = 8;
inline bool Location::has_iris_device() const {
  return !_is_default_instance_ && iris_device_ != NULL;
}
inline void Location::clear_iris_device() {
  if (GetArenaNoVirtual() == NULL && iris_device_ != NULL) delete iris_device_;
  iris_device_ = NULL;
}
inline const ::BioService::IrisDevice& Location::iris_device() const {
  // @@protoc_insertion_point(field_get:BioService.Location.iris_device)
  return iris_device_ != NULL ? *iris_device_ : *default_instance_->iris_device_;
}
inline ::BioService::IrisDevice* Location::mutable_iris_device() {
  
  if (iris_device_ == NULL) {
    iris_device_ = new ::BioService::IrisDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.iris_device)
  return iris_device_;
}
inline ::BioService::IrisDevice* Location::release_iris_device() {
  // @@protoc_insertion_point(field_release:BioService.Location.iris_device)
  
  ::BioService::IrisDevice* temp = iris_device_;
  iris_device_ = NULL;
  return temp;
}
inline void Location::set_allocated_iris_device(::BioService::IrisDevice* iris_device) {
  delete iris_device_;
  iris_device_ = iris_device;
  if (iris_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.iris_device)
}

// -------------------------------------------------------------------

// PortraitCharacteristic

// repeated .BioService.FaceCharacteristic Faces = 1;
inline int PortraitCharacteristic::faces_size() const {
  return faces_.size();
}
inline void PortraitCharacteristic::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::FaceCharacteristic& PortraitCharacteristic::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PortraitCharacteristic.Faces)
  return faces_.Get(index);
}
inline ::BioService::FaceCharacteristic* PortraitCharacteristic::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PortraitCharacteristic.Faces)
  return faces_.Mutable(index);
}
inline ::BioService::FaceCharacteristic* PortraitCharacteristic::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.PortraitCharacteristic.Faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
PortraitCharacteristic::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PortraitCharacteristic.Faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
PortraitCharacteristic::faces() const {
  // @@protoc_insertion_point(field_list:BioService.PortraitCharacteristic.Faces)
  return faces_;
}

// -------------------------------------------------------------------

// FaceCharacteristic

// optional int64 id = 1;
inline void FaceCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FaceCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.id)
  return id_;
}
inline void FaceCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.id)
}

// optional .BioService.Box box = 2;
inline bool FaceCharacteristic::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
inline void FaceCharacteristic::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
inline const ::BioService::Box& FaceCharacteristic::box() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::BioService::Box* FaceCharacteristic::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::BioService::Box;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.box)
  return box_;
}
inline ::BioService::Box* FaceCharacteristic::release_box() {
  // @@protoc_insertion_point(field_release:BioService.FaceCharacteristic.box)
  
  ::BioService::Box* temp = box_;
  box_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_box(::BioService::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.box)
}

// optional float confidence = 3;
inline void FaceCharacteristic::clear_confidence() {
  confidence_ = 0;
}
inline float FaceCharacteristic::confidence() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.confidence)
  return confidence_;
}
inline void FaceCharacteristic::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.confidence)
}

// optional int64 person_id = 4;
inline void FaceCharacteristic::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FaceCharacteristic::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.person_id)
  return person_id_;
}
inline void FaceCharacteristic::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.person_id)
}

// optional int64 photo_id = 5;
inline void FaceCharacteristic::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FaceCharacteristic::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.photo_id)
  return photo_id_;
}
inline void FaceCharacteristic::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.photo_id)
}

// -------------------------------------------------------------------

// Position

// optional int32 x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:BioService.Position.x)
  return x_;
}
inline void Position::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:BioService.Position.x)
}

// optional int32 y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:BioService.Position.y)
  return y_;
}
inline void Position::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:BioService.Position.y)
}

// -------------------------------------------------------------------

// Box

// optional .BioService.Position begin = 1;
inline bool Box::has_begin() const {
  return !_is_default_instance_ && begin_ != NULL;
}
inline void Box::clear_begin() {
  if (GetArenaNoVirtual() == NULL && begin_ != NULL) delete begin_;
  begin_ = NULL;
}
inline const ::BioService::Position& Box::begin() const {
  // @@protoc_insertion_point(field_get:BioService.Box.begin)
  return begin_ != NULL ? *begin_ : *default_instance_->begin_;
}
inline ::BioService::Position* Box::mutable_begin() {
  
  if (begin_ == NULL) {
    begin_ = new ::BioService::Position;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Box.begin)
  return begin_;
}
inline ::BioService::Position* Box::release_begin() {
  // @@protoc_insertion_point(field_release:BioService.Box.begin)
  
  ::BioService::Position* temp = begin_;
  begin_ = NULL;
  return temp;
}
inline void Box::set_allocated_begin(::BioService::Position* begin) {
  delete begin_;
  begin_ = begin;
  if (begin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Box.begin)
}

// optional int32 width = 2;
inline void Box::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Box::width() const {
  // @@protoc_insertion_point(field_get:BioService.Box.width)
  return width_;
}
inline void Box::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.Box.width)
}

// optional int32 height = 3;
inline void Box::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Box::height() const {
  // @@protoc_insertion_point(field_get:BioService.Box.height)
  return height_;
}
inline void Box::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BioService.Box.height)
}

// -------------------------------------------------------------------

// FingerprintCharacteristic

// optional int64 id = 1;
inline void FingerprintCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.id)
  return id_;
}
inline void FingerprintCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.id)
}

// optional .BioService.Finger position = 2;
inline void FingerprintCharacteristic::clear_position() {
  position_ = 0;
}
inline ::BioService::Finger FingerprintCharacteristic::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.position)
  return static_cast< ::BioService::Finger >(position_);
}
inline void FingerprintCharacteristic::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.position)
}

// optional sfixed32 minutiaes_count = 3;
inline void FingerprintCharacteristic::clear_minutiaes_count() {
  minutiaes_count_ = 0;
}
inline ::google::protobuf::int32 FingerprintCharacteristic::minutiaes_count() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.minutiaes_count)
  return minutiaes_count_;
}
inline void FingerprintCharacteristic::set_minutiaes_count(::google::protobuf::int32 value) {
  
  minutiaes_count_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.minutiaes_count)
}

// optional int64 person_id = 4;
inline void FingerprintCharacteristic::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintCharacteristic::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.person_id)
  return person_id_;
}
inline void FingerprintCharacteristic::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.person_id)
}

// optional int64 photo_id = 5;
inline void FingerprintCharacteristic::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintCharacteristic::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.photo_id)
  return photo_id_;
}
inline void FingerprintCharacteristic::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.photo_id)
}

// -------------------------------------------------------------------

// Photo

// optional int64 id = 1;
inline void Photo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.id)
  return id_;
}
inline void Photo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.id)
}

// optional string photo_url = 2;
inline void Photo::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::photo_url() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.photo_url)
  return photo_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.photo_url)
}
inline void Photo::set_photo_url(const char* value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.photo_url)
}
inline void Photo::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.photo_url)
}
inline ::std::string* Photo::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_photo_url() {
  // @@protoc_insertion_point(field_release:BioService.Photo.photo_url)
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.photo_url)
}

// optional bytes bytestring = 3;
inline void Photo::clear_bytestring() {
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::bytestring() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.bytestring)
  return bytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_bytestring(const ::std::string& value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.bytestring)
}
inline void Photo::set_bytestring(const char* value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.bytestring)
}
inline void Photo::set_bytestring(const void* value, size_t size) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.bytestring)
}
inline ::std::string* Photo::mutable_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.bytestring)
  return bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_bytestring() {
  // @@protoc_insertion_point(field_release:BioService.Photo.bytestring)
  
  return bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_bytestring(::std::string* bytestring) {
  if (bytestring != NULL) {
    
  } else {
    
  }
  bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytestring);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.bytestring)
}

// optional int32 width = 4;
inline void Photo::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Photo::width() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.width)
  return width_;
}
inline void Photo::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.width)
}

// optional int32 height = 5;
inline void Photo::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Photo::height() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.height)
  return height_;
}
inline void Photo::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.height)
}

// optional .BioService.BiometricDataType biotype = 6;
inline void Photo::clear_biotype() {
  biotype_ = 0;
}
inline ::BioService::BiometricDataType Photo::biotype() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.biotype)
  return static_cast< ::BioService::BiometricDataType >(biotype_);
}
inline void Photo::set_biotype(::BioService::BiometricDataType value) {
  
  biotype_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.biotype)
}

// optional int64 owner_id = 7;
inline void Photo::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.owner_id)
  return owner_id_;
}
inline void Photo::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.owner_id)
}

// -------------------------------------------------------------------

// Visitor

// optional int64 id = 1;
inline void Visitor::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.id)
  return id_;
}
inline void Visitor::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.id)
}

// optional int64 person_id = 2;
inline void Visitor::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.person_id)
  return person_id_;
}
inline void Visitor::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.person_id)
}

// optional int64 location_id = 3;
inline void Visitor::clear_location_id() {
  location_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::location_id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.location_id)
  return location_id_;
}
inline void Visitor::set_location_id(::google::protobuf::int64 value) {
  
  location_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.location_id)
}

// optional int64 time = 4;
inline void Visitor::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::time() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.time)
  return time_;
}
inline void Visitor::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.time)
}

// optional string card_number = 5;
inline void Visitor::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Visitor::card_number() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.card_number)
  return card_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visitor::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Visitor.card_number)
}
inline void Visitor::set_card_number(const char* value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Visitor.card_number)
}
inline void Visitor::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Visitor.card_number)
}
inline ::std::string* Visitor::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Visitor::release_card_number() {
  // @@protoc_insertion_point(field_release:BioService.Visitor.card_number)
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visitor::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.card_number)
}

// optional .BioService.AccessState status = 6;
inline void Visitor::clear_status() {
  status_ = 0;
}
inline ::BioService::AccessState Visitor::status() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.status)
  return static_cast< ::BioService::AccessState >(status_);
}
inline void Visitor::set_status(::BioService::AccessState value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.status)
}

// -------------------------------------------------------------------

// VisitorList

// repeated .BioService.Visitor visitors = 1;
inline int VisitorList::visitors_size() const {
  return visitors_.size();
}
inline void VisitorList::clear_visitors() {
  visitors_.Clear();
}
inline const ::BioService::Visitor& VisitorList::visitors(int index) const {
  // @@protoc_insertion_point(field_get:BioService.VisitorList.visitors)
  return visitors_.Get(index);
}
inline ::BioService::Visitor* VisitorList::mutable_visitors(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.VisitorList.visitors)
  return visitors_.Mutable(index);
}
inline ::BioService::Visitor* VisitorList::add_visitors() {
  // @@protoc_insertion_point(field_add:BioService.VisitorList.visitors)
  return visitors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >*
VisitorList::mutable_visitors() {
  // @@protoc_insertion_point(field_mutable_list:BioService.VisitorList.visitors)
  return &visitors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >&
VisitorList::visitors() const {
  // @@protoc_insertion_point(field_list:BioService.VisitorList.visitors)
  return visitors_;
}

// -------------------------------------------------------------------

// LocationList

// repeated .BioService.Location locations = 1;
inline int LocationList::locations_size() const {
  return locations_.size();
}
inline void LocationList::clear_locations() {
  locations_.Clear();
}
inline const ::BioService::Location& LocationList::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.LocationList.locations)
  return locations_.Get(index);
}
inline ::BioService::Location* LocationList::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.LocationList.locations)
  return locations_.Mutable(index);
}
inline ::BioService::Location* LocationList::add_locations() {
  // @@protoc_insertion_point(field_add:BioService.LocationList.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Location >*
LocationList::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.LocationList.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Location >&
LocationList::locations() const {
  // @@protoc_insertion_point(field_list:BioService.LocationList.locations)
  return locations_;
}

// -------------------------------------------------------------------

// PersonList

// repeated .BioService.Person persons = 1;
inline int PersonList::persons_size() const {
  return persons_.size();
}
inline void PersonList::clear_persons() {
  persons_.Clear();
}
inline const ::BioService::Person& PersonList::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PersonList.persons)
  return persons_.Get(index);
}
inline ::BioService::Person* PersonList::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PersonList.persons)
  return persons_.Mutable(index);
}
inline ::BioService::Person* PersonList::add_persons() {
  // @@protoc_insertion_point(field_add:BioService.PersonList.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Person >*
PersonList::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PersonList.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
PersonList::persons() const {
  // @@protoc_insertion_point(field_list:BioService.PersonList.persons)
  return persons_;
}

// -------------------------------------------------------------------

// PhotoList

// repeated .BioService.Photo photos = 1;
inline int PhotoList::photos_size() const {
  return photos_.size();
}
inline void PhotoList::clear_photos() {
  photos_.Clear();
}
inline const ::BioService::Photo& PhotoList::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PhotoList.photos)
  return photos_.Get(index);
}
inline ::BioService::Photo* PhotoList::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PhotoList.photos)
  return photos_.Mutable(index);
}
inline ::BioService::Photo* PhotoList::add_photos() {
  // @@protoc_insertion_point(field_add:BioService.PhotoList.photos)
  return photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
PhotoList::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PhotoList.photos)
  return &photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
PhotoList::photos() const {
  // @@protoc_insertion_point(field_list:BioService.PhotoList.photos)
  return photos_;
}

// -------------------------------------------------------------------

// CardList

// repeated .BioService.Card cards = 1;
inline int CardList::cards_size() const {
  return cards_.size();
}
inline void CardList::clear_cards() {
  cards_.Clear();
}
inline const ::BioService::Card& CardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.CardList.cards)
  return cards_.Get(index);
}
inline ::BioService::Card* CardList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.CardList.cards)
  return cards_.Mutable(index);
}
inline ::BioService::Card* CardList::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.CardList.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
CardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.CardList.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
CardList::cards() const {
  // @@protoc_insertion_point(field_list:BioService.CardList.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Response

// optional bool good = 1;
inline void Response::clear_good() {
  good_ = false;
}
inline bool Response::good() const {
  // @@protoc_insertion_point(field_get:BioService.Response.good)
  return good_;
}
inline void Response::set_good(bool value) {
  
  good_ = value;
  // @@protoc_insertion_point(field_set:BioService.Response.good)
}

// -------------------------------------------------------------------

// VerificationData

// optional .BioService.Photo target_image = 1;
inline bool VerificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
inline void VerificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
inline const ::BioService::Photo& VerificationData::target_image() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
inline ::BioService::Photo* VerificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationData.target_image)
  return target_image_;
}
inline ::BioService::Photo* VerificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:BioService.VerificationData.target_image)
  
  ::BioService::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
inline void VerificationData::set_allocated_target_image(::BioService::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationData.target_image)
}

// optional .BioService.Photo comparison_image = 2;
inline bool VerificationData::has_comparison_image() const {
  return !_is_default_instance_ && comparison_image_ != NULL;
}
inline void VerificationData::clear_comparison_image() {
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
}
inline const ::BioService::Photo& VerificationData::comparison_image() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.comparison_image)
  return comparison_image_ != NULL ? *comparison_image_ : *default_instance_->comparison_image_;
}
inline ::BioService::Photo* VerificationData::mutable_comparison_image() {
  
  if (comparison_image_ == NULL) {
    comparison_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationData.comparison_image)
  return comparison_image_;
}
inline ::BioService::Photo* VerificationData::release_comparison_image() {
  // @@protoc_insertion_point(field_release:BioService.VerificationData.comparison_image)
  
  ::BioService::Photo* temp = comparison_image_;
  comparison_image_ = NULL;
  return temp;
}
inline void VerificationData::set_allocated_comparison_image(::BioService::Photo* comparison_image) {
  delete comparison_image_;
  comparison_image_ = comparison_image;
  if (comparison_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationData.comparison_image)
}

// optional int64 comparison_person_id = 3;
inline void VerificationData::clear_comparison_person_id() {
  comparison_person_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VerificationData::comparison_person_id() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.comparison_person_id)
  return comparison_person_id_;
}
inline void VerificationData::set_comparison_person_id(::google::protobuf::int64 value) {
  
  comparison_person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.VerificationData.comparison_person_id)
}

// -------------------------------------------------------------------

// IdentificationData

// optional .BioService.Photo target_image = 1;
inline bool IdentificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
inline void IdentificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
inline const ::BioService::Photo& IdentificationData::target_image() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
inline ::BioService::Photo* IdentificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.target_image)
  return target_image_;
}
inline ::BioService::Photo* IdentificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:BioService.IdentificationData.target_image)
  
  ::BioService::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
inline void IdentificationData::set_allocated_target_image(::BioService::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.IdentificationData.target_image)
}

// optional int64 population_id = 2;
inline void IdentificationData::clear_population_id() {
  population_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IdentificationData::population_id() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.population_id)
  return population_id_;
}
inline void IdentificationData::set_population_id(::google::protobuf::int64 value) {
  
  population_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.IdentificationData.population_id)
}

// repeated .BioService.Photo comparison_images = 3;
inline int IdentificationData::comparison_images_size() const {
  return comparison_images_.size();
}
inline void IdentificationData::clear_comparison_images() {
  comparison_images_.Clear();
}
inline const ::BioService::Photo& IdentificationData::comparison_images(int index) const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.comparison_images)
  return comparison_images_.Get(index);
}
inline ::BioService::Photo* IdentificationData::mutable_comparison_images(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.comparison_images)
  return comparison_images_.Mutable(index);
}
inline ::BioService::Photo* IdentificationData::add_comparison_images() {
  // @@protoc_insertion_point(field_add:BioService.IdentificationData.comparison_images)
  return comparison_images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
IdentificationData::mutable_comparison_images() {
  // @@protoc_insertion_point(field_mutable_list:BioService.IdentificationData.comparison_images)
  return &comparison_images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
IdentificationData::comparison_images() const {
  // @@protoc_insertion_point(field_list:BioService.IdentificationData.comparison_images)
  return comparison_images_;
}

// -------------------------------------------------------------------

// Match

// optional int64 face_id = 2;
inline void Match::clear_face_id() {
  face_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Match::face_id() const {
  // @@protoc_insertion_point(field_get:BioService.Match.face_id)
  return face_id_;
}
inline void Match::set_face_id(::google::protobuf::int64 value) {
  
  face_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Match.face_id)
}

// optional float match = 3;
inline void Match::clear_match() {
  match_ = 0;
}
inline float Match::match() const {
  // @@protoc_insertion_point(field_get:BioService.Match.match)
  return match_;
}
inline void Match::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.Match.match)
}

// -------------------------------------------------------------------

// Matches

// optional int64 face_id = 1;
inline void Matches::clear_face_id() {
  face_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Matches::face_id() const {
  // @@protoc_insertion_point(field_get:BioService.Matches.face_id)
  return face_id_;
}
inline void Matches::set_face_id(::google::protobuf::int64 value) {
  
  face_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Matches.face_id)
}

// repeated .BioService.Match matches = 2;
inline int Matches::matches_size() const {
  return matches_.size();
}
inline void Matches::clear_matches() {
  matches_.Clear();
}
inline const ::BioService::Match& Matches::matches(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Matches.matches)
  return matches_.Get(index);
}
inline ::BioService::Match* Matches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Matches.matches)
  return matches_.Mutable(index);
}
inline ::BioService::Match* Matches::add_matches() {
  // @@protoc_insertion_point(field_add:BioService.Matches.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Match >*
Matches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Matches.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Match >&
Matches::matches() const {
  // @@protoc_insertion_point(field_list:BioService.Matches.matches)
  return matches_;
}

// -------------------------------------------------------------------

// FaceSearchResponse

// repeated .BioService.PortraitCharacteristic portraits = 1;
inline int FaceSearchResponse::portraits_size() const {
  return portraits_.size();
}
inline void FaceSearchResponse::clear_portraits() {
  portraits_.Clear();
}
inline const ::BioService::PortraitCharacteristic& FaceSearchResponse::portraits(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.portraits)
  return portraits_.Get(index);
}
inline ::BioService::PortraitCharacteristic* FaceSearchResponse::mutable_portraits(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.portraits)
  return portraits_.Mutable(index);
}
inline ::BioService::PortraitCharacteristic* FaceSearchResponse::add_portraits() {
  // @@protoc_insertion_point(field_add:BioService.FaceSearchResponse.portraits)
  return portraits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
FaceSearchResponse::mutable_portraits() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FaceSearchResponse.portraits)
  return &portraits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
FaceSearchResponse::portraits() const {
  // @@protoc_insertion_point(field_list:BioService.FaceSearchResponse.portraits)
  return portraits_;
}

// repeated .BioService.Matches matches = 2;
inline int FaceSearchResponse::matches_size() const {
  return matches_.size();
}
inline void FaceSearchResponse::clear_matches() {
  matches_.Clear();
}
inline const ::BioService::Matches& FaceSearchResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.matches)
  return matches_.Get(index);
}
inline ::BioService::Matches* FaceSearchResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.matches)
  return matches_.Mutable(index);
}
inline ::BioService::Matches* FaceSearchResponse::add_matches() {
  // @@protoc_insertion_point(field_add:BioService.FaceSearchResponse.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Matches >*
FaceSearchResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FaceSearchResponse.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Matches >&
FaceSearchResponse::matches() const {
  // @@protoc_insertion_point(field_list:BioService.FaceSearchResponse.matches)
  return matches_;
}

// optional string message = 3;
inline void FaceSearchResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FaceSearchResponse::message() const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceSearchResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FaceSearchResponse.message)
}
inline void FaceSearchResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FaceSearchResponse.message)
}
inline void FaceSearchResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FaceSearchResponse.message)
}
inline ::std::string* FaceSearchResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceSearchResponse::release_message() {
  // @@protoc_insertion_point(field_release:BioService.FaceSearchResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceSearchResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceSearchResponse.message)
}

// optional .BioService.ServiceException exception = 4;
inline bool FaceSearchResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
inline void FaceSearchResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
inline const ::BioService::ServiceException& FaceSearchResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::BioService::ServiceException* FaceSearchResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.exception)
  return exception_;
}
inline ::BioService::ServiceException* FaceSearchResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FaceSearchResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void FaceSearchResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceSearchResponse.exception)
}

// -------------------------------------------------------------------

// AcquiredData

// optional .BioService.Photo image = 1;
inline bool AcquiredData::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void AcquiredData::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::BioService::Photo& AcquiredData::image() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BioService::Photo* AcquiredData::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquiredData.image)
  return image_;
}
inline ::BioService::Photo* AcquiredData::release_image() {
  // @@protoc_insertion_point(field_release:BioService.AcquiredData.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void AcquiredData::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquiredData.image)
}

// optional int64 owner_id = 2;
inline void AcquiredData::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AcquiredData::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.owner_id)
  return owner_id_;
}
inline void AcquiredData::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.AcquiredData.owner_id)
}

// -------------------------------------------------------------------

// FingerprintAcquiredData

// optional .BioService.AcquiredData data = 1;
inline bool FingerprintAcquiredData::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void FingerprintAcquiredData::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::BioService::AcquiredData& FingerprintAcquiredData::data() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::BioService::AcquiredData* FingerprintAcquiredData::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::BioService::AcquiredData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintAcquiredData.data)
  return data_;
}
inline ::BioService::AcquiredData* FingerprintAcquiredData::release_data() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintAcquiredData.data)
  
  ::BioService::AcquiredData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FingerprintAcquiredData::set_allocated_data(::BioService::AcquiredData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintAcquiredData.data)
}

// optional .BioService.Finger position = 2;
inline void FingerprintAcquiredData::clear_position() {
  position_ = 0;
}
inline ::BioService::Finger FingerprintAcquiredData::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.position)
  return static_cast< ::BioService::Finger >(position_);
}
inline void FingerprintAcquiredData::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintAcquiredData.position)
}

// -------------------------------------------------------------------

// EnrollmentFeedback

// optional int64 characteristic_id = 1;
inline void EnrollmentFeedback::clear_characteristic_id() {
  characteristic_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EnrollmentFeedback::characteristic_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.characteristic_id)
  return characteristic_id_;
}
inline void EnrollmentFeedback::set_characteristic_id(::google::protobuf::int64 value) {
  
  characteristic_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.characteristic_id)
}

// optional int64 photo_id = 2;
inline void EnrollmentFeedback::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EnrollmentFeedback::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.photo_id)
  return photo_id_;
}
inline void EnrollmentFeedback::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.photo_id)
}

// optional sfixed32 quality = 3;
inline void EnrollmentFeedback::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 EnrollmentFeedback::quality() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.quality)
  return quality_;
}
inline void EnrollmentFeedback::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.quality)
}

// optional .BioService.ServiceException Exception = 4;
inline bool EnrollmentFeedback::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
inline void EnrollmentFeedback::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
inline const ::BioService::ServiceException& EnrollmentFeedback::exception() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.Exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::BioService::ServiceException* EnrollmentFeedback::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.Exception)
  return exception_;
}
inline ::BioService::ServiceException* EnrollmentFeedback::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.EnrollmentFeedback.Exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void EnrollmentFeedback::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.Exception)
}

// optional sfixed32 progress = 5;
inline void EnrollmentFeedback::clear_progress() {
  progress_ = 0;
}
inline ::google::protobuf::int32 EnrollmentFeedback::progress() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.progress)
  return progress_;
}
inline void EnrollmentFeedback::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.progress)
}

// optional string message = 6;
inline void EnrollmentFeedback::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnrollmentFeedback::message() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentFeedback::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.message)
}
inline void EnrollmentFeedback::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.EnrollmentFeedback.message)
}
inline void EnrollmentFeedback::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.EnrollmentFeedback.message)
}
inline ::std::string* EnrollmentFeedback::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnrollmentFeedback::release_message() {
  // @@protoc_insertion_point(field_release:BioService.EnrollmentFeedback.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentFeedback::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.message)
}

// -------------------------------------------------------------------

// VerificationFeedback

// optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
inline bool VerificationFeedback::has_enrollment_feedback() const {
  return !_is_default_instance_ && enrollment_feedback_ != NULL;
}
inline void VerificationFeedback::clear_enrollment_feedback() {
  if (GetArenaNoVirtual() == NULL && enrollment_feedback_ != NULL) delete enrollment_feedback_;
  enrollment_feedback_ = NULL;
}
inline const ::BioService::EnrollmentFeedback& VerificationFeedback::enrollment_feedback() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_ != NULL ? *enrollment_feedback_ : *default_instance_->enrollment_feedback_;
}
inline ::BioService::EnrollmentFeedback* VerificationFeedback::mutable_enrollment_feedback() {
  
  if (enrollment_feedback_ == NULL) {
    enrollment_feedback_ = new ::BioService::EnrollmentFeedback;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_;
}
inline ::BioService::EnrollmentFeedback* VerificationFeedback::release_enrollment_feedback() {
  // @@protoc_insertion_point(field_release:BioService.VerificationFeedback.enrollment_feedback)
  
  ::BioService::EnrollmentFeedback* temp = enrollment_feedback_;
  enrollment_feedback_ = NULL;
  return temp;
}
inline void VerificationFeedback::set_allocated_enrollment_feedback(::BioService::EnrollmentFeedback* enrollment_feedback) {
  delete enrollment_feedback_;
  enrollment_feedback_ = enrollment_feedback;
  if (enrollment_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationFeedback.enrollment_feedback)
}

// optional float match = 2;
inline void VerificationFeedback::clear_match() {
  match_ = 0;
}
inline float VerificationFeedback::match() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.match)
  return match_;
}
inline void VerificationFeedback::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.VerificationFeedback.match)
}

// -------------------------------------------------------------------

// GetPhotoRequest

// optional .BioService.GetPhotoRequest.PhotoResponseType with_bytes = 1;
inline void GetPhotoRequest::clear_with_bytes() {
  with_bytes_ = 0;
}
inline ::BioService::GetPhotoRequest_PhotoResponseType GetPhotoRequest::with_bytes() const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.with_bytes)
  return static_cast< ::BioService::GetPhotoRequest_PhotoResponseType >(with_bytes_);
}
inline void GetPhotoRequest::set_with_bytes(::BioService::GetPhotoRequest_PhotoResponseType value) {
  
  with_bytes_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.with_bytes)
}

// repeated int64 persons = 2;
inline int GetPhotoRequest::persons_size() const {
  return persons_.size();
}
inline void GetPhotoRequest::clear_persons() {
  persons_.Clear();
}
inline ::google::protobuf::int64 GetPhotoRequest::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.persons)
  return persons_.Get(index);
}
inline void GetPhotoRequest::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.persons)
}
inline void GetPhotoRequest::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetPhotoRequest.persons)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetPhotoRequest::persons() const {
  // @@protoc_insertion_point(field_list:BioService.GetPhotoRequest.persons)
  return persons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetPhotoRequest::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetPhotoRequest.persons)
  return &persons_;
}

// repeated int64 photos = 3;
inline int GetPhotoRequest::photos_size() const {
  return photos_.size();
}
inline void GetPhotoRequest::clear_photos() {
  photos_.Clear();
}
inline ::google::protobuf::int64 GetPhotoRequest::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.photos)
  return photos_.Get(index);
}
inline void GetPhotoRequest::set_photos(int index, ::google::protobuf::int64 value) {
  photos_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.photos)
}
inline void GetPhotoRequest::add_photos(::google::protobuf::int64 value) {
  photos_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetPhotoRequest.photos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetPhotoRequest::photos() const {
  // @@protoc_insertion_point(field_list:BioService.GetPhotoRequest.photos)
  return photos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetPhotoRequest::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetPhotoRequest.photos)
  return &photos_;
}

// optional int64 items_per_page = 4;
inline void GetPhotoRequest::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetPhotoRequest::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.GetPhotoRequest.items_per_page)
  return items_per_page_;
}
inline void GetPhotoRequest::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetPhotoRequest.items_per_page)
}

// -------------------------------------------------------------------

// GetPersonRequest

// repeated int64 ids = 1;
inline int GetPersonRequest::ids_size() const {
  return ids_.size();
}
inline void GetPersonRequest::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 GetPersonRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetPersonRequest.ids)
  return ids_.Get(index);
}
inline void GetPersonRequest::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetPersonRequest.ids)
}
inline void GetPersonRequest::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetPersonRequest.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetPersonRequest::ids() const {
  // @@protoc_insertion_point(field_list:BioService.GetPersonRequest.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetPersonRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetPersonRequest.ids)
  return &ids_;
}

// optional int64 items_per_page = 2;
inline void GetPersonRequest::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetPersonRequest::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.GetPersonRequest.items_per_page)
  return items_per_page_;
}
inline void GetPersonRequest::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetPersonRequest.items_per_page)
}

// -------------------------------------------------------------------

// GetLocationRequest

// optional int64 count = 1;
inline void GetLocationRequest::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetLocationRequest::count() const {
  // @@protoc_insertion_point(field_get:BioService.GetLocationRequest.count)
  return count_;
}
inline void GetLocationRequest::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetLocationRequest.count)
}

// -------------------------------------------------------------------

// GetVisitorRequest

// repeated string countries = 2;
inline int GetVisitorRequest::countries_size() const {
  return countries_.size();
}
inline void GetVisitorRequest::clear_countries() {
  countries_.Clear();
}
inline const ::std::string& GetVisitorRequest::countries(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.countries)
  return countries_.Get(index);
}
inline ::std::string* GetVisitorRequest::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.GetVisitorRequest.countries)
  return countries_.Mutable(index);
}
inline void GetVisitorRequest::set_countries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.countries)
  countries_.Mutable(index)->assign(value);
}
inline void GetVisitorRequest::set_countries(int index, const char* value) {
  countries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BioService.GetVisitorRequest.countries)
}
inline void GetVisitorRequest::set_countries(int index, const char* value, size_t size) {
  countries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BioService.GetVisitorRequest.countries)
}
inline ::std::string* GetVisitorRequest::add_countries() {
  // @@protoc_insertion_point(field_add_mutable:BioService.GetVisitorRequest.countries)
  return countries_.Add();
}
inline void GetVisitorRequest::add_countries(const ::std::string& value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BioService.GetVisitorRequest.countries)
}
inline void GetVisitorRequest::add_countries(const char* value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BioService.GetVisitorRequest.countries)
}
inline void GetVisitorRequest::add_countries(const char* value, size_t size) {
  countries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BioService.GetVisitorRequest.countries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetVisitorRequest::countries() const {
  // @@protoc_insertion_point(field_list:BioService.GetVisitorRequest.countries)
  return countries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetVisitorRequest::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetVisitorRequest.countries)
  return &countries_;
}

// repeated int64 locations = 3;
inline int GetVisitorRequest::locations_size() const {
  return locations_.size();
}
inline void GetVisitorRequest::clear_locations() {
  locations_.Clear();
}
inline ::google::protobuf::int64 GetVisitorRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.locations)
  return locations_.Get(index);
}
inline void GetVisitorRequest::set_locations(int index, ::google::protobuf::int64 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.locations)
}
inline void GetVisitorRequest::add_locations(::google::protobuf::int64 value) {
  locations_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetVisitorRequest.locations)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetVisitorRequest::locations() const {
  // @@protoc_insertion_point(field_list:BioService.GetVisitorRequest.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetVisitorRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetVisitorRequest.locations)
  return &locations_;
}

// repeated int64 persons = 4;
inline int GetVisitorRequest::persons_size() const {
  return persons_.size();
}
inline void GetVisitorRequest::clear_persons() {
  persons_.Clear();
}
inline ::google::protobuf::int64 GetVisitorRequest::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.persons)
  return persons_.Get(index);
}
inline void GetVisitorRequest::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.persons)
}
inline void GetVisitorRequest::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.GetVisitorRequest.persons)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetVisitorRequest::persons() const {
  // @@protoc_insertion_point(field_list:BioService.GetVisitorRequest.persons)
  return persons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetVisitorRequest::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.GetVisitorRequest.persons)
  return &persons_;
}

// optional int64 datetime_from = 5;
inline void GetVisitorRequest::clear_datetime_from() {
  datetime_from_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetVisitorRequest::datetime_from() const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.datetime_from)
  return datetime_from_;
}
inline void GetVisitorRequest::set_datetime_from(::google::protobuf::int64 value) {
  
  datetime_from_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.datetime_from)
}

// optional int64 datetime_to = 6;
inline void GetVisitorRequest::clear_datetime_to() {
  datetime_to_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetVisitorRequest::datetime_to() const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.datetime_to)
  return datetime_to_;
}
inline void GetVisitorRequest::set_datetime_to(::google::protobuf::int64 value) {
  
  datetime_to_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.datetime_to)
}

// optional int64 items_per_page = 7;
inline void GetVisitorRequest::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetVisitorRequest::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.GetVisitorRequest.items_per_page)
  return items_per_page_;
}
inline void GetVisitorRequest::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.GetVisitorRequest.items_per_page)
}

// -------------------------------------------------------------------

// LogRecord

// optional .BioService.MessageType message_type = 1;
inline void LogRecord::clear_message_type() {
  message_type_ = 0;
}
inline ::BioService::MessageType LogRecord::message_type() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.message_type)
  return static_cast< ::BioService::MessageType >(message_type_);
}
inline void LogRecord::set_message_type(::BioService::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.message_type)
}

// optional int64 detected_time = 2;
inline void LogRecord::clear_detected_time() {
  detected_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogRecord::detected_time() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.detected_time)
  return detected_time_;
}
inline void LogRecord::set_detected_time(::google::protobuf::int64 value) {
  
  detected_time_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.detected_time)
}

// optional string exception_message = 3;
inline void LogRecord::clear_exception_message() {
  exception_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::exception_message() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.exception_message)
  return exception_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_exception_message(const ::std::string& value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.exception_message)
}
inline void LogRecord::set_exception_message(const char* value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.exception_message)
}
inline void LogRecord::set_exception_message(const char* value, size_t size) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.exception_message)
}
inline ::std::string* LogRecord::mutable_exception_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.exception_message)
  return exception_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_exception_message() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.exception_message)
  
  return exception_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_exception_message(::std::string* exception_message) {
  if (exception_message != NULL) {
    
  } else {
    
  }
  exception_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception_message);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.exception_message)
}

// optional string class_name = 4;
inline void LogRecord::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::class_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.class_name)
  return class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.class_name)
}
inline void LogRecord::set_class_name(const char* value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.class_name)
}
inline void LogRecord::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.class_name)
}
inline ::std::string* LogRecord::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_class_name() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.class_name)
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.class_name)
}

// optional string function_name = 5;
inline void LogRecord::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::function_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.function_name)
  return function_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.function_name)
}
inline void LogRecord::set_function_name(const char* value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.function_name)
}
inline void LogRecord::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.function_name)
}
inline ::std::string* LogRecord::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_function_name() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.function_name)
}

// optional int64 line_number = 6;
inline void LogRecord::clear_line_number() {
  line_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogRecord::line_number() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.line_number)
  return line_number_;
}
inline void LogRecord::set_line_number(::google::protobuf::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.line_number)
}

// optional string comment = 7;
inline void LogRecord::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::comment() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.comment)
}
inline void LogRecord::set_comment(const char* value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.comment)
}
inline void LogRecord::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.comment)
}
inline ::std::string* LogRecord::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_comment() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.comment)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BioService

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BioService::GetPhotoRequest_PhotoResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::GetPhotoRequest_PhotoResponseType>() {
  return ::BioService::GetPhotoRequest_PhotoResponseType_descriptor();
}
template <> struct is_proto_enum< ::BioService::Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Gender>() {
  return ::BioService::Gender_descriptor();
}
template <> struct is_proto_enum< ::BioService::Rights> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Rights>() {
  return ::BioService::Rights_descriptor();
}
template <> struct is_proto_enum< ::BioService::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::MessageType>() {
  return ::BioService::MessageType_descriptor();
}
template <> struct is_proto_enum< ::BioService::IsoComplianceTemplate> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::IsoComplianceTemplate>() {
  return ::BioService::IsoComplianceTemplate_descriptor();
}
template <> struct is_proto_enum< ::BioService::ImageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::ImageFormat>() {
  return ::BioService::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::BioService::EntityState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::EntityState>() {
  return ::BioService::EntityState_descriptor();
}
template <> struct is_proto_enum< ::BioService::Finger> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Finger>() {
  return ::BioService::Finger_descriptor();
}
template <> struct is_proto_enum< ::BioService::EyeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::EyeType>() {
  return ::BioService::EyeType_descriptor();
}
template <> struct is_proto_enum< ::BioService::AccessState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::AccessState>() {
  return ::BioService::AccessState_descriptor();
}
template <> struct is_proto_enum< ::BioService::BiometricDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::BiometricDataType>() {
  return ::BioService::BiometricDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bio_5fservice_2eproto__INCLUDED
