// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bio_service.proto

#include "bio_service.pb.h"
#include "bio_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace BioService {

static const char* BiometricFacialSevice_method_names[] = {
  "/BioService.BiometricFacialSevice/Acquire",
  "/BioService.BiometricFacialSevice/Enroll",
  "/BioService.BiometricFacialSevice/Verify",
  "/BioService.BiometricFacialSevice/CreatePopulation",
  "/BioService.BiometricFacialSevice/VerifyFace",
  "/BioService.BiometricFacialSevice/IdentifyFace",
};

std::unique_ptr< BiometricFacialSevice::Stub> BiometricFacialSevice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BiometricFacialSevice::Stub> stub(new BiometricFacialSevice::Stub(channel));
  return stub;
}

BiometricFacialSevice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Acquire_(BiometricFacialSevice_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enroll_(BiometricFacialSevice_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(BiometricFacialSevice_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePopulation_(BiometricFacialSevice_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyFace_(BiometricFacialSevice_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IdentifyFace_(BiometricFacialSevice_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BiometricFacialSevice::Stub::Acquire(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::AcquisitionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Acquire_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::AcquisitionResponse>* BiometricFacialSevice::Stub::AsyncAcquireRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::AcquisitionResponse>(channel_.get(), cq, rpcmethod_Acquire_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::Enroll(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::EnrollmentFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Enroll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>* BiometricFacialSevice::Stub::AsyncEnrollRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>(channel_.get(), cq, rpcmethod_Enroll_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::Verify(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>* BiometricFacialSevice::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::CreatePopulation(::grpc::ClientContext* context, const ::BioService::PhotoList& request, ::BioService::PopulationCreationResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePopulation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::PopulationCreationResponse>* BiometricFacialSevice::Stub::AsyncCreatePopulationRaw(::grpc::ClientContext* context, const ::BioService::PhotoList& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::PopulationCreationResponse>(channel_.get(), cq, rpcmethod_CreatePopulation_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::VerifyFace(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::BioService::FaceSearchResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyFace_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>* BiometricFacialSevice::Stub::AsyncVerifyFaceRaw(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>(channel_.get(), cq, rpcmethod_VerifyFace_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::IdentifyFace(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::BioService::FaceSearchResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IdentifyFace_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>* BiometricFacialSevice::Stub::AsyncIdentifyFaceRaw(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>(channel_.get(), cq, rpcmethod_IdentifyFace_, context, request);
}

BiometricFacialSevice::Service::Service() {
  (void)BiometricFacialSevice_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::Photo, ::BioService::AcquisitionResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::Acquire), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::AcquiredData, ::BioService::EnrollmentFeedback>(
          std::mem_fn(&BiometricFacialSevice::Service::Enroll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::AcquiredData, ::BioService::VerificationFeedback>(
          std::mem_fn(&BiometricFacialSevice::Service::Verify), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::PhotoList, ::BioService::PopulationCreationResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::CreatePopulation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::VerificationData, ::BioService::FaceSearchResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::VerifyFace), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::IdentificationData, ::BioService::FaceSearchResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::IdentifyFace), this)));
}

BiometricFacialSevice::Service::~Service() {
}

::grpc::Status BiometricFacialSevice::Service::Acquire(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::AcquisitionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::Enroll(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::EnrollmentFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::Verify(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::CreatePopulation(::grpc::ServerContext* context, const ::BioService::PhotoList* request, ::BioService::PopulationCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::VerifyFace(::grpc::ServerContext* context, const ::BioService::VerificationData* request, ::BioService::FaceSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::IdentifyFace(::grpc::ServerContext* context, const ::BioService::IdentificationData* request, ::BioService::FaceSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DatabaseSevice_method_names[] = {
  "/BioService.DatabaseSevice/GetPerson",
  "/BioService.DatabaseSevice/AddPerson",
  "/BioService.DatabaseSevice/UpdatePerson",
  "/BioService.DatabaseSevice/DeletePerson",
};

std::unique_ptr< DatabaseSevice::Stub> DatabaseSevice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DatabaseSevice::Stub> stub(new DatabaseSevice::Stub(channel));
  return stub;
}

DatabaseSevice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetPerson_(DatabaseSevice_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPerson_(DatabaseSevice_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePerson_(DatabaseSevice_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePerson_(DatabaseSevice_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseSevice::Stub::GetPerson(::grpc::ClientContext* context, const ::BioService::GetPersonRequest& request, ::BioService::PersonList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::PersonList>* DatabaseSevice::Stub::AsyncGetPersonRaw(::grpc::ClientContext* context, const ::BioService::GetPersonRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::PersonList>(channel_.get(), cq, rpcmethod_GetPerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddPerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddPerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Person>* DatabaseSevice::Stub::AsyncAddPersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Person>(channel_.get(), cq, rpcmethod_AddPerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::UpdatePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DatabaseSevice::Stub::AsyncUpdatePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_UpdatePerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::DeletePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeletePerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DatabaseSevice::Stub::AsyncDeletePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_DeletePerson_, context, request);
}

DatabaseSevice::Service::Service() {
  (void)DatabaseSevice_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::GetPersonRequest, ::BioService::PersonList>(
          std::mem_fn(&DatabaseSevice::Service::GetPerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Person, ::BioService::Person>(
          std::mem_fn(&DatabaseSevice::Service::AddPerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Person, ::google::protobuf::Empty>(
          std::mem_fn(&DatabaseSevice::Service::UpdatePerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Person, ::google::protobuf::Empty>(
          std::mem_fn(&DatabaseSevice::Service::DeletePerson), this)));
}

DatabaseSevice::Service::~Service() {
}

::grpc::Status DatabaseSevice::Service::GetPerson(::grpc::ServerContext* context, const ::BioService::GetPersonRequest* request, ::BioService::PersonList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddPerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::UpdatePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::DeletePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace BioService

