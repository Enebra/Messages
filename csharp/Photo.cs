// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/photo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/photo.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PhotoReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/photo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PhotoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVkYXRhdHlwZXMvcGhvdG8ucHJvdG8SCURhdGFUeXBlcxoaZGF0YXR5cGVz",
            "L2Jpb21ldHJpY3MucHJvdG8imgEKBVBob3RvEgoKAmlkGAEgASgDEhEKCXBo",
            "b3RvX3VybBgCIAEoCRISCgpieXRlc3RyaW5nGAMgASgMEg0KBXdpZHRoGAQg",
            "ASgFEg4KBmhlaWdodBgFIAEoBRItCgdiaW90eXBlGAYgASgOMhwuRGF0YVR5",
            "cGVzLkJpb21ldHJpY0RhdGFUeXBlEhAKCG93bmVyX2lkGAcgASgDIioKBlBo",
            "b3RvcxIgCgZwaG90b3MYASADKAsyEC5EYXRhVHlwZXMuUGhvdG9CDwoHZXgu",
            "Z3JwY6ICA1JUR2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.BiometricsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Photo), global::DataTypes.Photo.Parser, new[]{ "Id", "PhotoUrl", "Bytestring", "Width", "Height", "Biotype", "OwnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Photos), global::DataTypes.Photos.Parser, new[]{ "Photos_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Photo : pb::IMessage<Photo> {
    private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
    public static pb::MessageParser<Photo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.PhotoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Photo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Photo(Photo other) : this() {
      id_ = other.id_;
      photoUrl_ = other.photoUrl_;
      bytestring_ = other.bytestring_;
      width_ = other.width_;
      height_ = other.height_;
      biotype_ = other.biotype_;
      ownerId_ = other.ownerId_;
    }

    public Photo Clone() {
      return new Photo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "photo_url" field.</summary>
    public const int PhotoUrlFieldNumber = 2;
    private string photoUrl_ = "";
    public string PhotoUrl {
      get { return photoUrl_; }
      set {
        photoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytestring" field.</summary>
    public const int BytestringFieldNumber = 3;
    private pb::ByteString bytestring_ = pb::ByteString.Empty;
    public pb::ByteString Bytestring {
      get { return bytestring_; }
      set {
        bytestring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private int width_;
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "biotype" field.</summary>
    public const int BiotypeFieldNumber = 6;
    private global::DataTypes.BiometricDataType biotype_ = 0;
    public global::DataTypes.BiometricDataType Biotype {
      get { return biotype_; }
      set {
        biotype_ = value;
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 7;
    private long ownerId_;
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Photo);
    }

    public bool Equals(Photo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PhotoUrl != other.PhotoUrl) return false;
      if (Bytestring != other.Bytestring) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Biotype != other.Biotype) return false;
      if (OwnerId != other.OwnerId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (PhotoUrl.Length != 0) hash ^= PhotoUrl.GetHashCode();
      if (Bytestring.Length != 0) hash ^= Bytestring.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Biotype != 0) hash ^= Biotype.GetHashCode();
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (PhotoUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PhotoUrl);
      }
      if (Bytestring.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Bytestring);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      if (Biotype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Biotype);
      }
      if (OwnerId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(OwnerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (PhotoUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoUrl);
      }
      if (Bytestring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytestring);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Biotype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Biotype);
      }
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      return size;
    }

    public void MergeFrom(Photo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.PhotoUrl.Length != 0) {
        PhotoUrl = other.PhotoUrl;
      }
      if (other.Bytestring.Length != 0) {
        Bytestring = other.Bytestring;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Biotype != 0) {
        Biotype = other.Biotype;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            PhotoUrl = input.ReadString();
            break;
          }
          case 26: {
            Bytestring = input.ReadBytes();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
          case 48: {
            biotype_ = (global::DataTypes.BiometricDataType) input.ReadEnum();
            break;
          }
          case 56: {
            OwnerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Photos : pb::IMessage<Photos> {
    private static readonly pb::MessageParser<Photos> _parser = new pb::MessageParser<Photos>(() => new Photos());
    public static pb::MessageParser<Photos> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.PhotoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Photos() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Photos(Photos other) : this() {
      photos_ = other.photos_.Clone();
    }

    public Photos Clone() {
      return new Photos(this);
    }

    /// <summary>Field number for the "photos" field.</summary>
    public const int Photos_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.Photo> _repeated_photos_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.Photo.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Photo> photos_ = new pbc::RepeatedField<global::DataTypes.Photo>();
    public pbc::RepeatedField<global::DataTypes.Photo> Photos_ {
      get { return photos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Photos);
    }

    public bool Equals(Photos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!photos_.Equals(other.photos_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= photos_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      photos_.WriteTo(output, _repeated_photos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += photos_.CalculateSize(_repeated_photos_codec);
      return size;
    }

    public void MergeFrom(Photos other) {
      if (other == null) {
        return;
      }
      photos_.Add(other.photos_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            photos_.AddEntriesFrom(input, _repeated_photos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
