// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/unit.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/unit.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class UnitReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/unit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UnitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkYXRhdHlwZXMvdW5pdC5wcm90bxIJRGF0YVR5cGVzGhhkYXRhdHlwZXMv",
            "bG9jYXRpb24ucHJvdG8aE2RhdGF0eXBlcy9rZXkucHJvdG8iXgoEVW5pdBIa",
            "CgJpZBgBIAEoCzIOLkRhdGFUeXBlcy5LZXkSEgoKaXBfYWRkcmVzcxgCIAEo",
            "CRImCglsb2NhdGlvbnMYAyADKAsyEy5EYXRhVHlwZXMuTG9jYXRpb24iagoK",
            "Q29ubmVjdE1zZxIaCgJpZBgBIAEoCzIOLkRhdGFUeXBlcy5LZXkSEgoKaXBf",
            "YWRkcmVzcxgCIAEoCRIsCgxzZXJ2aWNlX3R5cGUYAyABKA4yFi5EYXRhVHlw",
            "ZXMuU2VydmljZVR5cGUiXAoQSGVhcnRiZWF0TWVzc2FnZRIaCgJpZBgBIAEo",
            "CzIOLkRhdGFUeXBlcy5LZXkSLAoMc2VydmljZV90eXBlGAIgASgOMhYuRGF0",
            "YVR5cGVzLlNlcnZpY2VUeXBlIl4KD1N1YnNjcmlwdGlvbk1zZxIkCgxwdWJs",
            "aXNoZXJfaWQYASABKAsyDi5EYXRhVHlwZXMuS2V5EiUKDXN1YnNjcmliZXJf",
            "aWQYAiABKAsyDi5EYXRhVHlwZXMuS2V5IicKBVVuaXRzEh4KBWl0ZW1zGAEg",
            "AygLMg8uRGF0YVR5cGVzLlVuaXQiqwEKClVuaXRVcGRhdGUSIwoIaW5zZXJ0",
            "ZWQYASABKAsyDy5EYXRhVHlwZXMuVW5pdEgAEiIKB2RlbGV0ZWQYAiABKAsy",
            "Dy5EYXRhVHlwZXMuVW5pdEgAEiIKB3VwZGF0ZWQYAyABKAsyDy5EYXRhVHlw",
            "ZXMuVW5pdEgAEiMKBXN0YXRlGAQgASgOMhQuRGF0YVR5cGVzLlVuaXRTdGF0",
            "ZUILCgl1bml0X3R5cGUiMwoLVW5pdFVwZGF0ZXMSJAoFaXRlbXMYASADKAsy",
            "FS5EYXRhVHlwZXMuVW5pdFVwZGF0ZSo3CglVbml0U3RhdGUSCQoFTm9uZV8Q",
            "ABINCglDb25uZWN0ZWQQARIQCgxEaXNjb25uZWN0ZWQQAipZCgtTZXJ2aWNl",
            "VHlwZRIQCgxOb25lX1NlcnZpY2UQABISCg5GYWNpYWxfU2VydmljZRABEhIK",
            "DkNsaWVudF9TZXJ2aWNlEAISEAoMVW5pdF9TZXJ2aWNlEANCSQoHZXguZ3Jw",
            "Y1o4Z2l0aHViLmNvbS9FbmVicmEvU2VydmljZUNvb3JkaW5hdG9yL2dycGMv",
            "ZGF0YXR5cGVzL3VuaXSiAgNSVEdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.LocationReflection.Descriptor, global::DataTypes.KeyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataTypes.UnitState), typeof(global::DataTypes.ServiceType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Unit), global::DataTypes.Unit.Parser, new[]{ "Id", "IpAddress", "Locations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.ConnectMsg), global::DataTypes.ConnectMsg.Parser, new[]{ "Id", "IpAddress", "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.HeartbeatMessage), global::DataTypes.HeartbeatMessage.Parser, new[]{ "Id", "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.SubscriptionMsg), global::DataTypes.SubscriptionMsg.Parser, new[]{ "PublisherId", "SubscriberId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Units), global::DataTypes.Units.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UnitUpdate), global::DataTypes.UnitUpdate.Parser, new[]{ "Inserted", "Deleted", "Updated", "State" }, new[]{ "UnitType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UnitUpdates), global::DataTypes.UnitUpdates.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum UnitState {
    [pbr::OriginalName("None_")] None = 0,
    [pbr::OriginalName("Connected")] Connected = 1,
    [pbr::OriginalName("Disconnected")] Disconnected = 2,
  }

  public enum ServiceType {
    [pbr::OriginalName("None_Service")] NoneService = 0,
    [pbr::OriginalName("Facial_Service")] FacialService = 1,
    [pbr::OriginalName("Client_Service")] ClientService = 2,
    [pbr::OriginalName("Unit_Service")] UnitService = 3,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Unit(Unit other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      ipAddress_ = other.ipAddress_;
      locations_ = other.locations_.Clone();
    }

    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::DataTypes.Key id_;
    public global::DataTypes.Key Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataTypes.Location> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(26, global::DataTypes.Location.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Location> locations_ = new pbc::RepeatedField<global::DataTypes.Location>();
    public pbc::RepeatedField<global::DataTypes.Location> Locations {
      get { return locations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (IpAddress != other.IpAddress) return false;
      if(!locations_.Equals(other.locations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      hash ^= locations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
      locations_.WriteTo(output, _repeated_locations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      size += locations_.CalculateSize(_repeated_locations_codec);
      return size;
    }

    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataTypes.Key();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      locations_.Add(other.locations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::DataTypes.Key();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
          case 26: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectMsg : pb::IMessage<ConnectMsg> {
    private static readonly pb::MessageParser<ConnectMsg> _parser = new pb::MessageParser<ConnectMsg>(() => new ConnectMsg());
    public static pb::MessageParser<ConnectMsg> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ConnectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectMsg(ConnectMsg other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      ipAddress_ = other.ipAddress_;
      serviceType_ = other.serviceType_;
    }

    public ConnectMsg Clone() {
      return new ConnectMsg(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::DataTypes.Key id_;
    public global::DataTypes.Key Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private global::DataTypes.ServiceType serviceType_ = 0;
    public global::DataTypes.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectMsg);
    }

    public bool Equals(ConnectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (IpAddress != other.IpAddress) return false;
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
      if (ServiceType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ServiceType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      return size;
    }

    public void MergeFrom(ConnectMsg other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataTypes.Key();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::DataTypes.Key();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
          case 24: {
            serviceType_ = (global::DataTypes.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartbeatMessage : pb::IMessage<HeartbeatMessage> {
    private static readonly pb::MessageParser<HeartbeatMessage> _parser = new pb::MessageParser<HeartbeatMessage>(() => new HeartbeatMessage());
    public static pb::MessageParser<HeartbeatMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HeartbeatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HeartbeatMessage(HeartbeatMessage other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      serviceType_ = other.serviceType_;
    }

    public HeartbeatMessage Clone() {
      return new HeartbeatMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::DataTypes.Key id_;
    public global::DataTypes.Key Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 2;
    private global::DataTypes.ServiceType serviceType_ = 0;
    public global::DataTypes.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HeartbeatMessage);
    }

    public bool Equals(HeartbeatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (ServiceType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ServiceType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      return size;
    }

    public void MergeFrom(HeartbeatMessage other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataTypes.Key();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::DataTypes.Key();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            serviceType_ = (global::DataTypes.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubscriptionMsg : pb::IMessage<SubscriptionMsg> {
    private static readonly pb::MessageParser<SubscriptionMsg> _parser = new pb::MessageParser<SubscriptionMsg>(() => new SubscriptionMsg());
    public static pb::MessageParser<SubscriptionMsg> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SubscriptionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SubscriptionMsg(SubscriptionMsg other) : this() {
      PublisherId = other.publisherId_ != null ? other.PublisherId.Clone() : null;
      SubscriberId = other.subscriberId_ != null ? other.SubscriberId.Clone() : null;
    }

    public SubscriptionMsg Clone() {
      return new SubscriptionMsg(this);
    }

    /// <summary>Field number for the "publisher_id" field.</summary>
    public const int PublisherIdFieldNumber = 1;
    private global::DataTypes.Key publisherId_;
    public global::DataTypes.Key PublisherId {
      get { return publisherId_; }
      set {
        publisherId_ = value;
      }
    }

    /// <summary>Field number for the "subscriber_id" field.</summary>
    public const int SubscriberIdFieldNumber = 2;
    private global::DataTypes.Key subscriberId_;
    public global::DataTypes.Key SubscriberId {
      get { return subscriberId_; }
      set {
        subscriberId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SubscriptionMsg);
    }

    public bool Equals(SubscriptionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PublisherId, other.PublisherId)) return false;
      if (!object.Equals(SubscriberId, other.SubscriberId)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (publisherId_ != null) hash ^= PublisherId.GetHashCode();
      if (subscriberId_ != null) hash ^= SubscriberId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (publisherId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PublisherId);
      }
      if (subscriberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SubscriberId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (publisherId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublisherId);
      }
      if (subscriberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscriberId);
      }
      return size;
    }

    public void MergeFrom(SubscriptionMsg other) {
      if (other == null) {
        return;
      }
      if (other.publisherId_ != null) {
        if (publisherId_ == null) {
          publisherId_ = new global::DataTypes.Key();
        }
        PublisherId.MergeFrom(other.PublisherId);
      }
      if (other.subscriberId_ != null) {
        if (subscriberId_ == null) {
          subscriberId_ = new global::DataTypes.Key();
        }
        SubscriberId.MergeFrom(other.SubscriberId);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (publisherId_ == null) {
              publisherId_ = new global::DataTypes.Key();
            }
            input.ReadMessage(publisherId_);
            break;
          }
          case 18: {
            if (subscriberId_ == null) {
              subscriberId_ = new global::DataTypes.Key();
            }
            input.ReadMessage(subscriberId_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Units : pb::IMessage<Units> {
    private static readonly pb::MessageParser<Units> _parser = new pb::MessageParser<Units>(() => new Units());
    public static pb::MessageParser<Units> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Units() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Units(Units other) : this() {
      items_ = other.items_.Clone();
    }

    public Units Clone() {
      return new Units(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.Unit> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.Unit.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Unit> items_ = new pbc::RepeatedField<global::DataTypes.Unit>();
    public pbc::RepeatedField<global::DataTypes.Unit> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Units);
    }

    public bool Equals(Units other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(Units other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnitUpdate : pb::IMessage<UnitUpdate> {
    private static readonly pb::MessageParser<UnitUpdate> _parser = new pb::MessageParser<UnitUpdate>(() => new UnitUpdate());
    public static pb::MessageParser<UnitUpdate> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UnitUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UnitUpdate(UnitUpdate other) : this() {
      state_ = other.state_;
      switch (other.UnitTypeCase) {
        case UnitTypeOneofCase.Inserted:
          Inserted = other.Inserted.Clone();
          break;
        case UnitTypeOneofCase.Deleted:
          Deleted = other.Deleted.Clone();
          break;
        case UnitTypeOneofCase.Updated:
          Updated = other.Updated.Clone();
          break;
      }

    }

    public UnitUpdate Clone() {
      return new UnitUpdate(this);
    }

    /// <summary>Field number for the "inserted" field.</summary>
    public const int InsertedFieldNumber = 1;
    public global::DataTypes.Unit Inserted {
      get { return unitTypeCase_ == UnitTypeOneofCase.Inserted ? (global::DataTypes.Unit) unitType_ : null; }
      set {
        unitType_ = value;
        unitTypeCase_ = value == null ? UnitTypeOneofCase.None : UnitTypeOneofCase.Inserted;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 2;
    public global::DataTypes.Unit Deleted {
      get { return unitTypeCase_ == UnitTypeOneofCase.Deleted ? (global::DataTypes.Unit) unitType_ : null; }
      set {
        unitType_ = value;
        unitTypeCase_ = value == null ? UnitTypeOneofCase.None : UnitTypeOneofCase.Deleted;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 3;
    public global::DataTypes.Unit Updated {
      get { return unitTypeCase_ == UnitTypeOneofCase.Updated ? (global::DataTypes.Unit) unitType_ : null; }
      set {
        unitType_ = value;
        unitTypeCase_ = value == null ? UnitTypeOneofCase.None : UnitTypeOneofCase.Updated;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::DataTypes.UnitState state_ = 0;
    public global::DataTypes.UnitState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private object unitType_;
    /// <summary>Enum of possible cases for the "unit_type" oneof.</summary>
    public enum UnitTypeOneofCase {
      None = 0,
      Inserted = 1,
      Deleted = 2,
      Updated = 3,
    }
    private UnitTypeOneofCase unitTypeCase_ = UnitTypeOneofCase.None;
    public UnitTypeOneofCase UnitTypeCase {
      get { return unitTypeCase_; }
    }

    public void ClearUnitType() {
      unitTypeCase_ = UnitTypeOneofCase.None;
      unitType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as UnitUpdate);
    }

    public bool Equals(UnitUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Inserted, other.Inserted)) return false;
      if (!object.Equals(Deleted, other.Deleted)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (State != other.State) return false;
      if (UnitTypeCase != other.UnitTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (unitTypeCase_ == UnitTypeOneofCase.Inserted) hash ^= Inserted.GetHashCode();
      if (unitTypeCase_ == UnitTypeOneofCase.Deleted) hash ^= Deleted.GetHashCode();
      if (unitTypeCase_ == UnitTypeOneofCase.Updated) hash ^= Updated.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= (int) unitTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unitTypeCase_ == UnitTypeOneofCase.Inserted) {
        output.WriteRawTag(10);
        output.WriteMessage(Inserted);
      }
      if (unitTypeCase_ == UnitTypeOneofCase.Deleted) {
        output.WriteRawTag(18);
        output.WriteMessage(Deleted);
      }
      if (unitTypeCase_ == UnitTypeOneofCase.Updated) {
        output.WriteRawTag(26);
        output.WriteMessage(Updated);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unitTypeCase_ == UnitTypeOneofCase.Inserted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inserted);
      }
      if (unitTypeCase_ == UnitTypeOneofCase.Deleted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deleted);
      }
      if (unitTypeCase_ == UnitTypeOneofCase.Updated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    public void MergeFrom(UnitUpdate other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      switch (other.UnitTypeCase) {
        case UnitTypeOneofCase.Inserted:
          Inserted = other.Inserted;
          break;
        case UnitTypeOneofCase.Deleted:
          Deleted = other.Deleted;
          break;
        case UnitTypeOneofCase.Updated:
          Updated = other.Updated;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::DataTypes.Unit subBuilder = new global::DataTypes.Unit();
            if (unitTypeCase_ == UnitTypeOneofCase.Inserted) {
              subBuilder.MergeFrom(Inserted);
            }
            input.ReadMessage(subBuilder);
            Inserted = subBuilder;
            break;
          }
          case 18: {
            global::DataTypes.Unit subBuilder = new global::DataTypes.Unit();
            if (unitTypeCase_ == UnitTypeOneofCase.Deleted) {
              subBuilder.MergeFrom(Deleted);
            }
            input.ReadMessage(subBuilder);
            Deleted = subBuilder;
            break;
          }
          case 26: {
            global::DataTypes.Unit subBuilder = new global::DataTypes.Unit();
            if (unitTypeCase_ == UnitTypeOneofCase.Updated) {
              subBuilder.MergeFrom(Updated);
            }
            input.ReadMessage(subBuilder);
            Updated = subBuilder;
            break;
          }
          case 32: {
            state_ = (global::DataTypes.UnitState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnitUpdates : pb::IMessage<UnitUpdates> {
    private static readonly pb::MessageParser<UnitUpdates> _parser = new pb::MessageParser<UnitUpdates>(() => new UnitUpdates());
    public static pb::MessageParser<UnitUpdates> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UnitUpdates() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UnitUpdates(UnitUpdates other) : this() {
      items_ = other.items_.Clone();
    }

    public UnitUpdates Clone() {
      return new UnitUpdates(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.UnitUpdate> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.UnitUpdate.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.UnitUpdate> items_ = new pbc::RepeatedField<global::DataTypes.UnitUpdate>();
    public pbc::RepeatedField<global::DataTypes.UnitUpdate> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as UnitUpdates);
    }

    public bool Equals(UnitUpdates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(UnitUpdates other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
