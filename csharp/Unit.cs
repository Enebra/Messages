// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/unit.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/unit.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class UnitReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/unit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UnitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkYXRhdHlwZXMvdW5pdC5wcm90bxIJRGF0YVR5cGVzGhhkYXRhdHlwZXMv",
            "bG9jYXRpb24ucHJvdG8ibwoEVW5pdBImCgR1bml0GAEgASgLMhguRGF0YVR5",
            "cGVzLkNvbm5lY3RlZFVuaXQSFgoOaGVhcnRiZWF0X3RpbWUYAiABKAMSJwoJ",
            "bG9jYXRpb25zGAMgASgLMhQuRGF0YVR5cGVzLkxvY2F0aW9ucyI4Cg1Db25u",
            "ZWN0ZWRVbml0EhIKCmlwX2FkZHJlc3MYASABKAkSEwoLbWFjX2FkZHJlc3MY",
            "AiABKAkiJwoFVW5pdHMSHgoFaXRlbXMYASADKAsyDy5EYXRhVHlwZXMuVW5p",
            "dCIuChFVbml0Q29uZmlndXJhdGlvbhIZChFtYXN0ZXJfaXBfYWRkcmVzcxgB",
            "IAEoCSI8ChFVbml0TG9jYXRpb25TdGF0ZRInCgVzdGF0ZRgBIAEoDjIYLkRh",
            "dGFUeXBlcy5Mb2NhdGlvblN0YXRlQg8KB2V4LmdycGOiAgNSVEdiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.LocationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Unit), global::DataTypes.Unit.Parser, new[]{ "Unit_", "HeartbeatTime", "Locations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.ConnectedUnit), global::DataTypes.ConnectedUnit.Parser, new[]{ "IpAddress", "MacAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Units), global::DataTypes.Units.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UnitConfiguration), global::DataTypes.UnitConfiguration.Parser, new[]{ "MasterIpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UnitLocationState), global::DataTypes.UnitLocationState.Parser, new[]{ "State" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Unit(Unit other) : this() {
      Unit_ = other.unit_ != null ? other.Unit_.Clone() : null;
      heartbeatTime_ = other.heartbeatTime_;
      Locations = other.locations_ != null ? other.Locations.Clone() : null;
    }

    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int Unit_FieldNumber = 1;
    private global::DataTypes.ConnectedUnit unit_;
    public global::DataTypes.ConnectedUnit Unit_ {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "heartbeat_time" field.</summary>
    public const int HeartbeatTimeFieldNumber = 2;
    private long heartbeatTime_;
    public long HeartbeatTime {
      get { return heartbeatTime_; }
      set {
        heartbeatTime_ = value;
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 3;
    private global::DataTypes.Locations locations_;
    public global::DataTypes.Locations Locations {
      get { return locations_; }
      set {
        locations_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Unit_, other.Unit_)) return false;
      if (HeartbeatTime != other.HeartbeatTime) return false;
      if (!object.Equals(Locations, other.Locations)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (unit_ != null) hash ^= Unit_.GetHashCode();
      if (HeartbeatTime != 0L) hash ^= HeartbeatTime.GetHashCode();
      if (locations_ != null) hash ^= Locations.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Unit_);
      }
      if (HeartbeatTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeartbeatTime);
      }
      if (locations_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Locations);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (unit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit_);
      }
      if (HeartbeatTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeartbeatTime);
      }
      if (locations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Locations);
      }
      return size;
    }

    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.unit_ != null) {
        if (unit_ == null) {
          unit_ = new global::DataTypes.ConnectedUnit();
        }
        Unit_.MergeFrom(other.Unit_);
      }
      if (other.HeartbeatTime != 0L) {
        HeartbeatTime = other.HeartbeatTime;
      }
      if (other.locations_ != null) {
        if (locations_ == null) {
          locations_ = new global::DataTypes.Locations();
        }
        Locations.MergeFrom(other.Locations);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (unit_ == null) {
              unit_ = new global::DataTypes.ConnectedUnit();
            }
            input.ReadMessage(unit_);
            break;
          }
          case 16: {
            HeartbeatTime = input.ReadInt64();
            break;
          }
          case 26: {
            if (locations_ == null) {
              locations_ = new global::DataTypes.Locations();
            }
            input.ReadMessage(locations_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectedUnit : pb::IMessage<ConnectedUnit> {
    private static readonly pb::MessageParser<ConnectedUnit> _parser = new pb::MessageParser<ConnectedUnit>(() => new ConnectedUnit());
    public static pb::MessageParser<ConnectedUnit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ConnectedUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectedUnit(ConnectedUnit other) : this() {
      ipAddress_ = other.ipAddress_;
      macAddress_ = other.macAddress_;
    }

    public ConnectedUnit Clone() {
      return new ConnectedUnit(this);
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 1;
    private string ipAddress_ = "";
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac_address" field.</summary>
    public const int MacAddressFieldNumber = 2;
    private string macAddress_ = "";
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectedUnit);
    }

    public bool Equals(ConnectedUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpAddress != other.IpAddress) return false;
      if (MacAddress != other.MacAddress) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IpAddress);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MacAddress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      return size;
    }

    public void MergeFrom(ConnectedUnit other) {
      if (other == null) {
        return;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IpAddress = input.ReadString();
            break;
          }
          case 18: {
            MacAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Units : pb::IMessage<Units> {
    private static readonly pb::MessageParser<Units> _parser = new pb::MessageParser<Units>(() => new Units());
    public static pb::MessageParser<Units> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Units() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Units(Units other) : this() {
      items_ = other.items_.Clone();
    }

    public Units Clone() {
      return new Units(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.Unit> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.Unit.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Unit> items_ = new pbc::RepeatedField<global::DataTypes.Unit>();
    public pbc::RepeatedField<global::DataTypes.Unit> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Units);
    }

    public bool Equals(Units other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(Units other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnitConfiguration : pb::IMessage<UnitConfiguration> {
    private static readonly pb::MessageParser<UnitConfiguration> _parser = new pb::MessageParser<UnitConfiguration>(() => new UnitConfiguration());
    public static pb::MessageParser<UnitConfiguration> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UnitConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UnitConfiguration(UnitConfiguration other) : this() {
      masterIpAddress_ = other.masterIpAddress_;
    }

    public UnitConfiguration Clone() {
      return new UnitConfiguration(this);
    }

    /// <summary>Field number for the "master_ip_address" field.</summary>
    public const int MasterIpAddressFieldNumber = 1;
    private string masterIpAddress_ = "";
    public string MasterIpAddress {
      get { return masterIpAddress_; }
      set {
        masterIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UnitConfiguration);
    }

    public bool Equals(UnitConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MasterIpAddress != other.MasterIpAddress) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MasterIpAddress.Length != 0) hash ^= MasterIpAddress.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MasterIpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MasterIpAddress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MasterIpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterIpAddress);
      }
      return size;
    }

    public void MergeFrom(UnitConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.MasterIpAddress.Length != 0) {
        MasterIpAddress = other.MasterIpAddress;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MasterIpAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnitLocationState : pb::IMessage<UnitLocationState> {
    private static readonly pb::MessageParser<UnitLocationState> _parser = new pb::MessageParser<UnitLocationState>(() => new UnitLocationState());
    public static pb::MessageParser<UnitLocationState> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UnitLocationState() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UnitLocationState(UnitLocationState other) : this() {
      state_ = other.state_;
    }

    public UnitLocationState Clone() {
      return new UnitLocationState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::DataTypes.LocationState state_ = 0;
    public global::DataTypes.LocationState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UnitLocationState);
    }

    public bool Equals(UnitLocationState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    public void MergeFrom(UnitLocationState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::DataTypes.LocationState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
