// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/unit.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/unit.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class UnitReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/unit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UnitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkYXRhdHlwZXMvdW5pdC5wcm90bxIJRGF0YVR5cGVzGhhkYXRhdHlwZXMv",
            "bG9jYXRpb24ucHJvdG8icAoEVW5pdBISCgppcF9hZGRyZXNzGAEgASgJEhMK",
            "C21hY19hZGRyZXNzGAIgASgJEhYKDmhlYXJ0YmVhdF90aW1lGAQgASgDEicK",
            "CWxvY2F0aW9ucxgFIAEoCzIULkRhdGFUeXBlcy5Mb2NhdGlvbnMiYwoKQ29u",
            "bmVjdE1zZxISCgppcF9hZGRyZXNzGAEgASgJEhMKC21hY19hZGRyZXNzGAIg",
            "ASgJEiwKDHNlcnZpY2VfdHlwZRgDIAEoDjIWLkRhdGFUeXBlcy5TZXJ2aWNl",
            "VHlwZSJUChBIZWFydGJlYXRNZXNzYWdlEhIKCnNlcnZpY2VfaWQYASABKAkS",
            "LAoMc2VydmljZV90eXBlGAIgASgOMhYuRGF0YVR5cGVzLlNlcnZpY2VUeXBl",
            "Ij4KD1N1YnNjcmlwdGlvbk1zZxIUCgxwdWJsaXNoZXJfaWQYASABKAkSFQoN",
            "c3Vic2NyaWJlcl9pZBgCIAEoCSJZCgtVcGRhdGVkVW5pdBIlCgxjdXJyZW50",
            "X3VuaXQYASABKAsyDy5EYXRhVHlwZXMuVW5pdBIjCgVzdGF0ZRgCIAEoDjIU",
            "LkRhdGFUeXBlcy5Vbml0U3RhdGUiNQoMVXBkYXRlZFVuaXRzEiUKBWl0ZW1z",
            "GAEgAygLMhYuRGF0YVR5cGVzLlVwZGF0ZWRVbml0InIKBVVuaXRzEioKBWl0",
            "ZW1zGAEgAygLMhsuRGF0YVR5cGVzLlVuaXRzLkl0ZW1zRW50cnkaPQoKSXRl",
            "bXNFbnRyeRILCgNrZXkYASABKAkSHgoFdmFsdWUYAiABKAsyDy5EYXRhVHlw",
            "ZXMuVW5pdDoCOAEiLgoRVW5pdENvbmZpZ3VyYXRpb24SGQoRbWFzdGVyX2lw",
            "X2FkZHJlc3MYASABKAkiUQoRVW5pdExvY2F0aW9uU3RhdGUSEwoLbG9jYXRp",
            "b25faWQYASABKAkSJwoFc3RhdGUYAiABKA4yGC5EYXRhVHlwZXMuTG9jYXRp",
            "b25TdGF0ZSo+CglVbml0U3RhdGUSCQoFTm9uZV8QABIMCghJbnNlcnRlZBAB",
            "EgsKB0RlbGV0ZWQQAhILCgdVcGRhdGVkEAMqWQoLU2VydmljZVR5cGUSEAoM",
            "Tm9uZV9TZXJ2aWNlEAASEgoORmFjaWFsX1NlcnZpY2UQARISCg5DbGllbnRf",
            "U2VydmljZRACEhAKDFVuaXRfU2VydmljZRADQkkKB2V4LmdycGNaOGdpdGh1",
            "Yi5jb20vRW5lYnJhL1NlcnZpY2VDb29yZGluYXRvci9ncnBjL2RhdGF0eXBl",
            "cy91bml0ogIDUlRHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.LocationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataTypes.UnitState), typeof(global::DataTypes.ServiceType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Unit), global::DataTypes.Unit.Parser, new[]{ "IpAddress", "MacAddress", "HeartbeatTime", "Locations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.ConnectMsg), global::DataTypes.ConnectMsg.Parser, new[]{ "IpAddress", "MacAddress", "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.HeartbeatMessage), global::DataTypes.HeartbeatMessage.Parser, new[]{ "ServiceId", "ServiceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.SubscriptionMsg), global::DataTypes.SubscriptionMsg.Parser, new[]{ "PublisherId", "SubscriberId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UpdatedUnit), global::DataTypes.UpdatedUnit.Parser, new[]{ "CurrentUnit", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UpdatedUnits), global::DataTypes.UpdatedUnits.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Units), global::DataTypes.Units.Parser, new[]{ "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UnitConfiguration), global::DataTypes.UnitConfiguration.Parser, new[]{ "MasterIpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.UnitLocationState), global::DataTypes.UnitLocationState.Parser, new[]{ "LocationId", "State" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum UnitState {
    [pbr::OriginalName("None_")] None = 0,
    [pbr::OriginalName("Inserted")] Inserted = 1,
    [pbr::OriginalName("Deleted")] Deleted = 2,
    [pbr::OriginalName("Updated")] Updated = 3,
  }

  public enum ServiceType {
    [pbr::OriginalName("None_Service")] NoneService = 0,
    [pbr::OriginalName("Facial_Service")] FacialService = 1,
    [pbr::OriginalName("Client_Service")] ClientService = 2,
    [pbr::OriginalName("Unit_Service")] UnitService = 3,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Unit(Unit other) : this() {
      ipAddress_ = other.ipAddress_;
      macAddress_ = other.macAddress_;
      heartbeatTime_ = other.heartbeatTime_;
      Locations = other.locations_ != null ? other.Locations.Clone() : null;
    }

    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 1;
    private string ipAddress_ = "";
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac_address" field.</summary>
    public const int MacAddressFieldNumber = 2;
    private string macAddress_ = "";
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heartbeat_time" field.</summary>
    public const int HeartbeatTimeFieldNumber = 4;
    private long heartbeatTime_;
    public long HeartbeatTime {
      get { return heartbeatTime_; }
      set {
        heartbeatTime_ = value;
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 5;
    private global::DataTypes.Locations locations_;
    public global::DataTypes.Locations Locations {
      get { return locations_; }
      set {
        locations_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpAddress != other.IpAddress) return false;
      if (MacAddress != other.MacAddress) return false;
      if (HeartbeatTime != other.HeartbeatTime) return false;
      if (!object.Equals(Locations, other.Locations)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (HeartbeatTime != 0L) hash ^= HeartbeatTime.GetHashCode();
      if (locations_ != null) hash ^= Locations.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IpAddress);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MacAddress);
      }
      if (HeartbeatTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HeartbeatTime);
      }
      if (locations_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Locations);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (HeartbeatTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeartbeatTime);
      }
      if (locations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Locations);
      }
      return size;
    }

    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.HeartbeatTime != 0L) {
        HeartbeatTime = other.HeartbeatTime;
      }
      if (other.locations_ != null) {
        if (locations_ == null) {
          locations_ = new global::DataTypes.Locations();
        }
        Locations.MergeFrom(other.Locations);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IpAddress = input.ReadString();
            break;
          }
          case 18: {
            MacAddress = input.ReadString();
            break;
          }
          case 32: {
            HeartbeatTime = input.ReadInt64();
            break;
          }
          case 42: {
            if (locations_ == null) {
              locations_ = new global::DataTypes.Locations();
            }
            input.ReadMessage(locations_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectMsg : pb::IMessage<ConnectMsg> {
    private static readonly pb::MessageParser<ConnectMsg> _parser = new pb::MessageParser<ConnectMsg>(() => new ConnectMsg());
    public static pb::MessageParser<ConnectMsg> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ConnectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectMsg(ConnectMsg other) : this() {
      ipAddress_ = other.ipAddress_;
      macAddress_ = other.macAddress_;
      serviceType_ = other.serviceType_;
    }

    public ConnectMsg Clone() {
      return new ConnectMsg(this);
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 1;
    private string ipAddress_ = "";
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac_address" field.</summary>
    public const int MacAddressFieldNumber = 2;
    private string macAddress_ = "";
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private global::DataTypes.ServiceType serviceType_ = 0;
    public global::DataTypes.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectMsg);
    }

    public bool Equals(ConnectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpAddress != other.IpAddress) return false;
      if (MacAddress != other.MacAddress) return false;
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IpAddress);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MacAddress);
      }
      if (ServiceType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ServiceType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      return size;
    }

    public void MergeFrom(ConnectMsg other) {
      if (other == null) {
        return;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IpAddress = input.ReadString();
            break;
          }
          case 18: {
            MacAddress = input.ReadString();
            break;
          }
          case 24: {
            serviceType_ = (global::DataTypes.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartbeatMessage : pb::IMessage<HeartbeatMessage> {
    private static readonly pb::MessageParser<HeartbeatMessage> _parser = new pb::MessageParser<HeartbeatMessage>(() => new HeartbeatMessage());
    public static pb::MessageParser<HeartbeatMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HeartbeatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HeartbeatMessage(HeartbeatMessage other) : this() {
      serviceId_ = other.serviceId_;
      serviceType_ = other.serviceType_;
    }

    public HeartbeatMessage Clone() {
      return new HeartbeatMessage(this);
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 1;
    private string serviceId_ = "";
    public string ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 2;
    private global::DataTypes.ServiceType serviceType_ = 0;
    public global::DataTypes.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HeartbeatMessage);
    }

    public bool Equals(HeartbeatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceId != other.ServiceId) return false;
      if (ServiceType != other.ServiceType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ServiceId.Length != 0) hash ^= ServiceId.GetHashCode();
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceId);
      }
      if (ServiceType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ServiceType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ServiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceId);
      }
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      return size;
    }

    public void MergeFrom(HeartbeatMessage other) {
      if (other == null) {
        return;
      }
      if (other.ServiceId.Length != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceId = input.ReadString();
            break;
          }
          case 16: {
            serviceType_ = (global::DataTypes.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubscriptionMsg : pb::IMessage<SubscriptionMsg> {
    private static readonly pb::MessageParser<SubscriptionMsg> _parser = new pb::MessageParser<SubscriptionMsg>(() => new SubscriptionMsg());
    public static pb::MessageParser<SubscriptionMsg> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SubscriptionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SubscriptionMsg(SubscriptionMsg other) : this() {
      publisherId_ = other.publisherId_;
      subscriberId_ = other.subscriberId_;
    }

    public SubscriptionMsg Clone() {
      return new SubscriptionMsg(this);
    }

    /// <summary>Field number for the "publisher_id" field.</summary>
    public const int PublisherIdFieldNumber = 1;
    private string publisherId_ = "";
    public string PublisherId {
      get { return publisherId_; }
      set {
        publisherId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subscriber_id" field.</summary>
    public const int SubscriberIdFieldNumber = 2;
    private string subscriberId_ = "";
    public string SubscriberId {
      get { return subscriberId_; }
      set {
        subscriberId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SubscriptionMsg);
    }

    public bool Equals(SubscriptionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublisherId != other.PublisherId) return false;
      if (SubscriberId != other.SubscriberId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PublisherId.Length != 0) hash ^= PublisherId.GetHashCode();
      if (SubscriberId.Length != 0) hash ^= SubscriberId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PublisherId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublisherId);
      }
      if (SubscriberId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubscriberId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PublisherId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublisherId);
      }
      if (SubscriberId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriberId);
      }
      return size;
    }

    public void MergeFrom(SubscriptionMsg other) {
      if (other == null) {
        return;
      }
      if (other.PublisherId.Length != 0) {
        PublisherId = other.PublisherId;
      }
      if (other.SubscriberId.Length != 0) {
        SubscriberId = other.SubscriberId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublisherId = input.ReadString();
            break;
          }
          case 18: {
            SubscriberId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdatedUnit : pb::IMessage<UpdatedUnit> {
    private static readonly pb::MessageParser<UpdatedUnit> _parser = new pb::MessageParser<UpdatedUnit>(() => new UpdatedUnit());
    public static pb::MessageParser<UpdatedUnit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdatedUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdatedUnit(UpdatedUnit other) : this() {
      CurrentUnit = other.currentUnit_ != null ? other.CurrentUnit.Clone() : null;
      state_ = other.state_;
    }

    public UpdatedUnit Clone() {
      return new UpdatedUnit(this);
    }

    /// <summary>Field number for the "current_unit" field.</summary>
    public const int CurrentUnitFieldNumber = 1;
    private global::DataTypes.Unit currentUnit_;
    public global::DataTypes.Unit CurrentUnit {
      get { return currentUnit_; }
      set {
        currentUnit_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::DataTypes.UnitState state_ = 0;
    public global::DataTypes.UnitState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdatedUnit);
    }

    public bool Equals(UpdatedUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentUnit, other.CurrentUnit)) return false;
      if (State != other.State) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (currentUnit_ != null) hash ^= CurrentUnit.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (currentUnit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentUnit);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (currentUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentUnit);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    public void MergeFrom(UpdatedUnit other) {
      if (other == null) {
        return;
      }
      if (other.currentUnit_ != null) {
        if (currentUnit_ == null) {
          currentUnit_ = new global::DataTypes.Unit();
        }
        CurrentUnit.MergeFrom(other.CurrentUnit);
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (currentUnit_ == null) {
              currentUnit_ = new global::DataTypes.Unit();
            }
            input.ReadMessage(currentUnit_);
            break;
          }
          case 16: {
            state_ = (global::DataTypes.UnitState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdatedUnits : pb::IMessage<UpdatedUnits> {
    private static readonly pb::MessageParser<UpdatedUnits> _parser = new pb::MessageParser<UpdatedUnits>(() => new UpdatedUnits());
    public static pb::MessageParser<UpdatedUnits> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdatedUnits() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdatedUnits(UpdatedUnits other) : this() {
      items_ = other.items_.Clone();
    }

    public UpdatedUnits Clone() {
      return new UpdatedUnits(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.UpdatedUnit> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.UpdatedUnit.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.UpdatedUnit> items_ = new pbc::RepeatedField<global::DataTypes.UpdatedUnit>();
    public pbc::RepeatedField<global::DataTypes.UpdatedUnit> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdatedUnits);
    }

    public bool Equals(UpdatedUnits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(UpdatedUnits other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Units : pb::IMessage<Units> {
    private static readonly pb::MessageParser<Units> _parser = new pb::MessageParser<Units>(() => new Units());
    public static pb::MessageParser<Units> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Units() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Units(Units other) : this() {
      items_ = other.items_.Clone();
    }

    public Units Clone() {
      return new Units(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::DataTypes.Unit>.Codec _map_items_codec
        = new pbc::MapField<string, global::DataTypes.Unit>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::DataTypes.Unit.Parser), 10);
    private readonly pbc::MapField<string, global::DataTypes.Unit> items_ = new pbc::MapField<string, global::DataTypes.Unit>();
    public pbc::MapField<string, global::DataTypes.Unit> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Units);
    }

    public bool Equals(Units other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      return size;
    }

    public void MergeFrom(Units other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnitConfiguration : pb::IMessage<UnitConfiguration> {
    private static readonly pb::MessageParser<UnitConfiguration> _parser = new pb::MessageParser<UnitConfiguration>(() => new UnitConfiguration());
    public static pb::MessageParser<UnitConfiguration> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UnitConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UnitConfiguration(UnitConfiguration other) : this() {
      masterIpAddress_ = other.masterIpAddress_;
    }

    public UnitConfiguration Clone() {
      return new UnitConfiguration(this);
    }

    /// <summary>Field number for the "master_ip_address" field.</summary>
    public const int MasterIpAddressFieldNumber = 1;
    private string masterIpAddress_ = "";
    public string MasterIpAddress {
      get { return masterIpAddress_; }
      set {
        masterIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UnitConfiguration);
    }

    public bool Equals(UnitConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MasterIpAddress != other.MasterIpAddress) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MasterIpAddress.Length != 0) hash ^= MasterIpAddress.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MasterIpAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MasterIpAddress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MasterIpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterIpAddress);
      }
      return size;
    }

    public void MergeFrom(UnitConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.MasterIpAddress.Length != 0) {
        MasterIpAddress = other.MasterIpAddress;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MasterIpAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnitLocationState : pb::IMessage<UnitLocationState> {
    private static readonly pb::MessageParser<UnitLocationState> _parser = new pb::MessageParser<UnitLocationState>(() => new UnitLocationState());
    public static pb::MessageParser<UnitLocationState> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.UnitReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UnitLocationState() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UnitLocationState(UnitLocationState other) : this() {
      locationId_ = other.locationId_;
      state_ = other.state_;
    }

    public UnitLocationState Clone() {
      return new UnitLocationState(this);
    }

    /// <summary>Field number for the "location_id" field.</summary>
    public const int LocationIdFieldNumber = 1;
    private string locationId_ = "";
    public string LocationId {
      get { return locationId_; }
      set {
        locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::DataTypes.LocationState state_ = 0;
    public global::DataTypes.LocationState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UnitLocationState);
    }

    public bool Equals(UnitLocationState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocationId != other.LocationId) return false;
      if (State != other.State) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LocationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocationId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (LocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    public void MergeFrom(UnitLocationState other) {
      if (other == null) {
        return;
      }
      if (other.LocationId.Length != 0) {
        LocationId = other.LocationId;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LocationId = input.ReadString();
            break;
          }
          case 16: {
            state_ = (global::DataTypes.LocationState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
