// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/database_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Services {
  public static class DatabaseService
  {
    static readonly string __ServiceName = "Services.DatabaseService";

    static readonly Marshaller<global::DataTypes.MessageBytes> __Marshaller_MessageBytes = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.MessageBytes.Parser.ParseFrom);

    static readonly Method<global::DataTypes.MessageBytes, global::DataTypes.MessageBytes> __Method_Get = new Method<global::DataTypes.MessageBytes, global::DataTypes.MessageBytes>(
        MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_MessageBytes,
        __Marshaller_MessageBytes);

    static readonly Method<global::DataTypes.MessageBytes, global::DataTypes.MessageBytes> __Method_Commit = new Method<global::DataTypes.MessageBytes, global::DataTypes.MessageBytes>(
        MethodType.Unary,
        __ServiceName,
        "Commit",
        __Marshaller_MessageBytes,
        __Marshaller_MessageBytes);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.DatabaseServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DatabaseService</summary>
    public abstract class DatabaseServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::DataTypes.MessageBytes> Get(global::DataTypes.MessageBytes request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DataTypes.MessageBytes> Commit(global::DataTypes.MessageBytes request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DatabaseService</summary>
    public class DatabaseServiceClient : ClientBase<DatabaseServiceClient>
    {
      /// <summary>Creates a new client for DatabaseService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatabaseServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DatabaseService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatabaseServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatabaseServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatabaseServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::DataTypes.MessageBytes Get(global::DataTypes.MessageBytes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Get(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DataTypes.MessageBytes Get(global::DataTypes.MessageBytes request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual AsyncUnaryCall<global::DataTypes.MessageBytes> GetAsync(global::DataTypes.MessageBytes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::DataTypes.MessageBytes> GetAsync(global::DataTypes.MessageBytes request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual global::DataTypes.MessageBytes Commit(global::DataTypes.MessageBytes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Commit(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DataTypes.MessageBytes Commit(global::DataTypes.MessageBytes request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Commit, null, options, request);
      }
      public virtual AsyncUnaryCall<global::DataTypes.MessageBytes> CommitAsync(global::DataTypes.MessageBytes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CommitAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::DataTypes.MessageBytes> CommitAsync(global::DataTypes.MessageBytes request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Commit, null, options, request);
      }
      protected override DatabaseServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(DatabaseServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Commit, serviceImpl.Commit).Build();
    }

  }
}
#endregion
