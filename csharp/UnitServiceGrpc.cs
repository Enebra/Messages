// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/unit_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Services {
  public static class UnitService
  {
    static readonly string __ServiceName = "Services.UnitService";

    static readonly Marshaller<global::DataTypes.Location> __Marshaller_Location = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Location.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.FrameBytes> __Marshaller_FrameBytes = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.FrameBytes.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.Devices> __Marshaller_Devices = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Devices.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.Device> __Marshaller_Device = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Device.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.CardMsg> __Marshaller_CardMsg = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.CardMsg.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.CheckMsg> __Marshaller_CheckMsg = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.CheckMsg.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.Faces> __Marshaller_Faces = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Faces.Parser.ParseFrom);

    static readonly Method<global::DataTypes.Location, global::Google.Protobuf.WellKnownTypes.Empty> __Method_OpenDoor = new Method<global::DataTypes.Location, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "OpenDoor",
        __Marshaller_Location,
        __Marshaller_Empty);

    static readonly Method<global::DataTypes.Location, global::DataTypes.FrameBytes> __Method_GetLocationStream = new Method<global::DataTypes.Location, global::DataTypes.FrameBytes>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetLocationStream",
        __Marshaller_Location,
        __Marshaller_FrameBytes);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::DataTypes.Devices> __Method_GetDevices = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::DataTypes.Devices>(
        MethodType.Unary,
        __ServiceName,
        "GetDevices",
        __Marshaller_Empty,
        __Marshaller_Devices);

    static readonly Method<global::DataTypes.Location, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateLocation = new Method<global::DataTypes.Location, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "UpdateLocation",
        __Marshaller_Location,
        __Marshaller_Empty);

    static readonly Method<global::DataTypes.Device, global::DataTypes.CardMsg> __Method_GetCard = new Method<global::DataTypes.Device, global::DataTypes.CardMsg>(
        MethodType.Unary,
        __ServiceName,
        "GetCard",
        __Marshaller_Device,
        __Marshaller_CardMsg);

    static readonly Method<global::DataTypes.Device, global::DataTypes.CheckMsg> __Method_CheckDevice = new Method<global::DataTypes.Device, global::DataTypes.CheckMsg>(
        MethodType.Unary,
        __ServiceName,
        "CheckDevice",
        __Marshaller_Device,
        __Marshaller_CheckMsg);

    static readonly Method<global::DataTypes.Device, global::DataTypes.FrameBytes> __Method_GetDeviceStream = new Method<global::DataTypes.Device, global::DataTypes.FrameBytes>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetDeviceStream",
        __Marshaller_Device,
        __Marshaller_FrameBytes);

    static readonly Method<global::DataTypes.Device, global::DataTypes.Faces> __Method_Enroll = new Method<global::DataTypes.Device, global::DataTypes.Faces>(
        MethodType.Unary,
        __ServiceName,
        "Enroll",
        __Marshaller_Device,
        __Marshaller_Faces);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.UnitServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UnitService</summary>
    public abstract class UnitServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> OpenDoor(global::DataTypes.Location request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetLocationStream(global::DataTypes.Location request, IServerStreamWriter<global::DataTypes.FrameBytes> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DataTypes.Devices> GetDevices(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateLocation(global::DataTypes.Location request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// on person registration      
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::DataTypes.CardMsg> GetCard(global::DataTypes.Device request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DataTypes.CheckMsg> CheckDevice(global::DataTypes.Device request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetDeviceStream(global::DataTypes.Device request, IServerStreamWriter<global::DataTypes.FrameBytes> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  on person registration &amp; identification      
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::DataTypes.Faces> Enroll(global::DataTypes.Device request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UnitService</summary>
    public class UnitServiceClient : ClientBase<UnitServiceClient>
    {
      /// <summary>Creates a new client for UnitService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UnitServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UnitService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UnitServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UnitServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UnitServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Google.Protobuf.WellKnownTypes.Empty OpenDoor(global::DataTypes.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return OpenDoor(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty OpenDoor(global::DataTypes.Location request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OpenDoor, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> OpenDoorAsync(global::DataTypes.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return OpenDoorAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> OpenDoorAsync(global::DataTypes.Location request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OpenDoor, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::DataTypes.FrameBytes> GetLocationStream(global::DataTypes.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLocationStream(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::DataTypes.FrameBytes> GetLocationStream(global::DataTypes.Location request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetLocationStream, null, options, request);
      }
      public virtual global::DataTypes.Devices GetDevices(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDevices(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DataTypes.Devices GetDevices(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDevices, null, options, request);
      }
      public virtual AsyncUnaryCall<global::DataTypes.Devices> GetDevicesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDevicesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::DataTypes.Devices> GetDevicesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDevices, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateLocation(global::DataTypes.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateLocation(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateLocation(global::DataTypes.Location request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateLocation, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateLocationAsync(global::DataTypes.Location request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateLocationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateLocationAsync(global::DataTypes.Location request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateLocation, null, options, request);
      }
      /// <summary>
      /// on person registration      
      /// </summary>
      public virtual global::DataTypes.CardMsg GetCard(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCard(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// on person registration      
      /// </summary>
      public virtual global::DataTypes.CardMsg GetCard(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCard, null, options, request);
      }
      /// <summary>
      /// on person registration      
      /// </summary>
      public virtual AsyncUnaryCall<global::DataTypes.CardMsg> GetCardAsync(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCardAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// on person registration      
      /// </summary>
      public virtual AsyncUnaryCall<global::DataTypes.CardMsg> GetCardAsync(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCard, null, options, request);
      }
      public virtual global::DataTypes.CheckMsg CheckDevice(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckDevice(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DataTypes.CheckMsg CheckDevice(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckDevice, null, options, request);
      }
      public virtual AsyncUnaryCall<global::DataTypes.CheckMsg> CheckDeviceAsync(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckDeviceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::DataTypes.CheckMsg> CheckDeviceAsync(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckDevice, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::DataTypes.FrameBytes> GetDeviceStream(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDeviceStream(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::DataTypes.FrameBytes> GetDeviceStream(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetDeviceStream, null, options, request);
      }
      /// <summary>
      ///  on person registration &amp; identification      
      /// </summary>
      public virtual global::DataTypes.Faces Enroll(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Enroll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  on person registration &amp; identification      
      /// </summary>
      public virtual global::DataTypes.Faces Enroll(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Enroll, null, options, request);
      }
      /// <summary>
      ///  on person registration &amp; identification      
      /// </summary>
      public virtual AsyncUnaryCall<global::DataTypes.Faces> EnrollAsync(global::DataTypes.Device request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EnrollAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  on person registration &amp; identification      
      /// </summary>
      public virtual AsyncUnaryCall<global::DataTypes.Faces> EnrollAsync(global::DataTypes.Device request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Enroll, null, options, request);
      }
      protected override UnitServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UnitServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(UnitServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OpenDoor, serviceImpl.OpenDoor)
          .AddMethod(__Method_GetLocationStream, serviceImpl.GetLocationStream)
          .AddMethod(__Method_GetDevices, serviceImpl.GetDevices)
          .AddMethod(__Method_UpdateLocation, serviceImpl.UpdateLocation)
          .AddMethod(__Method_GetCard, serviceImpl.GetCard)
          .AddMethod(__Method_CheckDevice, serviceImpl.CheckDevice)
          .AddMethod(__Method_GetDeviceStream, serviceImpl.GetDeviceStream)
          .AddMethod(__Method_Enroll, serviceImpl.Enroll).Build();
    }

  }
}
#endregion
