// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/entity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/entity.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class EntityReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/entity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EntityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZkYXRhdHlwZXMvZW50aXR5LnByb3RvEglEYXRhVHlwZXMaFmRhdGF0eXBl",
            "cy9wZXJzb24ucHJvdG8aFGRhdGF0eXBlcy9jYXJkLnByb3RvGhVkYXRhdHlw",
            "ZXMvcGhvdG8ucHJvdG8aGGRhdGF0eXBlcy9sb2NhdGlvbi5wcm90bxocZGF0",
            "YXR5cGVzL3Zpc2l0X3JlY29yZC5wcm90bxoVZGF0YXR5cGVzL2dyb3VwLnBy",
            "b3RvIvsBCgZFbnRpdHkSHwoEY2FyZBgBIAEoCzIPLkRhdGFUeXBlcy5DYXJk",
            "SAASIwoGcGVyc29uGAIgASgLMhEuRGF0YVR5cGVzLlBlcnNvbkgAEi4KDHZp",
            "c2l0X3JlY29yZBgDIAEoCzIWLkRhdGFUeXBlcy5WaXNpdFJlY29yZEgAEicK",
            "CGxvY2F0aW9uGAQgASgLMhMuRGF0YVR5cGVzLkxvY2F0aW9uSAASIQoFcGhv",
            "dG8YBSABKAsyEC5EYXRhVHlwZXMuUGhvdG9IABIhCgVncm91cBgGIAEoCzIQ",
            "LkRhdGFUeXBlcy5Hcm91cEgAQgwKCnZhbHVlX3R5cGUiLAoIRW50aXRpZXMS",
            "IAoFaXRlbXMYASADKAsyES5EYXRhVHlwZXMuRW50aXR5QksKB2V4LmdycGNa",
            "OmdpdGh1Yi5jb20vRW5lYnJhL1NlcnZpY2VDb29yZGluYXRvci9ncnBjL2Rh",
            "dGF0eXBlcy9lbnRpdHmiAgNSVEdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.PersonReflection.Descriptor, global::DataTypes.CardReflection.Descriptor, global::DataTypes.PhotoReflection.Descriptor, global::DataTypes.LocationReflection.Descriptor, global::DataTypes.VisitRecordReflection.Descriptor, global::DataTypes.GroupReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Entity), global::DataTypes.Entity.Parser, new[]{ "Card", "Person", "VisitRecord", "Location", "Photo", "Group" }, new[]{ "ValueType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Entities), global::DataTypes.Entities.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.EntityReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Entity(Entity other) : this() {
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.Card:
          Card = other.Card.Clone();
          break;
        case ValueTypeOneofCase.Person:
          Person = other.Person.Clone();
          break;
        case ValueTypeOneofCase.VisitRecord:
          VisitRecord = other.VisitRecord.Clone();
          break;
        case ValueTypeOneofCase.Location:
          Location = other.Location.Clone();
          break;
        case ValueTypeOneofCase.Photo:
          Photo = other.Photo.Clone();
          break;
        case ValueTypeOneofCase.Group:
          Group = other.Group.Clone();
          break;
      }

    }

    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    public global::DataTypes.Card Card {
      get { return valueTypeCase_ == ValueTypeOneofCase.Card ? (global::DataTypes.Card) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Card;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 2;
    public global::DataTypes.Person Person {
      get { return valueTypeCase_ == ValueTypeOneofCase.Person ? (global::DataTypes.Person) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Person;
      }
    }

    /// <summary>Field number for the "visit_record" field.</summary>
    public const int VisitRecordFieldNumber = 3;
    public global::DataTypes.VisitRecord VisitRecord {
      get { return valueTypeCase_ == ValueTypeOneofCase.VisitRecord ? (global::DataTypes.VisitRecord) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.VisitRecord;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    public global::DataTypes.Location Location {
      get { return valueTypeCase_ == ValueTypeOneofCase.Location ? (global::DataTypes.Location) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Location;
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 5;
    public global::DataTypes.Photo Photo {
      get { return valueTypeCase_ == ValueTypeOneofCase.Photo ? (global::DataTypes.Photo) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Photo;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 6;
    public global::DataTypes.Group Group {
      get { return valueTypeCase_ == ValueTypeOneofCase.Group ? (global::DataTypes.Group) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Group;
      }
    }

    private object valueType_;
    /// <summary>Enum of possible cases for the "value_type" oneof.</summary>
    public enum ValueTypeOneofCase {
      None = 0,
      Card = 1,
      Person = 2,
      VisitRecord = 3,
      Location = 4,
      Photo = 5,
      Group = 6,
    }
    private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
    public ValueTypeOneofCase ValueTypeCase {
      get { return valueTypeCase_; }
    }

    public void ClearValueType() {
      valueTypeCase_ = ValueTypeOneofCase.None;
      valueType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!object.Equals(VisitRecord, other.VisitRecord)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (ValueTypeCase != other.ValueTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (valueTypeCase_ == ValueTypeOneofCase.Card) hash ^= Card.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Person) hash ^= Person.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) hash ^= VisitRecord.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Location) hash ^= Location.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Photo) hash ^= Photo.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Group) hash ^= Group.GetHashCode();
      hash ^= (int) valueTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (valueTypeCase_ == ValueTypeOneofCase.Card) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Person) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) {
        output.WriteRawTag(26);
        output.WriteMessage(VisitRecord);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Location) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Photo) {
        output.WriteRawTag(42);
        output.WriteMessage(Photo);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Group) {
        output.WriteRawTag(50);
        output.WriteMessage(Group);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (valueTypeCase_ == ValueTypeOneofCase.Card) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Person) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisitRecord);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Location) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Photo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Group) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      return size;
    }

    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.Card:
          Card = other.Card;
          break;
        case ValueTypeOneofCase.Person:
          Person = other.Person;
          break;
        case ValueTypeOneofCase.VisitRecord:
          VisitRecord = other.VisitRecord;
          break;
        case ValueTypeOneofCase.Location:
          Location = other.Location;
          break;
        case ValueTypeOneofCase.Photo:
          Photo = other.Photo;
          break;
        case ValueTypeOneofCase.Group:
          Group = other.Group;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::DataTypes.Card subBuilder = new global::DataTypes.Card();
            if (valueTypeCase_ == ValueTypeOneofCase.Card) {
              subBuilder.MergeFrom(Card);
            }
            input.ReadMessage(subBuilder);
            Card = subBuilder;
            break;
          }
          case 18: {
            global::DataTypes.Person subBuilder = new global::DataTypes.Person();
            if (valueTypeCase_ == ValueTypeOneofCase.Person) {
              subBuilder.MergeFrom(Person);
            }
            input.ReadMessage(subBuilder);
            Person = subBuilder;
            break;
          }
          case 26: {
            global::DataTypes.VisitRecord subBuilder = new global::DataTypes.VisitRecord();
            if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) {
              subBuilder.MergeFrom(VisitRecord);
            }
            input.ReadMessage(subBuilder);
            VisitRecord = subBuilder;
            break;
          }
          case 34: {
            global::DataTypes.Location subBuilder = new global::DataTypes.Location();
            if (valueTypeCase_ == ValueTypeOneofCase.Location) {
              subBuilder.MergeFrom(Location);
            }
            input.ReadMessage(subBuilder);
            Location = subBuilder;
            break;
          }
          case 42: {
            global::DataTypes.Photo subBuilder = new global::DataTypes.Photo();
            if (valueTypeCase_ == ValueTypeOneofCase.Photo) {
              subBuilder.MergeFrom(Photo);
            }
            input.ReadMessage(subBuilder);
            Photo = subBuilder;
            break;
          }
          case 50: {
            global::DataTypes.Group subBuilder = new global::DataTypes.Group();
            if (valueTypeCase_ == ValueTypeOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Entities : pb::IMessage<Entities> {
    private static readonly pb::MessageParser<Entities> _parser = new pb::MessageParser<Entities>(() => new Entities());
    public static pb::MessageParser<Entities> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.EntityReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Entities() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Entities(Entities other) : this() {
      items_ = other.items_.Clone();
    }

    public Entities Clone() {
      return new Entities(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.Entity> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.Entity.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Entity> items_ = new pbc::RepeatedField<global::DataTypes.Entity>();
    public pbc::RepeatedField<global::DataTypes.Entity> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Entities);
    }

    public bool Equals(Entities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(Entities other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
