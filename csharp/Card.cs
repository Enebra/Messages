// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/card.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/card.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CardReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/card.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkYXRhdHlwZXMvY2FyZC5wcm90bxIJRGF0YVR5cGVzGhRkYXRhdHlwZXMv",
            "ZGF0YS5wcm90byJTCgRDYXJkEikKEXVuaXF1ZV9pZGVudGlmaWVyGAEgASgL",
            "Mg4uRGF0YVR5cGVzLktleRIgCghvd25lcl9pZBgCIAEoCzIOLkRhdGFUeXBl",
            "cy5LZXkiNgoFQ2FyZHMSHgoFaXRlbXMYASADKAsyDy5EYXRhVHlwZXMuQ2Fy",
            "ZBINCgVjb3VudBgCIAEoA0IPCgdleC5ncnBjogIDUlRHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Card), global::DataTypes.Card.Parser, new[]{ "UniqueIdentifier", "OwnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Cards), global::DataTypes.Cards.Parser, new[]{ "Items", "Count" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.CardReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Card(Card other) : this() {
      UniqueIdentifier = other.uniqueIdentifier_ != null ? other.UniqueIdentifier.Clone() : null;
      OwnerId = other.ownerId_ != null ? other.OwnerId.Clone() : null;
    }

    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "unique_identifier" field.</summary>
    public const int UniqueIdentifierFieldNumber = 1;
    private global::DataTypes.Key uniqueIdentifier_;
    public global::DataTypes.Key UniqueIdentifier {
      get { return uniqueIdentifier_; }
      set {
        uniqueIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private global::DataTypes.Key ownerId_;
    public global::DataTypes.Key OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UniqueIdentifier, other.UniqueIdentifier)) return false;
      if (!object.Equals(OwnerId, other.OwnerId)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (uniqueIdentifier_ != null) hash ^= UniqueIdentifier.GetHashCode();
      if (ownerId_ != null) hash ^= OwnerId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (uniqueIdentifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UniqueIdentifier);
      }
      if (ownerId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OwnerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (uniqueIdentifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UniqueIdentifier);
      }
      if (ownerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OwnerId);
      }
      return size;
    }

    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.uniqueIdentifier_ != null) {
        if (uniqueIdentifier_ == null) {
          uniqueIdentifier_ = new global::DataTypes.Key();
        }
        UniqueIdentifier.MergeFrom(other.UniqueIdentifier);
      }
      if (other.ownerId_ != null) {
        if (ownerId_ == null) {
          ownerId_ = new global::DataTypes.Key();
        }
        OwnerId.MergeFrom(other.OwnerId);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (uniqueIdentifier_ == null) {
              uniqueIdentifier_ = new global::DataTypes.Key();
            }
            input.ReadMessage(uniqueIdentifier_);
            break;
          }
          case 18: {
            if (ownerId_ == null) {
              ownerId_ = new global::DataTypes.Key();
            }
            input.ReadMessage(ownerId_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Cards : pb::IMessage<Cards> {
    private static readonly pb::MessageParser<Cards> _parser = new pb::MessageParser<Cards>(() => new Cards());
    public static pb::MessageParser<Cards> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.CardReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Cards() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Cards(Cards other) : this() {
      items_ = other.items_.Clone();
      count_ = other.count_;
    }

    public Cards Clone() {
      return new Cards(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.Card> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.Card.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Card> items_ = new pbc::RepeatedField<global::DataTypes.Card>();
    public pbc::RepeatedField<global::DataTypes.Card> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Cards);
    }

    public bool Equals(Cards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    public void MergeFrom(Cards other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
