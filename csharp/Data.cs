// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/data.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkYXRhdHlwZXMvZGF0YS5wcm90bxIJRGF0YVR5cGVzIj8KDE1lc3NhZ2VC",
            "eXRlcxIMCgRkYXRhGAEgASgMEiEKBHR5cGUYAiABKA4yEy5EYXRhVHlwZXMu",
            "RGF0YVR5cGUiLgoDS2V5EgwKAmlkGAEgASgDSAASDgoEZ3VpZBgCIAEoCUgA",
            "QgkKB2lkX3R5cGUqcAoIRGF0YVR5cGUSDAoITm9uZVR5cGUQABISCg5HZXRS",
            "ZXF1ZXN0VHlwZRABEhMKD0dldFJlc3BvbnNlVHlwZRACEhUKEUNvbW1pdFJl",
            "cXVlc3RUeXBlEAMSFgoSQ29tbWl0UmVzcG9uc2VUeXBlEARCDwoHZXguZ3Jw",
            "Y6ICA1JUR2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataTypes.DataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.MessageBytes), global::DataTypes.MessageBytes.Parser, new[]{ "Data", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Key), global::DataTypes.Key.Parser, new[]{ "Id", "Guid" }, new[]{ "IdType" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DataType {
    [pbr::OriginalName("NoneType")] NoneType = 0,
    [pbr::OriginalName("GetRequestType")] GetRequestType = 1,
    [pbr::OriginalName("GetResponseType")] GetResponseType = 2,
    [pbr::OriginalName("CommitRequestType")] CommitRequestType = 3,
    [pbr::OriginalName("CommitResponseType")] CommitResponseType = 4,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageBytes : pb::IMessage<MessageBytes> {
    private static readonly pb::MessageParser<MessageBytes> _parser = new pb::MessageParser<MessageBytes>(() => new MessageBytes());
    public static pb::MessageParser<MessageBytes> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.DataReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MessageBytes() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MessageBytes(MessageBytes other) : this() {
      data_ = other.data_;
      type_ = other.type_;
    }

    public MessageBytes Clone() {
      return new MessageBytes(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::DataTypes.DataType type_ = 0;
    public global::DataTypes.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MessageBytes);
    }

    public bool Equals(MessageBytes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(MessageBytes other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::DataTypes.DataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Key : pb::IMessage<Key> {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.DataReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Key(Key other) : this() {
      switch (other.IdTypeCase) {
        case IdTypeOneofCase.Id:
          Id = other.Id;
          break;
        case IdTypeOneofCase.Guid:
          Guid = other.Guid;
          break;
      }

    }

    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    public long Id {
      get { return idTypeCase_ == IdTypeOneofCase.Id ? (long) idType_ : 0L; }
      set {
        idType_ = value;
        idTypeCase_ = IdTypeOneofCase.Id;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    public string Guid {
      get { return idTypeCase_ == IdTypeOneofCase.Guid ? (string) idType_ : ""; }
      set {
        idType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idTypeCase_ = IdTypeOneofCase.Guid;
      }
    }

    private object idType_;
    /// <summary>Enum of possible cases for the "id_type" oneof.</summary>
    public enum IdTypeOneofCase {
      None = 0,
      Id = 1,
      Guid = 2,
    }
    private IdTypeOneofCase idTypeCase_ = IdTypeOneofCase.None;
    public IdTypeOneofCase IdTypeCase {
      get { return idTypeCase_; }
    }

    public void ClearIdType() {
      idTypeCase_ = IdTypeOneofCase.None;
      idType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Guid != other.Guid) return false;
      if (IdTypeCase != other.IdTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (idTypeCase_ == IdTypeOneofCase.Id) hash ^= Id.GetHashCode();
      if (idTypeCase_ == IdTypeOneofCase.Guid) hash ^= Guid.GetHashCode();
      hash ^= (int) idTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (idTypeCase_ == IdTypeOneofCase.Id) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (idTypeCase_ == IdTypeOneofCase.Guid) {
        output.WriteRawTag(18);
        output.WriteString(Guid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (idTypeCase_ == IdTypeOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (idTypeCase_ == IdTypeOneofCase.Guid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      return size;
    }

    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      switch (other.IdTypeCase) {
        case IdTypeOneofCase.Id:
          Id = other.Id;
          break;
        case IdTypeOneofCase.Guid:
          Guid = other.Guid;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Guid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
