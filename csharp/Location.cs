// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/location.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/location.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LocationReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/location.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhkYXRhdHlwZXMvbG9jYXRpb24ucHJvdG8SCURhdGFUeXBlcxoXZGF0YXR5",
            "cGVzL2RldmljZXMucHJvdG8igwEKCExvY2F0aW9uEgoKAmlkGAEgASgJEgwK",
            "BG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSGAoQdW5pdF9tYWNf",
            "YWRkcmVzcxgEIAEoCRIuCg1hY2Nlc3NfZGV2aWNlGAUgASgLMhcuRGF0YVR5",
            "cGVzLkFjY2Vzc0RldmljZSI+CglMb2NhdGlvbnMSIgoFaXRlbXMYASADKAsy",
            "Ey5EYXRhVHlwZXMuTG9jYXRpb24SDQoFY291bnQYAiABKAMqSwoNTG9jYXRp",
            "b25TdGF0ZRIVChFVbnNwZWNpZmllZF9TdGF0ZRAAEgoKBk9wZW5lZBABEgoK",
            "BkNsb3NlZBACEgsKB0ZhaWx1cmUQA0IPCgdleC5ncnBjogIDUlRHYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.DevicesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataTypes.LocationState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Location), global::DataTypes.Location.Parser, new[]{ "Id", "Name", "Description", "UnitMacAddress", "AccessDevice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Locations), global::DataTypes.Locations.Parser, new[]{ "Items", "Count" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LocationState {
    [pbr::OriginalName("Unspecified_State")] UnspecifiedState = 0,
    [pbr::OriginalName("Opened")] Opened = 1,
    [pbr::OriginalName("Closed")] Closed = 2,
    [pbr::OriginalName("Failure")] Failure = 3,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.LocationReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Location(Location other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      unitMacAddress_ = other.unitMacAddress_;
      AccessDevice = other.accessDevice_ != null ? other.AccessDevice.Clone() : null;
    }

    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit_mac_address" field.</summary>
    public const int UnitMacAddressFieldNumber = 4;
    private string unitMacAddress_ = "";
    public string UnitMacAddress {
      get { return unitMacAddress_; }
      set {
        unitMacAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_device" field.</summary>
    public const int AccessDeviceFieldNumber = 5;
    private global::DataTypes.AccessDevice accessDevice_;
    public global::DataTypes.AccessDevice AccessDevice {
      get { return accessDevice_; }
      set {
        accessDevice_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (UnitMacAddress != other.UnitMacAddress) return false;
      if (!object.Equals(AccessDevice, other.AccessDevice)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (UnitMacAddress.Length != 0) hash ^= UnitMacAddress.GetHashCode();
      if (accessDevice_ != null) hash ^= AccessDevice.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (UnitMacAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnitMacAddress);
      }
      if (accessDevice_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AccessDevice);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (UnitMacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitMacAddress);
      }
      if (accessDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessDevice);
      }
      return size;
    }

    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.UnitMacAddress.Length != 0) {
        UnitMacAddress = other.UnitMacAddress;
      }
      if (other.accessDevice_ != null) {
        if (accessDevice_ == null) {
          accessDevice_ = new global::DataTypes.AccessDevice();
        }
        AccessDevice.MergeFrom(other.AccessDevice);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            UnitMacAddress = input.ReadString();
            break;
          }
          case 42: {
            if (accessDevice_ == null) {
              accessDevice_ = new global::DataTypes.AccessDevice();
            }
            input.ReadMessage(accessDevice_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Locations : pb::IMessage<Locations> {
    private static readonly pb::MessageParser<Locations> _parser = new pb::MessageParser<Locations>(() => new Locations());
    public static pb::MessageParser<Locations> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.LocationReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Locations() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Locations(Locations other) : this() {
      items_ = other.items_.Clone();
      count_ = other.count_;
    }

    public Locations Clone() {
      return new Locations(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataTypes.Location> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DataTypes.Location.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Location> items_ = new pbc::RepeatedField<global::DataTypes.Location>();
    public pbc::RepeatedField<global::DataTypes.Location> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Locations);
    }

    public bool Equals(Locations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    public void MergeFrom(Locations other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
