// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/facial_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Services {

  /// <summary>Holder for reflection information generated from services/facial_service.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FacialServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for services/facial_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FacialServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1zZXJ2aWNlcy9mYWNpYWxfc2VydmljZS5wcm90bxIIU2VydmljZXMaFmRh",
            "dGF0eXBlcy9wZXJzb24ucHJvdG8aFWRhdGF0eXBlcy9waG90by5wcm90bxoT",
            "ZGF0YXR5cGVzL2tleS5wcm90bxoVZGF0YXR5cGVzL2dyb3VwLnByb3RvGhpk",
            "YXRhdHlwZXMvYmlvbWV0cmljcy5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2Vt",
            "cHR5LnByb3RvIsQBChBCaW9tZXRyaWNSZXF1ZXN0Eh8KBXBob3RvGAEgASgL",
            "MhAuRGF0YVR5cGVzLlBob3RvEh4KBnBlcnNvbhgCIAEoCzIOLkRhdGFUeXBl",
            "cy5LZXkSHQoFZ3JvdXAYAyABKAsyDi5EYXRhVHlwZXMuS2V5EigKBmFjdGlv",
            "bhgEIAEoDjIYLkRhdGFUeXBlcy5CaW9BY3Rpb25UeXBlEiYKBHR5cGUYBSAB",
            "KA4yGC5EYXRhVHlwZXMuQmlvbWV0cmljVHlwZSKGAQoRQmlvbWV0cmljUmVz",
            "cG9uc2USHwoFcGhvdG8YASABKAsyEC5EYXRhVHlwZXMuUGhvdG8SHgoGcGVy",
            "c29uGAIgASgLMg4uRGF0YVR5cGVzLktleRIfCgVmYWNlcxgDIAEoCzIQLkRh",
            "dGFUeXBlcy5GYWNlcxIPCgdzdWNjZXNzGAQgASgIIngKD0Jpb21ldHJpY1Vw",
            "ZGF0ZRIrCg5wZXJzb25fdXBkYXRlcxgCIAEoCzIRLkRhdGFUeXBlcy5QZXJz",
            "b25IABIpCg1ncm91cF91cGRhdGVzGAQgASgLMhAuRGF0YVR5cGVzLkdyb3Vw",
            "SABCDQoLdXBkYXRlX3R5cGUynQEKFkJpb21ldHJpY0ZhY2lhbFNlcnZpY2US",
            "RAoHUHJvY2VzcxIaLlNlcnZpY2VzLkJpb21ldHJpY1JlcXVlc3QaGy5TZXJ2",
            "aWNlcy5CaW9tZXRyaWNSZXNwb25zZSIAEj0KBlVwZGF0ZRIZLlNlcnZpY2Vz",
            "LkJpb21ldHJpY1VwZGF0ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAQlEK",
            "B2V4LmdycGNaQGdpdGh1Yi5jb20vRW5lYnJhL1NlcnZpY2VDb29yZGluYXRv",
            "ci9ncnBjL3NlcnZpY2VzL2ZhY2lhbHNlcnZpY2WiAgNSVEdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.PersonReflection.Descriptor, global::DataTypes.PhotoReflection.Descriptor, global::DataTypes.KeyReflection.Descriptor, global::DataTypes.GroupReflection.Descriptor, global::DataTypes.BiometricsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.BiometricRequest), global::Services.BiometricRequest.Parser, new[]{ "Photo", "Person", "Group", "Action", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.BiometricResponse), global::Services.BiometricResponse.Parser, new[]{ "Photo", "Person", "Faces", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.BiometricUpdate), global::Services.BiometricUpdate.Parser, new[]{ "PersonUpdates", "GroupUpdates" }, new[]{ "UpdateType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TODO move to queries
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BiometricRequest : pb::IMessage<BiometricRequest> {
    private static readonly pb::MessageParser<BiometricRequest> _parser = new pb::MessageParser<BiometricRequest>(() => new BiometricRequest());
    public static pb::MessageParser<BiometricRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.FacialServiceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BiometricRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BiometricRequest(BiometricRequest other) : this() {
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
      Person = other.person_ != null ? other.Person.Clone() : null;
      Group = other.group_ != null ? other.Group.Clone() : null;
      action_ = other.action_;
      type_ = other.type_;
    }

    public BiometricRequest Clone() {
      return new BiometricRequest(this);
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 1;
    private global::DataTypes.Photo photo_;
    public global::DataTypes.Photo Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 2;
    private global::DataTypes.Key person_;
    public global::DataTypes.Key Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private global::DataTypes.Key group_;
    public global::DataTypes.Key Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private global::DataTypes.BioActionType action_ = 0;
    public global::DataTypes.BioActionType Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::DataTypes.BiometricType type_ = 0;
    public global::DataTypes.BiometricType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BiometricRequest);
    }

    public bool Equals(BiometricRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Photo, other.Photo)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (Action != other.Action) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (photo_ != null) hash ^= Photo.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (photo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Photo);
      }
      if (person_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
      if (group_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Group);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Action);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(BiometricRequest other) {
      if (other == null) {
        return;
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::DataTypes.Photo();
        }
        Photo.MergeFrom(other.Photo);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          person_ = new global::DataTypes.Key();
        }
        Person.MergeFrom(other.Person);
      }
      if (other.group_ != null) {
        if (group_ == null) {
          group_ = new global::DataTypes.Key();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (photo_ == null) {
              photo_ = new global::DataTypes.Photo();
            }
            input.ReadMessage(photo_);
            break;
          }
          case 18: {
            if (person_ == null) {
              person_ = new global::DataTypes.Key();
            }
            input.ReadMessage(person_);
            break;
          }
          case 26: {
            if (group_ == null) {
              group_ = new global::DataTypes.Key();
            }
            input.ReadMessage(group_);
            break;
          }
          case 32: {
            action_ = (global::DataTypes.BioActionType) input.ReadEnum();
            break;
          }
          case 40: {
            type_ = (global::DataTypes.BiometricType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BiometricResponse : pb::IMessage<BiometricResponse> {
    private static readonly pb::MessageParser<BiometricResponse> _parser = new pb::MessageParser<BiometricResponse>(() => new BiometricResponse());
    public static pb::MessageParser<BiometricResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.FacialServiceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BiometricResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BiometricResponse(BiometricResponse other) : this() {
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
      Person = other.person_ != null ? other.Person.Clone() : null;
      Faces = other.faces_ != null ? other.Faces.Clone() : null;
      success_ = other.success_;
    }

    public BiometricResponse Clone() {
      return new BiometricResponse(this);
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 1;
    private global::DataTypes.Photo photo_;
    public global::DataTypes.Photo Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 2;
    private global::DataTypes.Key person_;
    public global::DataTypes.Key Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "faces" field.</summary>
    public const int FacesFieldNumber = 3;
    private global::DataTypes.Faces faces_;
    public global::DataTypes.Faces Faces {
      get { return faces_; }
      set {
        faces_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 4;
    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BiometricResponse);
    }

    public bool Equals(BiometricResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Photo, other.Photo)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!object.Equals(Faces, other.Faces)) return false;
      if (Success != other.Success) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (photo_ != null) hash ^= Photo.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      if (faces_ != null) hash ^= Faces.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (photo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Photo);
      }
      if (person_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
      if (faces_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Faces);
      }
      if (Success != false) {
        output.WriteRawTag(32);
        output.WriteBool(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (faces_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Faces);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(BiometricResponse other) {
      if (other == null) {
        return;
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::DataTypes.Photo();
        }
        Photo.MergeFrom(other.Photo);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          person_ = new global::DataTypes.Key();
        }
        Person.MergeFrom(other.Person);
      }
      if (other.faces_ != null) {
        if (faces_ == null) {
          faces_ = new global::DataTypes.Faces();
        }
        Faces.MergeFrom(other.Faces);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (photo_ == null) {
              photo_ = new global::DataTypes.Photo();
            }
            input.ReadMessage(photo_);
            break;
          }
          case 18: {
            if (person_ == null) {
              person_ = new global::DataTypes.Key();
            }
            input.ReadMessage(person_);
            break;
          }
          case 26: {
            if (faces_ == null) {
              faces_ = new global::DataTypes.Faces();
            }
            input.ReadMessage(faces_);
            break;
          }
          case 32: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BiometricUpdate : pb::IMessage<BiometricUpdate> {
    private static readonly pb::MessageParser<BiometricUpdate> _parser = new pb::MessageParser<BiometricUpdate>(() => new BiometricUpdate());
    public static pb::MessageParser<BiometricUpdate> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.FacialServiceReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BiometricUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BiometricUpdate(BiometricUpdate other) : this() {
      switch (other.UpdateTypeCase) {
        case UpdateTypeOneofCase.PersonUpdates:
          PersonUpdates = other.PersonUpdates.Clone();
          break;
        case UpdateTypeOneofCase.GroupUpdates:
          GroupUpdates = other.GroupUpdates.Clone();
          break;
      }

    }

    public BiometricUpdate Clone() {
      return new BiometricUpdate(this);
    }

    /// <summary>Field number for the "person_updates" field.</summary>
    public const int PersonUpdatesFieldNumber = 2;
    public global::DataTypes.Person PersonUpdates {
      get { return updateTypeCase_ == UpdateTypeOneofCase.PersonUpdates ? (global::DataTypes.Person) updateType_ : null; }
      set {
        updateType_ = value;
        updateTypeCase_ = value == null ? UpdateTypeOneofCase.None : UpdateTypeOneofCase.PersonUpdates;
      }
    }

    /// <summary>Field number for the "group_updates" field.</summary>
    public const int GroupUpdatesFieldNumber = 4;
    public global::DataTypes.Group GroupUpdates {
      get { return updateTypeCase_ == UpdateTypeOneofCase.GroupUpdates ? (global::DataTypes.Group) updateType_ : null; }
      set {
        updateType_ = value;
        updateTypeCase_ = value == null ? UpdateTypeOneofCase.None : UpdateTypeOneofCase.GroupUpdates;
      }
    }

    private object updateType_;
    /// <summary>Enum of possible cases for the "update_type" oneof.</summary>
    public enum UpdateTypeOneofCase {
      None = 0,
      PersonUpdates = 2,
      GroupUpdates = 4,
    }
    private UpdateTypeOneofCase updateTypeCase_ = UpdateTypeOneofCase.None;
    public UpdateTypeOneofCase UpdateTypeCase {
      get { return updateTypeCase_; }
    }

    public void ClearUpdateType() {
      updateTypeCase_ = UpdateTypeOneofCase.None;
      updateType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as BiometricUpdate);
    }

    public bool Equals(BiometricUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PersonUpdates, other.PersonUpdates)) return false;
      if (!object.Equals(GroupUpdates, other.GroupUpdates)) return false;
      if (UpdateTypeCase != other.UpdateTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (updateTypeCase_ == UpdateTypeOneofCase.PersonUpdates) hash ^= PersonUpdates.GetHashCode();
      if (updateTypeCase_ == UpdateTypeOneofCase.GroupUpdates) hash ^= GroupUpdates.GetHashCode();
      hash ^= (int) updateTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (updateTypeCase_ == UpdateTypeOneofCase.PersonUpdates) {
        output.WriteRawTag(18);
        output.WriteMessage(PersonUpdates);
      }
      if (updateTypeCase_ == UpdateTypeOneofCase.GroupUpdates) {
        output.WriteRawTag(34);
        output.WriteMessage(GroupUpdates);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (updateTypeCase_ == UpdateTypeOneofCase.PersonUpdates) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonUpdates);
      }
      if (updateTypeCase_ == UpdateTypeOneofCase.GroupUpdates) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupUpdates);
      }
      return size;
    }

    public void MergeFrom(BiometricUpdate other) {
      if (other == null) {
        return;
      }
      switch (other.UpdateTypeCase) {
        case UpdateTypeOneofCase.PersonUpdates:
          PersonUpdates = other.PersonUpdates;
          break;
        case UpdateTypeOneofCase.GroupUpdates:
          GroupUpdates = other.GroupUpdates;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            global::DataTypes.Person subBuilder = new global::DataTypes.Person();
            if (updateTypeCase_ == UpdateTypeOneofCase.PersonUpdates) {
              subBuilder.MergeFrom(PersonUpdates);
            }
            input.ReadMessage(subBuilder);
            PersonUpdates = subBuilder;
            break;
          }
          case 34: {
            global::DataTypes.Group subBuilder = new global::DataTypes.Group();
            if (updateTypeCase_ == UpdateTypeOneofCase.GroupUpdates) {
              subBuilder.MergeFrom(GroupUpdates);
            }
            input.ReadMessage(subBuilder);
            GroupUpdates = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
