// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/database_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Services {

  /// <summary>Holder for reflection information generated from services/database_service.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DatabaseServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for services/database_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatabaseServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9zZXJ2aWNlcy9kYXRhYmFzZV9zZXJ2aWNlLnByb3RvEghTZXJ2aWNlcxoW",
            "ZGF0YXR5cGVzL3BlcnNvbi5wcm90bxoUZGF0YXR5cGVzL2NhcmQucHJvdG8a",
            "FWRhdGF0eXBlcy9waG90by5wcm90bxoYZGF0YXR5cGVzL2xvY2F0aW9uLnBy",
            "b3RvGhxkYXRhdHlwZXMvdmlzaXRfcmVjb3JkLnByb3RvGhRkYXRhdHlwZXMv",
            "ZGF0YS5wcm90bxoXZGF0YXR5cGVzL3F1ZXJpZXMucHJvdG8iPwoLR2V0UmVz",
            "cG9uc2USIQoFaXRlbXMYASABKAsyEi5TZXJ2aWNlcy5FbnRpdGllcxINCgVj",
            "b3VudBgCIAEoAyKDAgoKR2V0UmVxdWVzdBI1Cg5wZXJzb25fcmVxdWVzdBgB",
            "IAEoCzIbLkRhdGFUeXBlcy5HZXRQZXJzb25SZXF1ZXN0SAASMQoMY2FyZF9y",
            "ZXF1ZXN0GAIgASgLMhkuRGF0YVR5cGVzLkdldENhcmRSZXF1ZXN0SAASOQoQ",
            "bG9jYXRpb25fcmVxdWVzdBgDIAEoCzIdLkRhdGFUeXBlcy5HZXRMb2NhdGlv",
            "blJlcXVlc3RIABJAChR2aXNpdF9yZWNvcmRfcmVxdWVzdBgEIAEoCzIgLkRh",
            "dGFUeXBlcy5HZXRWaXNpdFJlY29yZFJlcXVlc3RIAEIOCgxyZXF1ZXN0X3R5",
            "cGUiNgoNQ29tbWl0UmVxdWVzdBIlCgltdXRhdGlvbnMYASADKAsyEi5TZXJ2",
            "aWNlcy5NdXRhdGlvbiJECg5Db21taXRSZXNwb25zZRIyChBtdXRhdGlvbl9y",
            "ZXN1bHRzGAEgAygLMhguU2VydmljZXMuTXV0YXRpb25SZXN1bHQiQQoOTXV0",
            "YXRpb25SZXN1bHQSIAoGZW50aXR5GAEgASgLMhAuU2VydmljZXMuRW50aXR5",
            "Eg0KBWVycm9yGAIgASgJIoMBCghNdXRhdGlvbhIiCgZpbnNlcnQYASABKAsy",
            "EC5TZXJ2aWNlcy5FbnRpdHlIABIiCgZ1cGRhdGUYAiABKAsyEC5TZXJ2aWNl",
            "cy5FbnRpdHlIABIiCgZkZWxldGUYAyABKAsyEC5TZXJ2aWNlcy5FbnRpdHlI",
            "AEILCglvcGVyYXRpb24i2AEKBkVudGl0eRIfCgRjYXJkGAEgASgLMg8uRGF0",
            "YVR5cGVzLkNhcmRIABIjCgZwZXJzb24YAiABKAsyES5EYXRhVHlwZXMuUGVy",
            "c29uSAASLgoMdmlzaXRfcmVjb3JkGAMgASgLMhYuRGF0YVR5cGVzLlZpc2l0",
            "UmVjb3JkSAASJwoIbG9jYXRpb24YBCABKAsyEy5EYXRhVHlwZXMuTG9jYXRp",
            "b25IABIhCgVQaG90bxgFIAEoCzIQLkRhdGFUeXBlcy5QaG90b0gAQgwKCnZh",
            "bHVlX3R5cGUiKwoIRW50aXRpZXMSHwoFaXRlbXMYASADKAsyEC5TZXJ2aWNl",
            "cy5FbnRpdHkyigEKD0RhdGFiYXNlU2VydmljZRI5CgNHZXQSFy5EYXRhVHlw",
            "ZXMuTWVzc2FnZUJ5dGVzGhcuRGF0YVR5cGVzLk1lc3NhZ2VCeXRlcyIAEjwK",
            "BkNvbW1pdBIXLkRhdGFUeXBlcy5NZXNzYWdlQnl0ZXMaFy5EYXRhVHlwZXMu",
            "TWVzc2FnZUJ5dGVzIgBCUwoHZXguZ3JwY1pCZ2l0aHViLmNvbS9FbmVicmEv",
            "U2VydmljZUNvb3JkaW5hdG9yL2dycGMvc2VydmljZXMvZGF0YWJhc2VzZXJ2",
            "aWNlogIDUlRHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.PersonReflection.Descriptor, global::DataTypes.CardReflection.Descriptor, global::DataTypes.PhotoReflection.Descriptor, global::DataTypes.LocationReflection.Descriptor, global::DataTypes.VisitRecordReflection.Descriptor, global::DataTypes.DataReflection.Descriptor, global::DataTypes.QueriesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.GetResponse), global::Services.GetResponse.Parser, new[]{ "Items", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.GetRequest), global::Services.GetRequest.Parser, new[]{ "PersonRequest", "CardRequest", "LocationRequest", "VisitRecordRequest" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CommitRequest), global::Services.CommitRequest.Parser, new[]{ "Mutations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CommitResponse), global::Services.CommitResponse.Parser, new[]{ "MutationResults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.MutationResult), global::Services.MutationResult.Parser, new[]{ "Entity", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.Mutation), global::Services.Mutation.Parser, new[]{ "Insert", "Update", "Delete" }, new[]{ "Operation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.Entity), global::Services.Entity.Parser, new[]{ "Card", "Person", "VisitRecord", "Location", "Photo" }, new[]{ "ValueType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.Entities), global::Services.Entities.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetResponse(GetResponse other) : this() {
      Items = other.items_ != null ? other.Items.Clone() : null;
      count_ = other.count_;
    }

    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private global::Services.Entities items_;
    public global::Services.Entities Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Items, other.Items)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (items_ != null) hash ^= Items.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (items_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Items);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          items_ = new global::Services.Entities();
        }
        Items.MergeFrom(other.Items);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (items_ == null) {
              items_ = new global::Services.Entities();
            }
            input.ReadMessage(items_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetRequest : pb::IMessage<GetRequest> {
    private static readonly pb::MessageParser<GetRequest> _parser = new pb::MessageParser<GetRequest>(() => new GetRequest());
    public static pb::MessageParser<GetRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetRequest(GetRequest other) : this() {
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.PersonRequest:
          PersonRequest = other.PersonRequest.Clone();
          break;
        case RequestTypeOneofCase.CardRequest:
          CardRequest = other.CardRequest.Clone();
          break;
        case RequestTypeOneofCase.LocationRequest:
          LocationRequest = other.LocationRequest.Clone();
          break;
        case RequestTypeOneofCase.VisitRecordRequest:
          VisitRecordRequest = other.VisitRecordRequest.Clone();
          break;
      }

    }

    public GetRequest Clone() {
      return new GetRequest(this);
    }

    /// <summary>Field number for the "person_request" field.</summary>
    public const int PersonRequestFieldNumber = 1;
    public global::DataTypes.GetPersonRequest PersonRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.PersonRequest ? (global::DataTypes.GetPersonRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.PersonRequest;
      }
    }

    /// <summary>Field number for the "card_request" field.</summary>
    public const int CardRequestFieldNumber = 2;
    public global::DataTypes.GetCardRequest CardRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.CardRequest ? (global::DataTypes.GetCardRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CardRequest;
      }
    }

    /// <summary>Field number for the "location_request" field.</summary>
    public const int LocationRequestFieldNumber = 3;
    public global::DataTypes.GetLocationRequest LocationRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.LocationRequest ? (global::DataTypes.GetLocationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.LocationRequest;
      }
    }

    /// <summary>Field number for the "visit_record_request" field.</summary>
    public const int VisitRecordRequestFieldNumber = 4;
    public global::DataTypes.GetVisitRecordRequest VisitRecordRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest ? (global::DataTypes.GetVisitRecordRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VisitRecordRequest;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "request_type" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      PersonRequest = 1,
      CardRequest = 2,
      LocationRequest = 3,
      VisitRecordRequest = 4,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as GetRequest);
    }

    public bool Equals(GetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PersonRequest, other.PersonRequest)) return false;
      if (!object.Equals(CardRequest, other.CardRequest)) return false;
      if (!object.Equals(LocationRequest, other.LocationRequest)) return false;
      if (!object.Equals(VisitRecordRequest, other.VisitRecordRequest)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) hash ^= PersonRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) hash ^= CardRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) hash ^= LocationRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) hash ^= VisitRecordRequest.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(PersonRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(CardRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(LocationRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(VisitRecordRequest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisitRecordRequest);
      }
      return size;
    }

    public void MergeFrom(GetRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.PersonRequest:
          PersonRequest = other.PersonRequest;
          break;
        case RequestTypeOneofCase.CardRequest:
          CardRequest = other.CardRequest;
          break;
        case RequestTypeOneofCase.LocationRequest:
          LocationRequest = other.LocationRequest;
          break;
        case RequestTypeOneofCase.VisitRecordRequest:
          VisitRecordRequest = other.VisitRecordRequest;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::DataTypes.GetPersonRequest subBuilder = new global::DataTypes.GetPersonRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) {
              subBuilder.MergeFrom(PersonRequest);
            }
            input.ReadMessage(subBuilder);
            PersonRequest = subBuilder;
            break;
          }
          case 18: {
            global::DataTypes.GetCardRequest subBuilder = new global::DataTypes.GetCardRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) {
              subBuilder.MergeFrom(CardRequest);
            }
            input.ReadMessage(subBuilder);
            CardRequest = subBuilder;
            break;
          }
          case 26: {
            global::DataTypes.GetLocationRequest subBuilder = new global::DataTypes.GetLocationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) {
              subBuilder.MergeFrom(LocationRequest);
            }
            input.ReadMessage(subBuilder);
            LocationRequest = subBuilder;
            break;
          }
          case 34: {
            global::DataTypes.GetVisitRecordRequest subBuilder = new global::DataTypes.GetVisitRecordRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) {
              subBuilder.MergeFrom(VisitRecordRequest);
            }
            input.ReadMessage(subBuilder);
            VisitRecordRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommitRequest : pb::IMessage<CommitRequest> {
    private static readonly pb::MessageParser<CommitRequest> _parser = new pb::MessageParser<CommitRequest>(() => new CommitRequest());
    public static pb::MessageParser<CommitRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommitRequest(CommitRequest other) : this() {
      mutations_ = other.mutations_.Clone();
    }

    public CommitRequest Clone() {
      return new CommitRequest(this);
    }

    /// <summary>Field number for the "mutations" field.</summary>
    public const int MutationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Services.Mutation> _repeated_mutations_codec
        = pb::FieldCodec.ForMessage(10, global::Services.Mutation.Parser);
    private readonly pbc::RepeatedField<global::Services.Mutation> mutations_ = new pbc::RepeatedField<global::Services.Mutation>();
    public pbc::RepeatedField<global::Services.Mutation> Mutations {
      get { return mutations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CommitRequest);
    }

    public bool Equals(CommitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mutations_.Equals(other.mutations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= mutations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mutations_.WriteTo(output, _repeated_mutations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += mutations_.CalculateSize(_repeated_mutations_codec);
      return size;
    }

    public void MergeFrom(CommitRequest other) {
      if (other == null) {
        return;
      }
      mutations_.Add(other.mutations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mutations_.AddEntriesFrom(input, _repeated_mutations_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommitResponse : pb::IMessage<CommitResponse> {
    private static readonly pb::MessageParser<CommitResponse> _parser = new pb::MessageParser<CommitResponse>(() => new CommitResponse());
    public static pb::MessageParser<CommitResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommitResponse(CommitResponse other) : this() {
      mutationResults_ = other.mutationResults_.Clone();
    }

    public CommitResponse Clone() {
      return new CommitResponse(this);
    }

    /// <summary>Field number for the "mutation_results" field.</summary>
    public const int MutationResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Services.MutationResult> _repeated_mutationResults_codec
        = pb::FieldCodec.ForMessage(10, global::Services.MutationResult.Parser);
    private readonly pbc::RepeatedField<global::Services.MutationResult> mutationResults_ = new pbc::RepeatedField<global::Services.MutationResult>();
    public pbc::RepeatedField<global::Services.MutationResult> MutationResults {
      get { return mutationResults_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CommitResponse);
    }

    public bool Equals(CommitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mutationResults_.Equals(other.mutationResults_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= mutationResults_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mutationResults_.WriteTo(output, _repeated_mutationResults_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += mutationResults_.CalculateSize(_repeated_mutationResults_codec);
      return size;
    }

    public void MergeFrom(CommitResponse other) {
      if (other == null) {
        return;
      }
      mutationResults_.Add(other.mutationResults_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mutationResults_.AddEntriesFrom(input, _repeated_mutationResults_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MutationResult : pb::IMessage<MutationResult> {
    private static readonly pb::MessageParser<MutationResult> _parser = new pb::MessageParser<MutationResult>(() => new MutationResult());
    public static pb::MessageParser<MutationResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MutationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MutationResult(MutationResult other) : this() {
      Entity = other.entity_ != null ? other.Entity.Clone() : null;
      error_ = other.error_;
    }

    public MutationResult Clone() {
      return new MutationResult(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private global::Services.Entity entity_;
    public global::Services.Entity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MutationResult);
    }

    public bool Equals(MutationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Entity, other.Entity)) return false;
      if (Error != other.Error) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    public void MergeFrom(MutationResult other) {
      if (other == null) {
        return;
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          entity_ = new global::Services.Entity();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entity_ == null) {
              entity_ = new global::Services.Entity();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mutation : pb::IMessage<Mutation> {
    private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
    public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mutation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mutation(Mutation other) : this() {
      switch (other.OperationCase) {
        case OperationOneofCase.Insert:
          Insert = other.Insert.Clone();
          break;
        case OperationOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
      }

    }

    public Mutation Clone() {
      return new Mutation(this);
    }

    /// <summary>Field number for the "insert" field.</summary>
    public const int InsertFieldNumber = 1;
    public global::Services.Entity Insert {
      get { return operationCase_ == OperationOneofCase.Insert ? (global::Services.Entity) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Insert;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 2;
    public global::Services.Entity Update {
      get { return operationCase_ == OperationOneofCase.Update ? (global::Services.Entity) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Update;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 3;
    public global::Services.Entity Delete {
      get { return operationCase_ == OperationOneofCase.Delete ? (global::Services.Entity) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Delete;
      }
    }

    private object operation_;
    /// <summary>Enum of possible cases for the "operation" oneof.</summary>
    public enum OperationOneofCase {
      None = 0,
      Insert = 1,
      Update = 2,
      Delete = 3,
    }
    private OperationOneofCase operationCase_ = OperationOneofCase.None;
    public OperationOneofCase OperationCase {
      get { return operationCase_; }
    }

    public void ClearOperation() {
      operationCase_ = OperationOneofCase.None;
      operation_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Mutation);
    }

    public bool Equals(Mutation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Insert, other.Insert)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (OperationCase != other.OperationCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (operationCase_ == OperationOneofCase.Insert) hash ^= Insert.GetHashCode();
      if (operationCase_ == OperationOneofCase.Update) hash ^= Update.GetHashCode();
      if (operationCase_ == OperationOneofCase.Delete) hash ^= Delete.GetHashCode();
      hash ^= (int) operationCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (operationCase_ == OperationOneofCase.Insert) {
        output.WriteRawTag(10);
        output.WriteMessage(Insert);
      }
      if (operationCase_ == OperationOneofCase.Update) {
        output.WriteRawTag(18);
        output.WriteMessage(Update);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        output.WriteRawTag(26);
        output.WriteMessage(Delete);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (operationCase_ == OperationOneofCase.Insert) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Insert);
      }
      if (operationCase_ == OperationOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      return size;
    }

    public void MergeFrom(Mutation other) {
      if (other == null) {
        return;
      }
      switch (other.OperationCase) {
        case OperationOneofCase.Insert:
          Insert = other.Insert;
          break;
        case OperationOneofCase.Update:
          Update = other.Update;
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Services.Entity subBuilder = new global::Services.Entity();
            if (operationCase_ == OperationOneofCase.Insert) {
              subBuilder.MergeFrom(Insert);
            }
            input.ReadMessage(subBuilder);
            Insert = subBuilder;
            break;
          }
          case 18: {
            global::Services.Entity subBuilder = new global::Services.Entity();
            if (operationCase_ == OperationOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 26: {
            global::Services.Entity subBuilder = new global::Services.Entity();
            if (operationCase_ == OperationOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Entity(Entity other) : this() {
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.Card:
          Card = other.Card.Clone();
          break;
        case ValueTypeOneofCase.Person:
          Person = other.Person.Clone();
          break;
        case ValueTypeOneofCase.VisitRecord:
          VisitRecord = other.VisitRecord.Clone();
          break;
        case ValueTypeOneofCase.Location:
          Location = other.Location.Clone();
          break;
        case ValueTypeOneofCase.Photo:
          Photo = other.Photo.Clone();
          break;
      }

    }

    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    public global::DataTypes.Card Card {
      get { return valueTypeCase_ == ValueTypeOneofCase.Card ? (global::DataTypes.Card) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Card;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 2;
    public global::DataTypes.Person Person {
      get { return valueTypeCase_ == ValueTypeOneofCase.Person ? (global::DataTypes.Person) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Person;
      }
    }

    /// <summary>Field number for the "visit_record" field.</summary>
    public const int VisitRecordFieldNumber = 3;
    public global::DataTypes.VisitRecord VisitRecord {
      get { return valueTypeCase_ == ValueTypeOneofCase.VisitRecord ? (global::DataTypes.VisitRecord) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.VisitRecord;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    public global::DataTypes.Location Location {
      get { return valueTypeCase_ == ValueTypeOneofCase.Location ? (global::DataTypes.Location) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Location;
      }
    }

    /// <summary>Field number for the "Photo" field.</summary>
    public const int PhotoFieldNumber = 5;
    public global::DataTypes.Photo Photo {
      get { return valueTypeCase_ == ValueTypeOneofCase.Photo ? (global::DataTypes.Photo) valueType_ : null; }
      set {
        valueType_ = value;
        valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.Photo;
      }
    }

    private object valueType_;
    /// <summary>Enum of possible cases for the "value_type" oneof.</summary>
    public enum ValueTypeOneofCase {
      None = 0,
      Card = 1,
      Person = 2,
      VisitRecord = 3,
      Location = 4,
      Photo = 5,
    }
    private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
    public ValueTypeOneofCase ValueTypeCase {
      get { return valueTypeCase_; }
    }

    public void ClearValueType() {
      valueTypeCase_ = ValueTypeOneofCase.None;
      valueType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!object.Equals(VisitRecord, other.VisitRecord)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      if (ValueTypeCase != other.ValueTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (valueTypeCase_ == ValueTypeOneofCase.Card) hash ^= Card.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Person) hash ^= Person.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) hash ^= VisitRecord.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Location) hash ^= Location.GetHashCode();
      if (valueTypeCase_ == ValueTypeOneofCase.Photo) hash ^= Photo.GetHashCode();
      hash ^= (int) valueTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (valueTypeCase_ == ValueTypeOneofCase.Card) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Person) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) {
        output.WriteRawTag(26);
        output.WriteMessage(VisitRecord);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Location) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Photo) {
        output.WriteRawTag(42);
        output.WriteMessage(Photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (valueTypeCase_ == ValueTypeOneofCase.Card) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Person) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisitRecord);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Location) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (valueTypeCase_ == ValueTypeOneofCase.Photo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      return size;
    }

    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      switch (other.ValueTypeCase) {
        case ValueTypeOneofCase.Card:
          Card = other.Card;
          break;
        case ValueTypeOneofCase.Person:
          Person = other.Person;
          break;
        case ValueTypeOneofCase.VisitRecord:
          VisitRecord = other.VisitRecord;
          break;
        case ValueTypeOneofCase.Location:
          Location = other.Location;
          break;
        case ValueTypeOneofCase.Photo:
          Photo = other.Photo;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::DataTypes.Card subBuilder = new global::DataTypes.Card();
            if (valueTypeCase_ == ValueTypeOneofCase.Card) {
              subBuilder.MergeFrom(Card);
            }
            input.ReadMessage(subBuilder);
            Card = subBuilder;
            break;
          }
          case 18: {
            global::DataTypes.Person subBuilder = new global::DataTypes.Person();
            if (valueTypeCase_ == ValueTypeOneofCase.Person) {
              subBuilder.MergeFrom(Person);
            }
            input.ReadMessage(subBuilder);
            Person = subBuilder;
            break;
          }
          case 26: {
            global::DataTypes.VisitRecord subBuilder = new global::DataTypes.VisitRecord();
            if (valueTypeCase_ == ValueTypeOneofCase.VisitRecord) {
              subBuilder.MergeFrom(VisitRecord);
            }
            input.ReadMessage(subBuilder);
            VisitRecord = subBuilder;
            break;
          }
          case 34: {
            global::DataTypes.Location subBuilder = new global::DataTypes.Location();
            if (valueTypeCase_ == ValueTypeOneofCase.Location) {
              subBuilder.MergeFrom(Location);
            }
            input.ReadMessage(subBuilder);
            Location = subBuilder;
            break;
          }
          case 42: {
            global::DataTypes.Photo subBuilder = new global::DataTypes.Photo();
            if (valueTypeCase_ == ValueTypeOneofCase.Photo) {
              subBuilder.MergeFrom(Photo);
            }
            input.ReadMessage(subBuilder);
            Photo = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Entities : pb::IMessage<Entities> {
    private static readonly pb::MessageParser<Entities> _parser = new pb::MessageParser<Entities>(() => new Entities());
    public static pb::MessageParser<Entities> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.DatabaseServiceReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Entities() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Entities(Entities other) : this() {
      items_ = other.items_.Clone();
    }

    public Entities Clone() {
      return new Entities(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Services.Entity> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Services.Entity.Parser);
    private readonly pbc::RepeatedField<global::Services.Entity> items_ = new pbc::RepeatedField<global::Services.Entity>();
    public pbc::RepeatedField<global::Services.Entity> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Entities);
    }

    public bool Equals(Entities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(Entities other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
