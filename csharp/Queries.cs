// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes/queries.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from datatypes/queries.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QueriesReflection {

    #region Descriptor
    /// <summary>File descriptor for datatypes/queries.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueriesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdkYXRhdHlwZXMvcXVlcmllcy5wcm90bxIJRGF0YVR5cGVzGhxkYXRhdHlw",
            "ZXMvdmlzaXRfcmVjb3JkLnByb3RvGhNkYXRhdHlwZXMva2V5LnByb3RvGhZk",
            "YXRhdHlwZXMvZW50aXR5LnByb3RvIkAKC0dldFJlc3BvbnNlEiIKBWl0ZW1z",
            "GAEgASgLMhMuRGF0YVR5cGVzLkVudGl0aWVzEg0KBWNvdW50GAIgASgDIoMC",
            "CgpHZXRSZXF1ZXN0EjUKDnBlcnNvbl9yZXF1ZXN0GAEgASgLMhsuRGF0YVR5",
            "cGVzLkdldFBlcnNvblJlcXVlc3RIABIxCgxjYXJkX3JlcXVlc3QYAiABKAsy",
            "GS5EYXRhVHlwZXMuR2V0Q2FyZFJlcXVlc3RIABI5ChBsb2NhdGlvbl9yZXF1",
            "ZXN0GAMgASgLMh0uRGF0YVR5cGVzLkdldExvY2F0aW9uUmVxdWVzdEgAEkAK",
            "FHZpc2l0X3JlY29yZF9yZXF1ZXN0GAQgASgLMiAuRGF0YVR5cGVzLkdldFZp",
            "c2l0UmVjb3JkUmVxdWVzdEgAQg4KDHJlcXVlc3RfdHlwZSK6AQoQR2V0UGVy",
            "c29uUmVxdWVzdBITCgtzZWFyY2hfdGV4dBgBIAEoCRISCgpmaXJzdF9uYW1l",
            "GAIgASgJEhEKCWxhc3RfbmFtZRgDIAEoCRIMCgRjYXJkGAQgASgJEiEKCWxv",
            "Y2F0aW9ucxgFIAMoCzIOLkRhdGFUeXBlcy5LZXkSHQoEcGFnZRgGIAEoCzIP",
            "LkRhdGFUeXBlcy5QYWdlEhoKAmlkGAcgASgLMg4uRGF0YVR5cGVzLktleSKc",
            "AQoSR2V0TG9jYXRpb25SZXF1ZXN0EhMKC3NlYXJjaF90ZXh0GAEgASgJEgwK",
            "BG5hbWUYAiABKAkSEwoLbWFjX2FkZHJlc3MYAyABKAkSEwoLZGV2aWNlX25h",
            "bWUYBCABKAkSHQoEcGFnZRgFIAEoCzIPLkRhdGFUeXBlcy5QYWdlEhoKAmlk",
            "GAYgASgLMg4uRGF0YVR5cGVzLktleSKMAgoVR2V0VmlzaXRSZWNvcmRSZXF1",
            "ZXN0EhMKC3NlYXJjaF90ZXh0GAEgASgJEiUKBXN0YXRlGAIgASgOMhYuRGF0",
            "YVR5cGVzLkFjY2Vzc1N0YXRlEiEKCWxvY2F0aW9ucxgDIAMoCzIOLkRhdGFU",
            "eXBlcy5LZXkSHwoHcGVyc29ucxgEIAMoCzIOLkRhdGFUeXBlcy5LZXkSFQoN",
            "ZGF0ZXRpbWVfZnJvbRgFIAEoAxITCgtkYXRldGltZV90bxgGIAEoAxIMCgRj",
            "YXJkGAcgASgJEh0KBHBhZ2UYCCABKAsyDy5EYXRhVHlwZXMuUGFnZRIaCgJp",
            "ZBgJIAEoCzIOLkRhdGFUeXBlcy5LZXkiIwoEUGFnZRINCgVpbmRleBgBIAEo",
            "BRIMCgRzaXplGAIgASgFIn8KDkdldENhcmRSZXF1ZXN0EhMKC3NlYXJjaF90",
            "ZXh0GAEgASgJEhkKEXVuaXF1ZV9pZGVudGlmaWVyGAIgASgJEh4KBm93bmVy",
            "cxgDIAMoCzIOLkRhdGFUeXBlcy5LZXkSHQoEcGFnZRgEIAEoCzIPLkRhdGFU",
            "eXBlcy5QYWdlQkwKB2V4LmdycGNaO2dpdGh1Yi5jb20vRW5lYnJhL1NlcnZp",
            "Y2VDb29yZGluYXRvci9ncnBjL2RhdGF0eXBlcy9xdWVyaWVzogIDUlRHYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataTypes.VisitRecordReflection.Descriptor, global::DataTypes.KeyReflection.Descriptor, global::DataTypes.EntityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.GetResponse), global::DataTypes.GetResponse.Parser, new[]{ "Items", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.GetRequest), global::DataTypes.GetRequest.Parser, new[]{ "PersonRequest", "CardRequest", "LocationRequest", "VisitRecordRequest" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.GetPersonRequest), global::DataTypes.GetPersonRequest.Parser, new[]{ "SearchText", "FirstName", "LastName", "Card", "Locations", "Page", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.GetLocationRequest), global::DataTypes.GetLocationRequest.Parser, new[]{ "SearchText", "Name", "MacAddress", "DeviceName", "Page", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.GetVisitRecordRequest), global::DataTypes.GetVisitRecordRequest.Parser, new[]{ "SearchText", "State", "Locations", "Persons", "DatetimeFrom", "DatetimeTo", "Card", "Page", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.Page), global::DataTypes.Page.Parser, new[]{ "Index", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.GetCardRequest), global::DataTypes.GetCardRequest.Parser, new[]{ "SearchText", "UniqueIdentifier", "Owners", "Page" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetResponse(GetResponse other) : this() {
      Items = other.items_ != null ? other.Items.Clone() : null;
      count_ = other.count_;
    }

    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private global::DataTypes.Entities items_;
    public global::DataTypes.Entities Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Items, other.Items)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (items_ != null) hash ^= Items.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (items_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Items);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          items_ = new global::DataTypes.Entities();
        }
        Items.MergeFrom(other.Items);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (items_ == null) {
              items_ = new global::DataTypes.Entities();
            }
            input.ReadMessage(items_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetRequest : pb::IMessage<GetRequest> {
    private static readonly pb::MessageParser<GetRequest> _parser = new pb::MessageParser<GetRequest>(() => new GetRequest());
    public static pb::MessageParser<GetRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetRequest(GetRequest other) : this() {
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.PersonRequest:
          PersonRequest = other.PersonRequest.Clone();
          break;
        case RequestTypeOneofCase.CardRequest:
          CardRequest = other.CardRequest.Clone();
          break;
        case RequestTypeOneofCase.LocationRequest:
          LocationRequest = other.LocationRequest.Clone();
          break;
        case RequestTypeOneofCase.VisitRecordRequest:
          VisitRecordRequest = other.VisitRecordRequest.Clone();
          break;
      }

    }

    public GetRequest Clone() {
      return new GetRequest(this);
    }

    /// <summary>Field number for the "person_request" field.</summary>
    public const int PersonRequestFieldNumber = 1;
    public global::DataTypes.GetPersonRequest PersonRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.PersonRequest ? (global::DataTypes.GetPersonRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.PersonRequest;
      }
    }

    /// <summary>Field number for the "card_request" field.</summary>
    public const int CardRequestFieldNumber = 2;
    public global::DataTypes.GetCardRequest CardRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.CardRequest ? (global::DataTypes.GetCardRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.CardRequest;
      }
    }

    /// <summary>Field number for the "location_request" field.</summary>
    public const int LocationRequestFieldNumber = 3;
    public global::DataTypes.GetLocationRequest LocationRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.LocationRequest ? (global::DataTypes.GetLocationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.LocationRequest;
      }
    }

    /// <summary>Field number for the "visit_record_request" field.</summary>
    public const int VisitRecordRequestFieldNumber = 4;
    public global::DataTypes.GetVisitRecordRequest VisitRecordRequest {
      get { return requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest ? (global::DataTypes.GetVisitRecordRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VisitRecordRequest;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "request_type" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      PersonRequest = 1,
      CardRequest = 2,
      LocationRequest = 3,
      VisitRecordRequest = 4,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as GetRequest);
    }

    public bool Equals(GetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PersonRequest, other.PersonRequest)) return false;
      if (!object.Equals(CardRequest, other.CardRequest)) return false;
      if (!object.Equals(LocationRequest, other.LocationRequest)) return false;
      if (!object.Equals(VisitRecordRequest, other.VisitRecordRequest)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) hash ^= PersonRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) hash ^= CardRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) hash ^= LocationRequest.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) hash ^= VisitRecordRequest.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(PersonRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(CardRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(LocationRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(VisitRecordRequest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationRequest);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisitRecordRequest);
      }
      return size;
    }

    public void MergeFrom(GetRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.PersonRequest:
          PersonRequest = other.PersonRequest;
          break;
        case RequestTypeOneofCase.CardRequest:
          CardRequest = other.CardRequest;
          break;
        case RequestTypeOneofCase.LocationRequest:
          LocationRequest = other.LocationRequest;
          break;
        case RequestTypeOneofCase.VisitRecordRequest:
          VisitRecordRequest = other.VisitRecordRequest;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::DataTypes.GetPersonRequest subBuilder = new global::DataTypes.GetPersonRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.PersonRequest) {
              subBuilder.MergeFrom(PersonRequest);
            }
            input.ReadMessage(subBuilder);
            PersonRequest = subBuilder;
            break;
          }
          case 18: {
            global::DataTypes.GetCardRequest subBuilder = new global::DataTypes.GetCardRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.CardRequest) {
              subBuilder.MergeFrom(CardRequest);
            }
            input.ReadMessage(subBuilder);
            CardRequest = subBuilder;
            break;
          }
          case 26: {
            global::DataTypes.GetLocationRequest subBuilder = new global::DataTypes.GetLocationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.LocationRequest) {
              subBuilder.MergeFrom(LocationRequest);
            }
            input.ReadMessage(subBuilder);
            LocationRequest = subBuilder;
            break;
          }
          case 34: {
            global::DataTypes.GetVisitRecordRequest subBuilder = new global::DataTypes.GetVisitRecordRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.VisitRecordRequest) {
              subBuilder.MergeFrom(VisitRecordRequest);
            }
            input.ReadMessage(subBuilder);
            VisitRecordRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetPersonRequest : pb::IMessage<GetPersonRequest> {
    private static readonly pb::MessageParser<GetPersonRequest> _parser = new pb::MessageParser<GetPersonRequest>(() => new GetPersonRequest());
    public static pb::MessageParser<GetPersonRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetPersonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetPersonRequest(GetPersonRequest other) : this() {
      searchText_ = other.searchText_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      card_ = other.card_;
      locations_ = other.locations_.Clone();
      Page = other.page_ != null ? other.Page.Clone() : null;
      Id = other.id_ != null ? other.Id.Clone() : null;
    }

    public GetPersonRequest Clone() {
      return new GetPersonRequest(this);
    }

    /// <summary>Field number for the "search_text" field.</summary>
    public const int SearchTextFieldNumber = 1;
    private string searchText_ = "";
    /// <summary>
    /// search in first name, search in surname
    /// </summary>
    public string SearchText {
      get { return searchText_; }
      set {
        searchText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 2;
    private string firstName_ = "";
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 3;
    private string lastName_ = "";
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 4;
    private string card_ = "";
    public string Card {
      get { return card_; }
      set {
        card_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DataTypes.Key> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(42, global::DataTypes.Key.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Key> locations_ = new pbc::RepeatedField<global::DataTypes.Key>();
    /// <summary>
    /// TODO Photo    photo
    /// TODO Rights   rights
    /// </summary>
    public pbc::RepeatedField<global::DataTypes.Key> Locations {
      get { return locations_; }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 6;
    private global::DataTypes.Page page_;
    public global::DataTypes.Page Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private global::DataTypes.Key id_;
    public global::DataTypes.Key Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetPersonRequest);
    }

    public bool Equals(GetPersonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchText != other.SearchText) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (Card != other.Card) return false;
      if(!locations_.Equals(other.locations_)) return false;
      if (!object.Equals(Page, other.Page)) return false;
      if (!object.Equals(Id, other.Id)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SearchText.Length != 0) hash ^= SearchText.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Card.Length != 0) hash ^= Card.GetHashCode();
      hash ^= locations_.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchText);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastName);
      }
      if (Card.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Card);
      }
      locations_.WriteTo(output, _repeated_locations_codec);
      if (page_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Page);
      }
      if (id_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SearchText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchText);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Card.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Card);
      }
      size += locations_.CalculateSize(_repeated_locations_codec);
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      return size;
    }

    public void MergeFrom(GetPersonRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchText.Length != 0) {
        SearchText = other.SearchText;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Card.Length != 0) {
        Card = other.Card;
      }
      locations_.Add(other.locations_);
      if (other.page_ != null) {
        if (page_ == null) {
          page_ = new global::DataTypes.Page();
        }
        Page.MergeFrom(other.Page);
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataTypes.Key();
        }
        Id.MergeFrom(other.Id);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SearchText = input.ReadString();
            break;
          }
          case 18: {
            FirstName = input.ReadString();
            break;
          }
          case 26: {
            LastName = input.ReadString();
            break;
          }
          case 34: {
            Card = input.ReadString();
            break;
          }
          case 42: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
          case 50: {
            if (page_ == null) {
              page_ = new global::DataTypes.Page();
            }
            input.ReadMessage(page_);
            break;
          }
          case 58: {
            if (id_ == null) {
              id_ = new global::DataTypes.Key();
            }
            input.ReadMessage(id_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLocationRequest : pb::IMessage<GetLocationRequest> {
    private static readonly pb::MessageParser<GetLocationRequest> _parser = new pb::MessageParser<GetLocationRequest>(() => new GetLocationRequest());
    public static pb::MessageParser<GetLocationRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetLocationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetLocationRequest(GetLocationRequest other) : this() {
      searchText_ = other.searchText_;
      name_ = other.name_;
      macAddress_ = other.macAddress_;
      deviceName_ = other.deviceName_;
      Page = other.page_ != null ? other.Page.Clone() : null;
      Id = other.id_ != null ? other.Id.Clone() : null;
    }

    public GetLocationRequest Clone() {
      return new GetLocationRequest(this);
    }

    /// <summary>Field number for the "search_text" field.</summary>
    public const int SearchTextFieldNumber = 1;
    private string searchText_ = "";
    /// <summary>
    /// search in name, description
    /// </summary>
    public string SearchText {
      get { return searchText_; }
      set {
        searchText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac_address" field.</summary>
    public const int MacAddressFieldNumber = 3;
    private string macAddress_ = "";
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 4;
    private string deviceName_ = "";
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 5;
    private global::DataTypes.Page page_;
    public global::DataTypes.Page Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 6;
    private global::DataTypes.Key id_;
    public global::DataTypes.Key Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetLocationRequest);
    }

    public bool Equals(GetLocationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchText != other.SearchText) return false;
      if (Name != other.Name) return false;
      if (MacAddress != other.MacAddress) return false;
      if (DeviceName != other.DeviceName) return false;
      if (!object.Equals(Page, other.Page)) return false;
      if (!object.Equals(Id, other.Id)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SearchText.Length != 0) hash ^= SearchText.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchText);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MacAddress);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceName);
      }
      if (page_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Page);
      }
      if (id_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SearchText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchText);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      return size;
    }

    public void MergeFrom(GetLocationRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchText.Length != 0) {
        SearchText = other.SearchText;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.page_ != null) {
        if (page_ == null) {
          page_ = new global::DataTypes.Page();
        }
        Page.MergeFrom(other.Page);
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataTypes.Key();
        }
        Id.MergeFrom(other.Id);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SearchText = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MacAddress = input.ReadString();
            break;
          }
          case 34: {
            DeviceName = input.ReadString();
            break;
          }
          case 42: {
            if (page_ == null) {
              page_ = new global::DataTypes.Page();
            }
            input.ReadMessage(page_);
            break;
          }
          case 50: {
            if (id_ == null) {
              id_ = new global::DataTypes.Key();
            }
            input.ReadMessage(id_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVisitRecordRequest : pb::IMessage<GetVisitRecordRequest> {
    private static readonly pb::MessageParser<GetVisitRecordRequest> _parser = new pb::MessageParser<GetVisitRecordRequest>(() => new GetVisitRecordRequest());
    public static pb::MessageParser<GetVisitRecordRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetVisitRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetVisitRecordRequest(GetVisitRecordRequest other) : this() {
      searchText_ = other.searchText_;
      state_ = other.state_;
      locations_ = other.locations_.Clone();
      persons_ = other.persons_.Clone();
      datetimeFrom_ = other.datetimeFrom_;
      datetimeTo_ = other.datetimeTo_;
      card_ = other.card_;
      Page = other.page_ != null ? other.Page.Clone() : null;
      Id = other.id_ != null ? other.Id.Clone() : null;
    }

    public GetVisitRecordRequest Clone() {
      return new GetVisitRecordRequest(this);
    }

    /// <summary>Field number for the "search_text" field.</summary>
    public const int SearchTextFieldNumber = 1;
    private string searchText_ = "";
    public string SearchText {
      get { return searchText_; }
      set {
        searchText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::DataTypes.AccessState state_ = 0;
    public global::DataTypes.AccessState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataTypes.Key> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(26, global::DataTypes.Key.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Key> locations_ = new pbc::RepeatedField<global::DataTypes.Key>();
    public pbc::RepeatedField<global::DataTypes.Key> Locations {
      get { return locations_; }
    }

    /// <summary>Field number for the "persons" field.</summary>
    public const int PersonsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::DataTypes.Key> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(34, global::DataTypes.Key.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Key> persons_ = new pbc::RepeatedField<global::DataTypes.Key>();
    public pbc::RepeatedField<global::DataTypes.Key> Persons {
      get { return persons_; }
    }

    /// <summary>Field number for the "datetime_from" field.</summary>
    public const int DatetimeFromFieldNumber = 5;
    private long datetimeFrom_;
    public long DatetimeFrom {
      get { return datetimeFrom_; }
      set {
        datetimeFrom_ = value;
      }
    }

    /// <summary>Field number for the "datetime_to" field.</summary>
    public const int DatetimeToFieldNumber = 6;
    private long datetimeTo_;
    public long DatetimeTo {
      get { return datetimeTo_; }
      set {
        datetimeTo_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 7;
    private string card_ = "";
    public string Card {
      get { return card_; }
      set {
        card_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 8;
    private global::DataTypes.Page page_;
    public global::DataTypes.Page Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 9;
    private global::DataTypes.Key id_;
    public global::DataTypes.Key Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetVisitRecordRequest);
    }

    public bool Equals(GetVisitRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchText != other.SearchText) return false;
      if (State != other.State) return false;
      if(!locations_.Equals(other.locations_)) return false;
      if(!persons_.Equals(other.persons_)) return false;
      if (DatetimeFrom != other.DatetimeFrom) return false;
      if (DatetimeTo != other.DatetimeTo) return false;
      if (Card != other.Card) return false;
      if (!object.Equals(Page, other.Page)) return false;
      if (!object.Equals(Id, other.Id)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SearchText.Length != 0) hash ^= SearchText.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= locations_.GetHashCode();
      hash ^= persons_.GetHashCode();
      if (DatetimeFrom != 0L) hash ^= DatetimeFrom.GetHashCode();
      if (DatetimeTo != 0L) hash ^= DatetimeTo.GetHashCode();
      if (Card.Length != 0) hash ^= Card.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      if (id_ != null) hash ^= Id.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchText);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      locations_.WriteTo(output, _repeated_locations_codec);
      persons_.WriteTo(output, _repeated_persons_codec);
      if (DatetimeFrom != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DatetimeFrom);
      }
      if (DatetimeTo != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(DatetimeTo);
      }
      if (Card.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Card);
      }
      if (page_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Page);
      }
      if (id_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SearchText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchText);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += locations_.CalculateSize(_repeated_locations_codec);
      size += persons_.CalculateSize(_repeated_persons_codec);
      if (DatetimeFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DatetimeFrom);
      }
      if (DatetimeTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DatetimeTo);
      }
      if (Card.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Card);
      }
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      return size;
    }

    public void MergeFrom(GetVisitRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchText.Length != 0) {
        SearchText = other.SearchText;
      }
      if (other.State != 0) {
        State = other.State;
      }
      locations_.Add(other.locations_);
      persons_.Add(other.persons_);
      if (other.DatetimeFrom != 0L) {
        DatetimeFrom = other.DatetimeFrom;
      }
      if (other.DatetimeTo != 0L) {
        DatetimeTo = other.DatetimeTo;
      }
      if (other.Card.Length != 0) {
        Card = other.Card;
      }
      if (other.page_ != null) {
        if (page_ == null) {
          page_ = new global::DataTypes.Page();
        }
        Page.MergeFrom(other.Page);
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::DataTypes.Key();
        }
        Id.MergeFrom(other.Id);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SearchText = input.ReadString();
            break;
          }
          case 16: {
            state_ = (global::DataTypes.AccessState) input.ReadEnum();
            break;
          }
          case 26: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
          case 34: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
          case 40: {
            DatetimeFrom = input.ReadInt64();
            break;
          }
          case 48: {
            DatetimeTo = input.ReadInt64();
            break;
          }
          case 58: {
            Card = input.ReadString();
            break;
          }
          case 66: {
            if (page_ == null) {
              page_ = new global::DataTypes.Page();
            }
            input.ReadMessage(page_);
            break;
          }
          case 74: {
            if (id_ == null) {
              id_ = new global::DataTypes.Key();
            }
            input.ReadMessage(id_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Page : pb::IMessage<Page> {
    private static readonly pb::MessageParser<Page> _parser = new pb::MessageParser<Page>(() => new Page());
    public static pb::MessageParser<Page> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Page() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Page(Page other) : this() {
      index_ = other.index_;
      size_ = other.size_;
    }

    public Page Clone() {
      return new Page(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Page);
    }

    public bool Equals(Page other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Size != other.Size) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      return size;
    }

    public void MergeFrom(Page other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetCardRequest : pb::IMessage<GetCardRequest> {
    private static readonly pb::MessageParser<GetCardRequest> _parser = new pb::MessageParser<GetCardRequest>(() => new GetCardRequest());
    public static pb::MessageParser<GetCardRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.QueriesReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetCardRequest(GetCardRequest other) : this() {
      searchText_ = other.searchText_;
      uniqueIdentifier_ = other.uniqueIdentifier_;
      owners_ = other.owners_.Clone();
      Page = other.page_ != null ? other.Page.Clone() : null;
    }

    public GetCardRequest Clone() {
      return new GetCardRequest(this);
    }

    /// <summary>Field number for the "search_text" field.</summary>
    public const int SearchTextFieldNumber = 1;
    private string searchText_ = "";
    /// <summary>
    /// search in name, description
    /// </summary>
    public string SearchText {
      get { return searchText_; }
      set {
        searchText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_identifier" field.</summary>
    public const int UniqueIdentifierFieldNumber = 2;
    private string uniqueIdentifier_ = "";
    public string UniqueIdentifier {
      get { return uniqueIdentifier_; }
      set {
        uniqueIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owners" field.</summary>
    public const int OwnersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DataTypes.Key> _repeated_owners_codec
        = pb::FieldCodec.ForMessage(26, global::DataTypes.Key.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.Key> owners_ = new pbc::RepeatedField<global::DataTypes.Key>();
    public pbc::RepeatedField<global::DataTypes.Key> Owners {
      get { return owners_; }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 4;
    private global::DataTypes.Page page_;
    public global::DataTypes.Page Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetCardRequest);
    }

    public bool Equals(GetCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchText != other.SearchText) return false;
      if (UniqueIdentifier != other.UniqueIdentifier) return false;
      if(!owners_.Equals(other.owners_)) return false;
      if (!object.Equals(Page, other.Page)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SearchText.Length != 0) hash ^= SearchText.GetHashCode();
      if (UniqueIdentifier.Length != 0) hash ^= UniqueIdentifier.GetHashCode();
      hash ^= owners_.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchText);
      }
      if (UniqueIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UniqueIdentifier);
      }
      owners_.WriteTo(output, _repeated_owners_codec);
      if (page_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Page);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SearchText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchText);
      }
      if (UniqueIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueIdentifier);
      }
      size += owners_.CalculateSize(_repeated_owners_codec);
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      return size;
    }

    public void MergeFrom(GetCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchText.Length != 0) {
        SearchText = other.SearchText;
      }
      if (other.UniqueIdentifier.Length != 0) {
        UniqueIdentifier = other.UniqueIdentifier;
      }
      owners_.Add(other.owners_);
      if (other.page_ != null) {
        if (page_ == null) {
          page_ = new global::DataTypes.Page();
        }
        Page.MergeFrom(other.Page);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SearchText = input.ReadString();
            break;
          }
          case 18: {
            UniqueIdentifier = input.ReadString();
            break;
          }
          case 26: {
            owners_.AddEntriesFrom(input, _repeated_owners_codec);
            break;
          }
          case 34: {
            if (page_ == null) {
              page_ = new global::DataTypes.Page();
            }
            input.ReadMessage(page_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
