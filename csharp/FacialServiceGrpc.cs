// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/facial_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Services {
  public static class BiometricFacialService
  {
    static readonly string __ServiceName = "Services.BiometricFacialService";

    static readonly Marshaller<global::Services.BiometricRequest> __Marshaller_BiometricRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.BiometricRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Services.BiometricResponse> __Marshaller_BiometricResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.BiometricResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Services.BiometricUpdate> __Marshaller_BiometricUpdate = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.BiometricUpdate.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly Method<global::Services.BiometricRequest, global::Services.BiometricResponse> __Method_Process = new Method<global::Services.BiometricRequest, global::Services.BiometricResponse>(
        MethodType.Unary,
        __ServiceName,
        "Process",
        __Marshaller_BiometricRequest,
        __Marshaller_BiometricResponse);

    static readonly Method<global::Services.BiometricUpdate, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Update = new Method<global::Services.BiometricUpdate, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_BiometricUpdate,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.FacialServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BiometricFacialService</summary>
    public abstract class BiometricFacialServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Services.BiometricResponse> Process(global::Services.BiometricRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Update(global::Services.BiometricUpdate request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BiometricFacialService</summary>
    public class BiometricFacialServiceClient : ClientBase<BiometricFacialServiceClient>
    {
      /// <summary>Creates a new client for BiometricFacialService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BiometricFacialServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BiometricFacialService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BiometricFacialServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BiometricFacialServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BiometricFacialServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Services.BiometricResponse Process(global::Services.BiometricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Process(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.BiometricResponse Process(global::Services.BiometricRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Process, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.BiometricResponse> ProcessAsync(global::Services.BiometricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ProcessAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.BiometricResponse> ProcessAsync(global::Services.BiometricRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Process, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Update(global::Services.BiometricUpdate request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Update(global::Services.BiometricUpdate request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateAsync(global::Services.BiometricUpdate request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateAsync(global::Services.BiometricUpdate request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      protected override BiometricFacialServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BiometricFacialServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(BiometricFacialServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Process, serviceImpl.Process)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

  }
}
#endregion
