// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/facial_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Services {
  public static class BiometricFacialService
  {
    static readonly string __ServiceName = "Services.BiometricFacialService";

    static readonly Marshaller<global::DataTypes.Photo> __Marshaller_Photo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Photo.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.Faces> __Marshaller_Faces = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Faces.Parser.ParseFrom);
    static readonly Marshaller<global::DataTypes.Photos> __Marshaller_Photos = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DataTypes.Photos.Parser.ParseFrom);
    static readonly Marshaller<global::Services.PopulationCreationResponse> __Marshaller_PopulationCreationResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.PopulationCreationResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Services.VerificationData> __Marshaller_VerificationData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.VerificationData.Parser.ParseFrom);
    static readonly Marshaller<global::Services.FaceSearchResponse> __Marshaller_FaceSearchResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.FaceSearchResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Services.IdentificationData> __Marshaller_IdentificationData = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.IdentificationData.Parser.ParseFrom);

    static readonly Method<global::DataTypes.Photo, global::DataTypes.Faces> __Method_Acquire = new Method<global::DataTypes.Photo, global::DataTypes.Faces>(
        MethodType.Unary,
        __ServiceName,
        "Acquire",
        __Marshaller_Photo,
        __Marshaller_Faces);

    static readonly Method<global::DataTypes.Photos, global::Services.PopulationCreationResponse> __Method_CreatePopulation = new Method<global::DataTypes.Photos, global::Services.PopulationCreationResponse>(
        MethodType.Unary,
        __ServiceName,
        "CreatePopulation",
        __Marshaller_Photos,
        __Marshaller_PopulationCreationResponse);

    static readonly Method<global::Services.VerificationData, global::Services.FaceSearchResponse> __Method_Verify = new Method<global::Services.VerificationData, global::Services.FaceSearchResponse>(
        MethodType.Unary,
        __ServiceName,
        "Verify",
        __Marshaller_VerificationData,
        __Marshaller_FaceSearchResponse);

    static readonly Method<global::Services.IdentificationData, global::Services.FaceSearchResponse> __Method_Identify = new Method<global::Services.IdentificationData, global::Services.FaceSearchResponse>(
        MethodType.Unary,
        __ServiceName,
        "Identify",
        __Marshaller_IdentificationData,
        __Marshaller_FaceSearchResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.FacialServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BiometricFacialService</summary>
    public abstract class BiometricFacialServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::DataTypes.Faces> Acquire(global::DataTypes.Photo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.PopulationCreationResponse> CreatePopulation(global::DataTypes.Photos request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.FaceSearchResponse> Verify(global::Services.VerificationData request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.FaceSearchResponse> Identify(global::Services.IdentificationData request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BiometricFacialService</summary>
    public class BiometricFacialServiceClient : ClientBase<BiometricFacialServiceClient>
    {
      /// <summary>Creates a new client for BiometricFacialService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BiometricFacialServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BiometricFacialService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BiometricFacialServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BiometricFacialServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BiometricFacialServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::DataTypes.Faces Acquire(global::DataTypes.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Acquire(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DataTypes.Faces Acquire(global::DataTypes.Photo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Acquire, null, options, request);
      }
      public virtual AsyncUnaryCall<global::DataTypes.Faces> AcquireAsync(global::DataTypes.Photo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AcquireAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::DataTypes.Faces> AcquireAsync(global::DataTypes.Photo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Acquire, null, options, request);
      }
      public virtual global::Services.PopulationCreationResponse CreatePopulation(global::DataTypes.Photos request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreatePopulation(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.PopulationCreationResponse CreatePopulation(global::DataTypes.Photos request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePopulation, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.PopulationCreationResponse> CreatePopulationAsync(global::DataTypes.Photos request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreatePopulationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.PopulationCreationResponse> CreatePopulationAsync(global::DataTypes.Photos request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePopulation, null, options, request);
      }
      public virtual global::Services.FaceSearchResponse Verify(global::Services.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Verify(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.FaceSearchResponse Verify(global::Services.VerificationData request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Verify, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.FaceSearchResponse> VerifyAsync(global::Services.VerificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.FaceSearchResponse> VerifyAsync(global::Services.VerificationData request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Verify, null, options, request);
      }
      public virtual global::Services.FaceSearchResponse Identify(global::Services.IdentificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Identify(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.FaceSearchResponse Identify(global::Services.IdentificationData request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Identify, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.FaceSearchResponse> IdentifyAsync(global::Services.IdentificationData request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IdentifyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.FaceSearchResponse> IdentifyAsync(global::Services.IdentificationData request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Identify, null, options, request);
      }
      protected override BiometricFacialServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BiometricFacialServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(BiometricFacialServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Acquire, serviceImpl.Acquire)
          .AddMethod(__Method_CreatePopulation, serviceImpl.CreatePopulation)
          .AddMethod(__Method_Verify, serviceImpl.Verify)
          .AddMethod(__Method_Identify, serviceImpl.Identify).Build();
    }

  }
}
#endregion
